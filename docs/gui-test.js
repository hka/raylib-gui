// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = (numericVersion[0] * 10000) + (numericVersion[1] * 100) + (numericVersion[2].split('-')[0] * 1);
  var minVersion = 101900;
  if (numericVersion < 101900) {
    throw new Error('This emscripten-generated code requires node v10.19.19.0 (detected v' + nodeVersion + ')');
  }

  // `require()` is no-op in an ESM module, use `createRequire()` to construct
  // the require()` function.  This is only necessary for multi-environment
  // builds, `-sENVIRONMENT=node` emits a static import declaration instead.
  // TODO: Swap all `require()`'s with `import()`'s?
  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = nodePath.dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js
read_ = (filename, binary) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  // We need to re-wrap `file://` strings to URLs. Normalizing isn't
  // necessary in that case, the path should already be absolute.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  return fs.readFileSync(filename, binary ? undefined : 'utf8');
};

readBinary = (filename) => {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = (filename, onload, onerror, binary = true) => {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  // See the comment in the `read_` function.
  filename = isFileURI(filename) ? new URL(filename) : nodePath.normalize(filename);
  fs.readFile(filename, binary ? undefined : 'utf8', (err, data) => {
    if (err) onerror(err);
    else onload(binary ? data.buffer : data);
  });
};

// end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  if (typeof module != 'undefined') {
    module['exports'] = Module;
  }

  process.on('uncaughtException', (ex) => {
    // suppress ExitStatus exceptions from showing an error
    if (ex !== 'unwind' && !(ex instanceof ExitStatus) && !(ex.context instanceof ExitStatus)) {
      throw ex;
    }
  });

  // Without this older versions of node (< v15) will log unhandled rejections
  // but return 0, which is not normally the desired behaviour.  This is
  // not be needed with node v15 and about because it is now the default
  // behaviour:
  // See https://nodejs.org/api/cli.html#cli_unhandled_rejections_mode
  var nodeMajor = process.versions.node.split(".")[0];
  if (nodeMajor < 15) {
    process.on('unhandledRejection', (reason) => { throw reason; });
  }

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

  Module['inspect'] = () => '[Emscripten Module object]';

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof importScripts == 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = (f) => {
      const data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = (f) => {
    let data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer == 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data == 'object');
    return data;
  };

  readAsync = (f, onload, onerror) => {
    setTimeout(() => onload(readBinary(f)), 0);
  };

  if (typeof clearTimeout == 'undefined') {
    globalThis.clearTimeout = (id) => {};
  }

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit == 'function') {
    quit_ = (status, toThrow) => {
      // Unlike node which has process.exitCode, d8 has no such mechanism. So we
      // have no way to set the exit code and then let the program exit with
      // that code when it naturally stops running (say, when all setTimeouts
      // have completed). For that reason, we must call `quit` - the only way to
      // set the exit code - but quit also halts immediately.  To increase
      // consistency with node (and the web) we schedule the actual quit call
      // using a setTimeout to give the current stack and any exception handlers
      // a chance to run.  This enables features such as addOnPostRun (which
      // expected to be able to run code after main returns).
      setTimeout(() => {
        if (!(toThrow instanceof ExitStatus)) {
          let toLog = toThrow;
          if (toThrow && typeof toThrow == 'object' && toThrow.stack) {
            toLog = [toThrow, toThrow.stack];
          }
          err('exiting due to exception: ' + toLog);
        }
        quit(status);
      });
      throw toThrow;
    };
  }

  if (typeof print != 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console == 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr != 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window == 'object' || typeof importScripts == 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js
read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

if (Module['quit']) quit_ = Module['quit'];legacyModuleProp('quit', 'quit_');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('read', 'read_');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-sENVIRONMENT` to enable.");


// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');
var noExitRuntime = Module['noExitRuntime'] || true;legacyModuleProp('noExitRuntime', 'noExitRuntime');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 65536, "");
  base64DecodeToExistingUint8Array(bufferView, 85040, "AAUAANACAAA8AAAAAAAAAAAAAAD/AwAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAABAAAAAQAAAAcAAAAAAAAAAAAAAAAAgD8AAIA/CAAAAP////8AAAAAAAAAAAAAAAADAAQABQAGAAcACAAJAAoACwANAA8AEQATABcAGwAfACMAKwAzADsAQwBTAGMAcwCDAKMAwwDjAAIBAwEAAAAAAAAAAAAAAAABAQEBAgICAgMDAwMEBAQEBQUFBQAAAAABAAIAAwAEAAUABwAJAA0AEQAZACEAMQBBAGEAgQDBAAEBgQEBAgEDAQQBBgEIAQwBEAEYASABMAFAAWAAgAAAAAAAAAEBAgIDAwQEBQUGBgcHCAgJCQoKCwsMDA0NAAAAAAAAAQAAAAIAAAADAAAABAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAUAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAJYwB3csYQ7uulEJmRnEbQeP9GpwNaVj6aOVZJ4yiNsOpLjceR7p1eCI2dKXK0y2Cb18sX4HLbjnkR2/kGQQtx3yILBqSHG5895BvoR91Noa6+TdbVG11PTHhdODVphsE8Coa2R6+WL97Mllik9cARTZbAZjYz0P+vUNCI3IIG47XhBpTORBYNVycWei0eQDPEfUBEv9hQ3Sa7UKpfqotTVsmLJC1sm720D5vKzjbNgydVzfRc8N1txZPdGrrDDZJjoA3lGAUdfIFmHQv7X0tCEjxLNWmZW6zw+lvbieuAIoCIgFX7LZDMYk6Quxh3xvLxFMaFirHWHBPS1mtpBB3HYGcdsBvCDSmCoQ1e+JhbFxH7W2BqXkv58z1LjooskHeDT5AA+OqAmWGJgO4bsNan8tPW0Il2xkkQFcY+b0UWtrYmFsHNgwZYVOAGLy7ZUGbHulARvB9AiCV8QP9cbZsGVQ6bcS6ri+i3yIufzfHd1iSS3aFfN804xlTNT7WGGyTc5RtTp0ALyj4jC71EGl30rXldg9bcTRpPv01tNq6WlD/NluNEaIZ63QuGDacy0EROUdAzNfTAqqyXwN3TxxBVCqQQInEBALvoYgDMkltWhXs4VvIAnUZrmf5GHODvneXpjJ2SkimNCwtKjXxxc9s1mBDbQuO1y9t61susAgg7jttrO/mgzitgOa0rF0OUfV6q930p0VJtsEgxbccxILY+OEO2SUPmptDahaanoLzw7knf8JkyeuAAqxngd9RJMP8NKjCIdo8gEe/sIGaV1XYvfLZ2WAcTZsGecGa252G9T+4CvTiVp62hDMSt1nb9+5+fnvvo5DvrcX1Y6wYOij1tZ+k9GhxMLYOFLy30/xZ7vRZ1e8pt0GtT9LNrJI2isN2EwbCq/2SgM2YHoEQcPvYN9V32eo745uMXm+aUaMs2HLGoNmvKDSbyU24mhSlXcMzANHC7u5FgIiLyYFVb47usUoC72yklq0KwRqs1yn/9fCMc/QtYue2Swdrt5bsMJkmybyY+yco2p1CpNtAqkGCZw/Ng7rhWcHchNXAAWCSr+VFHq44q4rsXs4G7YMm47Skg2+1eW379x8Id/bC9TS04ZC4tTx+LPdaG6D2h/NFr6BWya59uF3sG93R7cY5loIiHBqD//KOwZmXAsBEf+eZY9prmL40/9rYUXPbBZ44gqg7tIN11SDBE7CswM5YSZnp/cWYNBNR2lJ23duPkpq0a7cWtbZZgvfQPA72DdTrrypxZ673n/Pskfp/7UwHPK9vYrCusowk7NTpqO0JAU20LqTBtfNKVfeVL9n2SMuemazuEphxAIbaF2UK28qN74LtKGODMMb3wVaje8CLQMAAAAAAAAABQAAAAAAAAAAAAAAwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvwAAAMMAAAB4kgEAAAQAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAP////8KAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGFIBAICYAQAFAAAAAAAAAAAAAADBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC/AAAAvgAAAHCYAQAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwUgEA");
  base64DecodeToExistingUint8Array(bufferView, 86852, "KCk8Ojo+eyByZXR1cm4gY2FudmFzLmNsaWVudFdpZHRoOyB9ACgpPDo6PnsgcmV0dXJuIGNhbnZhcy5jbGllbnRIZWlnaHQ7IH0A");
  base64DecodeToExistingUint8Array(bufferView, 86928, "");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var __cxa_throw = env.__cxa_throw;
 var emscripten_set_main_loop = env.emscripten_set_main_loop;
 var glViewport = env.glViewport;
 var glBindBuffer = env.glBindBuffer;
 var glBufferSubData = env.glBufferSubData;
 var glUseProgram = env.glUseProgram;
 var glUniformMatrix4fv = env.glUniformMatrix4fv;
 var glVertexAttribPointer = env.glVertexAttribPointer;
 var glEnableVertexAttribArray = env.glEnableVertexAttribArray;
 var glUniform4f = env.glUniform4f;
 var glUniform1i = env.glUniform1i;
 var glActiveTexture = env.glActiveTexture;
 var glBindTexture = env.glBindTexture;
 var glDrawArrays = env.glDrawArrays;
 var glDrawElements = env.glDrawElements;
 var glTexParameterf = env.glTexParameterf;
 var glTexParameteri = env.glTexParameteri;
 var glEnable = env.glEnable;
 var glDisable = env.glDisable;
 var glCullFace = env.glCullFace;
 var glGetFloatv = env.glGetFloatv;
 var glClearColor = env.glClearColor;
 var glClear = env.glClear;
 var glBlendFunc = env.glBlendFunc;
 var glDepthFunc = env.glDepthFunc;
 var glFrontFace = env.glFrontFace;
 var glClearDepthf = env.glClearDepthf;
 var glPixelStorei = env.glPixelStorei;
 var glGenTextures = env.glGenTextures;
 var glTexImage2D = env.glTexImage2D;
 var glCompressedTexImage2D = env.glCompressedTexImage2D;
 var glGetAttribLocation = env.glGetAttribLocation;
 var glGetUniformLocation = env.glGetUniformLocation;
 var glGenBuffers = env.glGenBuffers;
 var glBufferData = env.glBufferData;
 var glDeleteTextures = env.glDeleteTextures;
 var glDisableVertexAttribArray = env.glDisableVertexAttribArray;
 var glDeleteBuffers = env.glDeleteBuffers;
 var glDetachShader = env.glDetachShader;
 var glDeleteShader = env.glDeleteShader;
 var glDeleteProgram = env.glDeleteProgram;
 var glGetString = env.glGetString;
 var glReadPixels = env.glReadPixels;
 var glCreateShader = env.glCreateShader;
 var glShaderSource = env.glShaderSource;
 var glCompileShader = env.glCompileShader;
 var glGetShaderiv = env.glGetShaderiv;
 var glGetShaderInfoLog = env.glGetShaderInfoLog;
 var glCreateProgram = env.glCreateProgram;
 var glAttachShader = env.glAttachShader;
 var glBindAttribLocation = env.glBindAttribLocation;
 var glLinkProgram = env.glLinkProgram;
 var glGetProgramiv = env.glGetProgramiv;
 var glGetProgramInfoLog = env.glGetProgramInfoLog;
 var emscripten_set_fullscreenchange_callback_on_thread = env.emscripten_set_fullscreenchange_callback_on_thread;
 var emscripten_set_click_callback_on_thread = env.emscripten_set_click_callback_on_thread;
 var emscripten_set_touchstart_callback_on_thread = env.emscripten_set_touchstart_callback_on_thread;
 var emscripten_set_touchend_callback_on_thread = env.emscripten_set_touchend_callback_on_thread;
 var emscripten_set_touchmove_callback_on_thread = env.emscripten_set_touchmove_callback_on_thread;
 var emscripten_set_touchcancel_callback_on_thread = env.emscripten_set_touchcancel_callback_on_thread;
 var emscripten_set_gamepadconnected_callback_on_thread = env.emscripten_set_gamepadconnected_callback_on_thread;
 var emscripten_set_gamepaddisconnected_callback_on_thread = env.emscripten_set_gamepaddisconnected_callback_on_thread;
 var glfwSetErrorCallback = env.glfwSetErrorCallback;
 var glfwInit = env.glfwInit;
 var glfwDefaultWindowHints = env.glfwDefaultWindowHints;
 var glfwWindowHint = env.glfwWindowHint;
 var glfwGetPrimaryMonitor = env.glfwGetPrimaryMonitor;
 var glfwGetVideoModes = env.glfwGetVideoModes;
 var glfwCreateWindow = env.glfwCreateWindow;
 var glfwTerminate = env.glfwTerminate;
 var glfwSetWindowSizeCallback = env.glfwSetWindowSizeCallback;
 var glfwSetWindowIconifyCallback = env.glfwSetWindowIconifyCallback;
 var glfwSetWindowFocusCallback = env.glfwSetWindowFocusCallback;
 var glfwSetDropCallback = env.glfwSetDropCallback;
 var glfwSetKeyCallback = env.glfwSetKeyCallback;
 var glfwSetCharCallback = env.glfwSetCharCallback;
 var glfwSetMouseButtonCallback = env.glfwSetMouseButtonCallback;
 var glfwSetCursorPosCallback = env.glfwSetCursorPosCallback;
 var glfwSetScrollCallback = env.glfwSetScrollCallback;
 var glfwSetCursorEnterCallback = env.glfwSetCursorEnterCallback;
 var glfwMakeContextCurrent = env.glfwMakeContextCurrent;
 var glfwSwapInterval = env.glfwSwapInterval;
 var emscripten_get_element_css_size = env.emscripten_get_element_css_size;
 var glfwDestroyWindow = env.glfwDestroyWindow;
 var emscripten_run_script = env.emscripten_run_script;
 var glfwGetTime = env.glfwGetTime;
 var glfwSwapBuffers = env.glfwSwapBuffers;
 var emscripten_sample_gamepad_data = env.emscripten_sample_gamepad_data;
 var emscripten_get_num_gamepads = env.emscripten_get_num_gamepads;
 var emscripten_get_gamepad_status = env.emscripten_get_gamepad_status;
 var __assert_fail = env.__assert_fail;
 var glfwSetWindowShouldClose = env.glfwSetWindowShouldClose;
 var exit = env.exit;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_glGenQueriesEXT = env.emscripten_glGenQueriesEXT;
 var emscripten_glDeleteQueriesEXT = env.emscripten_glDeleteQueriesEXT;
 var emscripten_glIsQueryEXT = env.emscripten_glIsQueryEXT;
 var emscripten_glBeginQueryEXT = env.emscripten_glBeginQueryEXT;
 var emscripten_glEndQueryEXT = env.emscripten_glEndQueryEXT;
 var emscripten_glQueryCounterEXT = env.emscripten_glQueryCounterEXT;
 var emscripten_glGetQueryivEXT = env.emscripten_glGetQueryivEXT;
 var emscripten_glGetQueryObjectivEXT = env.emscripten_glGetQueryObjectivEXT;
 var emscripten_glGetQueryObjectuivEXT = env.emscripten_glGetQueryObjectuivEXT;
 var emscripten_glGetQueryObjecti64vEXT = env.emscripten_glGetQueryObjecti64vEXT;
 var emscripten_glGetQueryObjectui64vEXT = env.emscripten_glGetQueryObjectui64vEXT;
 var emscripten_glBindVertexArrayOES = env.emscripten_glBindVertexArrayOES;
 var emscripten_glDeleteVertexArraysOES = env.emscripten_glDeleteVertexArraysOES;
 var emscripten_glGenVertexArraysOES = env.emscripten_glGenVertexArraysOES;
 var emscripten_glIsVertexArrayOES = env.emscripten_glIsVertexArrayOES;
 var emscripten_glDrawBuffersWEBGL = env.emscripten_glDrawBuffersWEBGL;
 var emscripten_glDrawArraysInstancedANGLE = env.emscripten_glDrawArraysInstancedANGLE;
 var emscripten_glDrawElementsInstancedANGLE = env.emscripten_glDrawElementsInstancedANGLE;
 var emscripten_glVertexAttribDivisorANGLE = env.emscripten_glVertexAttribDivisorANGLE;
 var emscripten_glActiveTexture = env.emscripten_glActiveTexture;
 var emscripten_glAttachShader = env.emscripten_glAttachShader;
 var emscripten_glBindAttribLocation = env.emscripten_glBindAttribLocation;
 var emscripten_glBindBuffer = env.emscripten_glBindBuffer;
 var emscripten_glBindFramebuffer = env.emscripten_glBindFramebuffer;
 var emscripten_glBindRenderbuffer = env.emscripten_glBindRenderbuffer;
 var emscripten_glBindTexture = env.emscripten_glBindTexture;
 var emscripten_glBlendColor = env.emscripten_glBlendColor;
 var emscripten_glBlendEquation = env.emscripten_glBlendEquation;
 var emscripten_glBlendEquationSeparate = env.emscripten_glBlendEquationSeparate;
 var emscripten_glBlendFunc = env.emscripten_glBlendFunc;
 var emscripten_glBlendFuncSeparate = env.emscripten_glBlendFuncSeparate;
 var emscripten_glBufferData = env.emscripten_glBufferData;
 var emscripten_glBufferSubData = env.emscripten_glBufferSubData;
 var emscripten_glCheckFramebufferStatus = env.emscripten_glCheckFramebufferStatus;
 var emscripten_glClear = env.emscripten_glClear;
 var emscripten_glClearColor = env.emscripten_glClearColor;
 var emscripten_glClearDepthf = env.emscripten_glClearDepthf;
 var emscripten_glClearStencil = env.emscripten_glClearStencil;
 var emscripten_glColorMask = env.emscripten_glColorMask;
 var emscripten_glCompileShader = env.emscripten_glCompileShader;
 var emscripten_glCompressedTexImage2D = env.emscripten_glCompressedTexImage2D;
 var emscripten_glCompressedTexSubImage2D = env.emscripten_glCompressedTexSubImage2D;
 var emscripten_glCopyTexImage2D = env.emscripten_glCopyTexImage2D;
 var emscripten_glCopyTexSubImage2D = env.emscripten_glCopyTexSubImage2D;
 var emscripten_glCreateProgram = env.emscripten_glCreateProgram;
 var emscripten_glCreateShader = env.emscripten_glCreateShader;
 var emscripten_glCullFace = env.emscripten_glCullFace;
 var emscripten_glDeleteBuffers = env.emscripten_glDeleteBuffers;
 var emscripten_glDeleteFramebuffers = env.emscripten_glDeleteFramebuffers;
 var emscripten_glDeleteProgram = env.emscripten_glDeleteProgram;
 var emscripten_glDeleteRenderbuffers = env.emscripten_glDeleteRenderbuffers;
 var emscripten_glDeleteShader = env.emscripten_glDeleteShader;
 var emscripten_glDeleteTextures = env.emscripten_glDeleteTextures;
 var emscripten_glDepthFunc = env.emscripten_glDepthFunc;
 var emscripten_glDepthMask = env.emscripten_glDepthMask;
 var emscripten_glDepthRangef = env.emscripten_glDepthRangef;
 var emscripten_glDetachShader = env.emscripten_glDetachShader;
 var emscripten_glDisable = env.emscripten_glDisable;
 var emscripten_glDisableVertexAttribArray = env.emscripten_glDisableVertexAttribArray;
 var emscripten_glDrawArrays = env.emscripten_glDrawArrays;
 var emscripten_glDrawElements = env.emscripten_glDrawElements;
 var emscripten_glEnable = env.emscripten_glEnable;
 var emscripten_glEnableVertexAttribArray = env.emscripten_glEnableVertexAttribArray;
 var emscripten_glFinish = env.emscripten_glFinish;
 var emscripten_glFlush = env.emscripten_glFlush;
 var emscripten_glFramebufferRenderbuffer = env.emscripten_glFramebufferRenderbuffer;
 var emscripten_glFramebufferTexture2D = env.emscripten_glFramebufferTexture2D;
 var emscripten_glFrontFace = env.emscripten_glFrontFace;
 var emscripten_glGenBuffers = env.emscripten_glGenBuffers;
 var emscripten_glGenerateMipmap = env.emscripten_glGenerateMipmap;
 var emscripten_glGenFramebuffers = env.emscripten_glGenFramebuffers;
 var emscripten_glGenRenderbuffers = env.emscripten_glGenRenderbuffers;
 var emscripten_glGenTextures = env.emscripten_glGenTextures;
 var emscripten_glGetActiveAttrib = env.emscripten_glGetActiveAttrib;
 var emscripten_glGetActiveUniform = env.emscripten_glGetActiveUniform;
 var emscripten_glGetAttachedShaders = env.emscripten_glGetAttachedShaders;
 var emscripten_glGetAttribLocation = env.emscripten_glGetAttribLocation;
 var emscripten_glGetBooleanv = env.emscripten_glGetBooleanv;
 var emscripten_glGetBufferParameteriv = env.emscripten_glGetBufferParameteriv;
 var emscripten_glGetError = env.emscripten_glGetError;
 var emscripten_glGetFloatv = env.emscripten_glGetFloatv;
 var emscripten_glGetFramebufferAttachmentParameteriv = env.emscripten_glGetFramebufferAttachmentParameteriv;
 var emscripten_glGetIntegerv = env.emscripten_glGetIntegerv;
 var emscripten_glGetProgramiv = env.emscripten_glGetProgramiv;
 var emscripten_glGetProgramInfoLog = env.emscripten_glGetProgramInfoLog;
 var emscripten_glGetRenderbufferParameteriv = env.emscripten_glGetRenderbufferParameteriv;
 var emscripten_glGetShaderiv = env.emscripten_glGetShaderiv;
 var emscripten_glGetShaderInfoLog = env.emscripten_glGetShaderInfoLog;
 var emscripten_glGetShaderPrecisionFormat = env.emscripten_glGetShaderPrecisionFormat;
 var emscripten_glGetShaderSource = env.emscripten_glGetShaderSource;
 var emscripten_glGetString = env.emscripten_glGetString;
 var emscripten_glGetTexParameterfv = env.emscripten_glGetTexParameterfv;
 var emscripten_glGetTexParameteriv = env.emscripten_glGetTexParameteriv;
 var emscripten_glGetUniformfv = env.emscripten_glGetUniformfv;
 var emscripten_glGetUniformiv = env.emscripten_glGetUniformiv;
 var emscripten_glGetUniformLocation = env.emscripten_glGetUniformLocation;
 var emscripten_glGetVertexAttribfv = env.emscripten_glGetVertexAttribfv;
 var emscripten_glGetVertexAttribiv = env.emscripten_glGetVertexAttribiv;
 var emscripten_glGetVertexAttribPointerv = env.emscripten_glGetVertexAttribPointerv;
 var emscripten_glHint = env.emscripten_glHint;
 var emscripten_glIsBuffer = env.emscripten_glIsBuffer;
 var emscripten_glIsEnabled = env.emscripten_glIsEnabled;
 var emscripten_glIsFramebuffer = env.emscripten_glIsFramebuffer;
 var emscripten_glIsProgram = env.emscripten_glIsProgram;
 var emscripten_glIsRenderbuffer = env.emscripten_glIsRenderbuffer;
 var emscripten_glIsShader = env.emscripten_glIsShader;
 var emscripten_glIsTexture = env.emscripten_glIsTexture;
 var emscripten_glLineWidth = env.emscripten_glLineWidth;
 var emscripten_glLinkProgram = env.emscripten_glLinkProgram;
 var emscripten_glPixelStorei = env.emscripten_glPixelStorei;
 var emscripten_glPolygonOffset = env.emscripten_glPolygonOffset;
 var emscripten_glReadPixels = env.emscripten_glReadPixels;
 var emscripten_glReleaseShaderCompiler = env.emscripten_glReleaseShaderCompiler;
 var emscripten_glRenderbufferStorage = env.emscripten_glRenderbufferStorage;
 var emscripten_glSampleCoverage = env.emscripten_glSampleCoverage;
 var emscripten_glScissor = env.emscripten_glScissor;
 var emscripten_glShaderBinary = env.emscripten_glShaderBinary;
 var emscripten_glShaderSource = env.emscripten_glShaderSource;
 var emscripten_glStencilFunc = env.emscripten_glStencilFunc;
 var emscripten_glStencilFuncSeparate = env.emscripten_glStencilFuncSeparate;
 var emscripten_glStencilMask = env.emscripten_glStencilMask;
 var emscripten_glStencilMaskSeparate = env.emscripten_glStencilMaskSeparate;
 var emscripten_glStencilOp = env.emscripten_glStencilOp;
 var emscripten_glStencilOpSeparate = env.emscripten_glStencilOpSeparate;
 var emscripten_glTexImage2D = env.emscripten_glTexImage2D;
 var emscripten_glTexParameterf = env.emscripten_glTexParameterf;
 var emscripten_glTexParameterfv = env.emscripten_glTexParameterfv;
 var emscripten_glTexParameteri = env.emscripten_glTexParameteri;
 var emscripten_glTexParameteriv = env.emscripten_glTexParameteriv;
 var emscripten_glTexSubImage2D = env.emscripten_glTexSubImage2D;
 var emscripten_glUniform1f = env.emscripten_glUniform1f;
 var emscripten_glUniform1fv = env.emscripten_glUniform1fv;
 var emscripten_glUniform1i = env.emscripten_glUniform1i;
 var emscripten_glUniform1iv = env.emscripten_glUniform1iv;
 var emscripten_glUniform2f = env.emscripten_glUniform2f;
 var emscripten_glUniform2fv = env.emscripten_glUniform2fv;
 var emscripten_glUniform2i = env.emscripten_glUniform2i;
 var emscripten_glUniform2iv = env.emscripten_glUniform2iv;
 var emscripten_glUniform3f = env.emscripten_glUniform3f;
 var emscripten_glUniform3fv = env.emscripten_glUniform3fv;
 var emscripten_glUniform3i = env.emscripten_glUniform3i;
 var emscripten_glUniform3iv = env.emscripten_glUniform3iv;
 var emscripten_glUniform4f = env.emscripten_glUniform4f;
 var emscripten_glUniform4fv = env.emscripten_glUniform4fv;
 var emscripten_glUniform4i = env.emscripten_glUniform4i;
 var emscripten_glUniform4iv = env.emscripten_glUniform4iv;
 var emscripten_glUniformMatrix2fv = env.emscripten_glUniformMatrix2fv;
 var emscripten_glUniformMatrix3fv = env.emscripten_glUniformMatrix3fv;
 var emscripten_glUniformMatrix4fv = env.emscripten_glUniformMatrix4fv;
 var emscripten_glUseProgram = env.emscripten_glUseProgram;
 var emscripten_glValidateProgram = env.emscripten_glValidateProgram;
 var emscripten_glVertexAttrib1f = env.emscripten_glVertexAttrib1f;
 var emscripten_glVertexAttrib1fv = env.emscripten_glVertexAttrib1fv;
 var emscripten_glVertexAttrib2f = env.emscripten_glVertexAttrib2f;
 var emscripten_glVertexAttrib2fv = env.emscripten_glVertexAttrib2fv;
 var emscripten_glVertexAttrib3f = env.emscripten_glVertexAttrib3f;
 var emscripten_glVertexAttrib3fv = env.emscripten_glVertexAttrib3fv;
 var emscripten_glVertexAttrib4f = env.emscripten_glVertexAttrib4f;
 var emscripten_glVertexAttrib4fv = env.emscripten_glVertexAttrib4fv;
 var emscripten_glVertexAttribPointer = env.emscripten_glVertexAttribPointer;
 var emscripten_glViewport = env.emscripten_glViewport;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var emscripten_date_now = env.emscripten_date_now;
 var _emscripten_get_now_is_monotonic = env._emscripten_get_now_is_monotonic;
 var emscripten_get_now = env.emscripten_get_now;
 var __syscall_openat = env.__syscall_openat;
 var __syscall_fcntl64 = env.__syscall_fcntl64;
 var __syscall_ioctl = env.__syscall_ioctl;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var __syscall_getcwd = env.__syscall_getcwd;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var abort = env.abort;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var __stack_pointer = 65536;
 var __stack_end = 0;
 var __stack_base = 0;
 var tempRet0 = 0;
 var global$4 = 86852;
 var global$5 = 86889;
 var global$6 = 86852;
 var global$7 = 86927;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
  _GLOBAL__sub_I_screens_cpp();
  _GLOBAL__sub_I_bind_cpp();
  init_pthread_self();
 }
 
 function PaintLayer_28Layer_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 40 | 0) >> 2] = (HEAP32[($3 + 44 | 0) >> 2] | 0) + 20 | 0;
  HEAP32[($3 + 36 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____begin_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 32 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____end_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Section_20const___28std____2____wrap_iter_Section_20const___20const__2c_20std____2____wrap_iter_Section_20const___20const__29($3 + 36 | 0 | 0, $3 + 32 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3 + 28 | 0) >> 2] = std____2____wrap_iter_Section_20const____operator__5babi_v15007_5d_28_29_20const($3 + 36 | 0 | 0) | 0;
    PaintSection_28Section_20const__2c_20Rectangle_20const__29(HEAP32[($3 + 28 | 0) >> 2] | 0 | 0, HEAP32[($3 + 44 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Section_20const____operator___5babi_v15007_5d_28_29($3 + 36 | 0 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($3 + 24 | 0) >> 2] = (HEAP32[($3 + 44 | 0) >> 2] | 0) + 32 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____begin_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 16 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____end_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Divider_20const___28std____2____wrap_iter_Divider_20const___20const__2c_20std____2____wrap_iter_Divider_20const___20const__29($3 + 20 | 0 | 0, $3 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3 + 12 | 0) >> 2] = std____2____wrap_iter_Divider_20const____operator__5babi_v15007_5d_28_29_20const($3 + 20 | 0 | 0) | 0;
    PaintDivider_28Divider_20const__2c_20std____2__vector_Section_2c_20std____2__allocator_Section___20const__2c_20Rectangle_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($3 + 44 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($3 + 44 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Divider_20const____operator___5babi_v15007_5d_28_29($3 + 20 | 0 | 0) | 0;
    continue label$4;
   };
  }
  __stack_pointer = $3 + 48 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____begin_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Section_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____end_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Section_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Section_20const___28std____2____wrap_iter_Section_20const___20const__2c_20std____2____wrap_iter_Section_20const___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Section_20const___28std____2____wrap_iter_Section_20const___20const__2c_20std____2____wrap_iter_Section_20const___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Section_20const____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function PaintSection_28Section_20const__2c_20Rectangle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $56 = 0, $10 = 0, $21 = 0, $58 = 0, $62 = 0, $64 = 0, $130 = 0, $134 = 0, $158 = 0, $162 = 0, $53 = 0, $229 = 0, $239 = 0, $248 = 0, $258 = 0, $274 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 140 | 0) >> 2] = $0;
  HEAP32[($4 + 136 | 0) >> 2] = $1;
  RelToAbs_28Rectangle_20const__2c_20Rectangle_20const__29($4 + 120 | 0 | 0, HEAP32[($4 + 140 | 0) >> 2] | 0 | 0, HEAP32[($4 + 136 | 0) >> 2] | 0 | 0);
  $10 = 8;
  i64toi32_i32$2 = ($4 + 120 | 0) + $10 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $130 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 104 | 0) + $10 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $130;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[($4 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 124 | 0) >> 2] | 0;
  $134 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 104 | 0) >> 2] = $134;
  HEAP32[($4 + 108 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4 + 100 | 0) >> 0] = 130;
  HEAP8[($4 + 101 | 0) >> 0] = 130;
  HEAP8[($4 + 102 | 0) >> 0] = 130;
  HEAP8[($4 + 103 | 0) >> 0] = 255;
  $21 = 8;
  i64toi32_i32$2 = ($4 + 104 | 0) + $21 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $158 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 16 | 0) + $21 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $158;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[($4 + 104 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4 + 108 | 0) >> 2] | 0;
  $162 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 16 | 0) >> 2] = $162;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 12 | 0) >> 2] = HEAPU8[($4 + 100 | 0) >> 0] | 0 | ((HEAPU8[($4 + 101 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 102 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 103 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawRectangleRec($4 + 16 | 0 | 0, $4 + 12 | 0 | 0);
  HEAP32[($4 + 96 | 0) >> 2] = (HEAP32[($4 + 140 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[($4 + 92 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____begin_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 88 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____end_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 96 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Button_20const___28std____2____wrap_iter_Button_20const___20const__2c_20std____2____wrap_iter_Button_20const___20const__29($4 + 92 | 0 | 0, $4 + 88 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4 + 84 | 0) >> 2] = std____2____wrap_iter_Button_20const____operator__5babi_v15007_5d_28_29_20const($4 + 92 | 0 | 0) | 0;
    $53 = HEAP32[($4 + 84 | 0) >> 2] | 0;
    $56 = $4 + 32 | 0;
    i64toi32_i32$2 = HEAP32[($4 + 140 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $229 = i64toi32_i32$0;
    i64toi32_i32$0 = $56;
    HEAP32[i64toi32_i32$0 >> 2] = $229;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $58 = 8;
    i64toi32_i32$2 = i64toi32_i32$2 + $58 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $239 = i64toi32_i32$1;
    i64toi32_i32$1 = $56 + $58 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $239;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $62 = $56 + 16 | 0;
    i64toi32_i32$2 = HEAP32[($4 + 136 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $248 = i64toi32_i32$0;
    i64toi32_i32$0 = $62;
    HEAP32[i64toi32_i32$0 >> 2] = $248;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $64 = 8;
    i64toi32_i32$2 = i64toi32_i32$2 + $64 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $258 = i64toi32_i32$1;
    i64toi32_i32$1 = $62 + $64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $258;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 64 | 0) >> 2] = $4 + 32 | 0;
    HEAP32[($4 + 68 | 0) >> 2] = 2;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 68 | 0) >> 2] | 0;
    $274 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[$4 >> 2] = $274;
    HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$1;
    std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____vector_5babi_v15007_5d_28std__initializer_list_Rectangle__29($4 + 72 | 0 | 0, $4 | 0) | 0;
    PaintButton_28Button_20const__2c_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle___20const__29($53 | 0, $4 + 72 | 0 | 0);
    std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____vector_5babi_v15007_5d_28_29($4 + 72 | 0 | 0) | 0;
    std____2____wrap_iter_Button_20const____operator___5babi_v15007_5d_28_29($4 + 92 | 0 | 0) | 0;
    continue label$2;
   };
  }
  __stack_pointer = $4 + 144 | 0;
  return;
 }
 
 function std____2____wrap_iter_Section_20const____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 28 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____begin_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Divider_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____end_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Divider_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Divider_20const___28std____2____wrap_iter_Divider_20const___20const__2c_20std____2____wrap_iter_Divider_20const___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Divider_20const___28std____2____wrap_iter_Divider_20const___20const__2c_20std____2____wrap_iter_Divider_20const___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Divider_20const____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function PaintDivider_28Divider_20const__2c_20std____2__vector_Section_2c_20std____2__allocator_Section___20const__2c_20Rectangle_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $16 = 0, $80 = 0, $84 = 0;
  $5 = __stack_pointer - 64 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 60 | 0) >> 2] = $0;
  HEAP32[($5 + 56 | 0) >> 2] = $1;
  HEAP32[($5 + 52 | 0) >> 2] = $2;
  GetDividerRec_28Divider_20const__2c_20std____2__vector_Section_2c_20std____2__allocator_Section___20const__2c_20Rectangle_20const__29($5 + 36 | 0 | 0, HEAP32[($5 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5 + 56 | 0) >> 2] | 0 | 0, HEAP32[($5 + 52 | 0) >> 2] | 0 | 0);
  HEAP8[($5 + 32 | 0) >> 0] = 0;
  HEAP8[($5 + 33 | 0) >> 0] = 0;
  HEAP8[($5 + 34 | 0) >> 0] = 0;
  HEAP8[($5 + 35 | 0) >> 0] = 255;
  $16 = 8;
  i64toi32_i32$2 = ($5 + 36 | 0) + $16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5 + 16 | 0) + $16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $80;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 36 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 40 | 0) >> 2] | 0;
  $84 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 16 | 0) >> 2] = $84;
  HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5 + 12 | 0) >> 2] = HEAPU8[($5 + 32 | 0) >> 0] | 0 | ((HEAPU8[($5 + 33 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5 + 34 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5 + 35 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawRectangleRec($5 + 16 | 0 | 0, $5 + 12 | 0 | 0);
  __stack_pointer = $5 + 64 | 0;
  return;
 }
 
 function std____2____wrap_iter_Divider_20const____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 40 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Section_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Section_20const___28std____2____wrap_iter_Section_20const___20const__2c_20std____2____wrap_iter_Section_20const___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Section_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Section_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function RelToAbs_28Rectangle_20const__2c_20Rectangle_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2])) + Math_fround(HEAPF32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2]));
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2]));
  HEAPF32[($0 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2]));
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2]));
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____begin_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Button_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____end_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Button_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button_20const__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Button_20const___28std____2____wrap_iter_Button_20const___20const__2c_20std____2____wrap_iter_Button_20const___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Button_20const___28std____2____wrap_iter_Button_20const___20const__2c_20std____2____wrap_iter_Button_20const___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Button_20const____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____vector_5babi_v15007_5d_28std__initializer_list_Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $41 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = 0;
  std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($5 + 8 | 0 | 0, $4 + 20 | 0 | 0, $4 + 19 | 0 | 0) | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector____destroy_vector_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($4 + 4 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_29($4 + 8 | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($5 | 0);
  label$1 : {
   if (!((std__initializer_list_Rectangle___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, std__initializer_list_Rectangle___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_Rectangle_20const____value_2c_20void___type_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______construct_at_end_Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__2c_20unsigned_20long_29($5 | 0, std__initializer_list_Rectangle___begin_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0, std__initializer_list_Rectangle___end_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0, std__initializer_list_Rectangle___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0);
  }
  std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 8 | 0 | 0);
  std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 8 | 0 | 0) | 0;
  $41 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $41 | 0;
 }
 
 function PaintButton_28Button_20const__2c_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5 = 0, $6 = 0, $29 = 0, $40 = 0, $42 = 0, $53 = 0, $65 = 0, $76 = 0, $88 = 0, $99 = 0, $152 = 0, $156 = 0, $208 = 0, $212 = 0, $243 = 0, $247 = 0, $271 = 0, $275 = 0, $303 = 0, $307 = 0, $331 = 0, $335 = 0, $363 = 0, $367 = 0, $391 = 0, $395 = 0;
  $4 = __stack_pointer - 192 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 188 | 0) >> 2] = $0;
  HEAP32[($4 + 184 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 188 | 0) >> 2] | 0;
  $6 = 8;
  i64toi32_i32$2 = $5 + $6 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $152 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 168 | 0) + $6 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $152;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 168 | 0) >> 2] = $156;
  HEAP32[($4 + 172 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 164 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 164 | 0) >> 2] | 0) >>> 0 < (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____size_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 184 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    RelToAbs_28Rectangle_20const__2c_20Rectangle_20const__29($4 + 148 | 0 | 0, $4 + 168 | 0 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($4 + 184 | 0) >> 2] | 0 | 0, HEAP32[($4 + 164 | 0) >> 2] | 0 | 0) | 0 | 0);
    $29 = 8;
    i64toi32_i32$2 = ($4 + 148 | 0) + $29 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $208 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4 + 168 | 0) + $29 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $208;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[($4 + 148 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 152 | 0) >> 2] | 0;
    $212 = i64toi32_i32$1;
    i64toi32_i32$1 = $4;
    HEAP32[($4 + 168 | 0) >> 2] = $212;
    HEAP32[($4 + 172 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 164 | 0) >> 2] = (HEAP32[($4 + 164 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $40 = HEAP32[((HEAP32[($4 + 188 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    switch ($40 | 0) {
    case 0:
     $42 = 8;
     i64toi32_i32$2 = ($4 + 168 | 0) + $42 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $243 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4 + 128 | 0) + $42 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $243;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[($4 + 168 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 172 | 0) >> 2] | 0;
     $247 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[($4 + 128 | 0) >> 2] = $247;
     HEAP32[($4 + 132 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($4 + 124 | 0) >> 0] = 0;
     HEAP8[($4 + 125 | 0) >> 0] = 158;
     HEAP8[($4 + 126 | 0) >> 0] = 47;
     HEAP8[($4 + 127 | 0) >> 0] = 255;
     $53 = 8;
     i64toi32_i32$2 = ($4 + 128 | 0) + $53 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $271 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4 + 8 | 0) + $53 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $271;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[($4 + 128 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 132 | 0) >> 2] | 0;
     $275 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[($4 + 8 | 0) >> 2] = $275;
     HEAP32[($4 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4 + 4 | 0) >> 2] = HEAPU8[($4 + 124 | 0) >> 0] | 0 | ((HEAPU8[($4 + 125 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 126 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 127 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     DrawRectangleRec($4 + 8 | 0 | 0, $4 + 4 | 0 | 0);
     break label$3;
    case 2:
     $65 = 8;
     i64toi32_i32$2 = ($4 + 168 | 0) + $65 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $303 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4 + 104 | 0) + $65 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $303;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[($4 + 168 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 172 | 0) >> 2] | 0;
     $307 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[($4 + 104 | 0) >> 2] = $307;
     HEAP32[($4 + 108 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($4 + 100 | 0) >> 0] = 255;
     HEAP8[($4 + 101 | 0) >> 0] = 203;
     HEAP8[($4 + 102 | 0) >> 0] = 0;
     HEAP8[($4 + 103 | 0) >> 0] = 255;
     $76 = 8;
     i64toi32_i32$2 = ($4 + 104 | 0) + $76 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $331 = i64toi32_i32$0;
     i64toi32_i32$0 = ($4 + 32 | 0) + $76 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $331;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4;
     i64toi32_i32$1 = HEAP32[($4 + 104 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($4 + 108 | 0) >> 2] | 0;
     $335 = i64toi32_i32$1;
     i64toi32_i32$1 = $4;
     HEAP32[($4 + 32 | 0) >> 2] = $335;
     HEAP32[($4 + 36 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4 + 28 | 0) >> 2] = HEAPU8[($4 + 100 | 0) >> 0] | 0 | ((HEAPU8[($4 + 101 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 102 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 103 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
     DrawRectangleRec($4 + 32 | 0 | 0, $4 + 28 | 0 | 0);
     break label$3;
    case 1:
     break label$4;
    default:
     break label$3;
    };
   }
   $88 = 8;
   i64toi32_i32$2 = ($4 + 168 | 0) + $88 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $363 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4 + 80 | 0) + $88 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $363;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[($4 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 172 | 0) >> 2] | 0;
   $367 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 80 | 0) >> 2] = $367;
   HEAP32[($4 + 84 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($4 + 76 | 0) >> 0] = 80;
   HEAP8[($4 + 77 | 0) >> 0] = 80;
   HEAP8[($4 + 78 | 0) >> 0] = 80;
   HEAP8[($4 + 79 | 0) >> 0] = 255;
   $99 = 8;
   i64toi32_i32$2 = ($4 + 80 | 0) + $99 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $391 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4 + 56 | 0) + $99 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $391;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[($4 + 80 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4 + 84 | 0) >> 2] | 0;
   $395 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   HEAP32[($4 + 56 | 0) >> 2] = $395;
   HEAP32[($4 + 60 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 52 | 0) >> 2] = HEAPU8[($4 + 76 | 0) >> 0] | 0 | ((HEAPU8[($4 + 77 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4 + 78 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4 + 79 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   DrawRectangleRec($4 + 56 | 0 | 0, $4 + 52 | 0 | 0);
  }
  __stack_pointer = $4 + 192 | 0;
  return;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector____destroy_vector_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Button_20const____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 24 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Divider_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Divider_20const___28std____2____wrap_iter_Divider_20const___20const__2c_20std____2____wrap_iter_Divider_20const___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Divider_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Divider_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function GetDividerRec_28Divider_20const__2c_20std____2__vector_Section_2c_20std____2__allocator_Section___20const__2c_20Rectangle_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $124 = Math_fround(0), $128 = Math_fround(0), $71 = 0, $98 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $1;
  HEAP32[($6 + 40 | 0) >> 2] = $2;
  HEAP32[($6 + 36 | 0) >> 2] = $3;
  HEAPF32[($6 + 32 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6 + 28 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($6 + 24 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(0 | 0);
  HEAP32[($6 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 16 | 0) >> 2] | 0) >>> 0 < (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAPF32[($6 + 32 | 0) >> 2] = Math_fround(HEAPF32[(float_20const__20std____2__min_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 4 | 0 | 0, $6 + 32 | 0 | 0) | 0) >> 2]);
    $124 = Math_fround(HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2]);
    HEAPF32[($6 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 28 | 0) >> 2]) + $124);
    HEAPF32[($6 + 24 | 0) >> 2] = Math_fround(HEAPF32[(float_20const__20std____2__min_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29(std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0 | 0, $6 + 24 | 0 | 0) | 0) >> 2]);
    $128 = Math_fround(HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2]);
    HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 20 | 0) >> 2]) + $128);
    HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$3 : {
   label$4 : {
    if (!((HEAPU8[(HEAP32[($6 + 44 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0)) {
     break label$4
    }
    $71 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + 32 | 0;
    HEAPF32[($6 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 44 | 0) >> 2] | 0) + 28 | 0) >> 2]));
    HEAPF32[($0 + 8 | 0) >> 2] = Math_fround(HEAPF32[(float_20const__20std____2__max_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29($71 | 0, $6 + 12 | 0 | 0) | 0) >> 2]);
    HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 28 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2]));
    HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 32 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2]));
    HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 16 | 0 | 0, 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2])) + Math_fround(HEAPF32[(HEAP32[($6 + 36 | 0) >> 2] | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($0 + 8 | 0) >> 2]) / Math_fround(2.0)));
    break label$3;
   }
   label$5 : {
    if (!((HEAPU8[((HEAP32[($6 + 44 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 1 | 0)) {
     break label$5
    }
    HEAPF32[($0 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 20 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2]));
    $98 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + 32 | 0;
    HEAPF32[($6 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 44 | 0) >> 2] | 0) + 28 | 0) >> 2]));
    HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(HEAPF32[(float_20const__20std____2__max_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29($98 | 0, $6 + 8 | 0 | 0) | 0) >> 2]);
    HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 24 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2])) + Math_fround(HEAPF32[(HEAP32[($6 + 36 | 0) >> 2] | 0) >> 2]));
    HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const((HEAP32[($6 + 44 | 0) >> 2] | 0) + 16 | 0 | 0, 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]) * Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2])) + Math_fround(HEAPF32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($0 + 12 | 0) >> 2]) / Math_fround(2.0)));
   }
  }
  __stack_pointer = $6 + 48 | 0;
  return;
 }
 
 function std____2____wrap_iter_Button_20const______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Button_20const___28std____2____wrap_iter_Button_20const___20const__2c_20std____2____wrap_iter_Button_20const___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Button_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Button_20const____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 4 | 0 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 4 | 0) | 0 | 0;
 }
 
 function std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector____destroy_vector_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_29($0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std__initializer_list_Rectangle___size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______vallocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Rectangle____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Rectangle___28std____2__allocator_Rectangle___2c_20unsigned_20long_29($4 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  $22 = (HEAP32[$5 >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 4 | 0) | 0;
  HEAP32[(std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $22;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std__initializer_list_Rectangle___begin_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std__initializer_list_Rectangle___end_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return (HEAP32[$4 >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 4 | 0) | 0 | 0;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_Rectangle_20const____value_2c_20void___type_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______construct_at_end_Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____ConstructTransaction___ConstructTransaction_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = Rectangle__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Rectangle__2c_20Rectangle_2c_20Rectangle_2c_20_28void__290__28std____2__allocator_Rectangle___2c_20Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29(std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_____complete_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector______transaction_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($4 | 0);
  }
  $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_Rectangle____deallocate_5babi_v15007_5d_28std____2__allocator_Rectangle___2c_20Rectangle__2c_20unsigned_20long_29(std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 28) | 0 | 0;
 }
 
 function float_20const__20std____2__min_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = float_20const__20std____2__min_5babi_v15007_5d_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function float_20const__20std____2__max_5babi_v15007_5d_float__28float_20const__2c_20float_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = float_20const__20std____2__max_5babi_v15007_5d_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function float_20const__20std____2__min_5babi_v15007_5d_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_float_2c_20float___operator_28_29_5babi_v15007_5d_28float_20const__2c_20float_20const__29_20const($4 + 15 | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function float_20const__20std____2__max_5babi_v15007_5d_float_2c_20std____2____less_float_2c_20float___28float_20const__2c_20float_20const__2c_20std____2____less_float_2c_20float__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_float_2c_20float___operator_28_29_5babi_v15007_5d_28float_20const__2c_20float_20const__29_20const($4 + 15 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function UpdateLayer_28Layer__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 40 | 0) >> 2] = (HEAP32[($3 + 44 | 0) >> 2] | 0) + 32 | 0;
  HEAP32[($3 + 36 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____begin_5babi_v15007_5d_28_29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 32 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____end_5babi_v15007_5d_28_29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Divider___28std____2____wrap_iter_Divider___20const__2c_20std____2____wrap_iter_Divider___20const__29($3 + 36 | 0 | 0, $3 + 32 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3 + 28 | 0) >> 2] = std____2____wrap_iter_Divider____operator__5babi_v15007_5d_28_29_20const($3 + 36 | 0 | 0) | 0;
    UpdateDivider_28Divider__2c_20std____2__vector_Section_2c_20std____2__allocator_Section____2c_20Rectangle__29(HEAP32[($3 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($3 + 44 | 0) >> 2] | 0) + 20 | 0 | 0, HEAP32[($3 + 44 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Divider____operator___5babi_v15007_5d_28_29($3 + 36 | 0 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($3 + 24 | 0) >> 2] = (HEAP32[($3 + 44 | 0) >> 2] | 0) + 20 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____begin_5babi_v15007_5d_28_29(HEAP32[($3 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 16 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____end_5babi_v15007_5d_28_29(HEAP32[($3 + 24 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Section___28std____2____wrap_iter_Section___20const__2c_20std____2____wrap_iter_Section___20const__29($3 + 20 | 0 | 0, $3 + 16 | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3 + 12 | 0) >> 2] = std____2____wrap_iter_Section____operator__5babi_v15007_5d_28_29_20const($3 + 20 | 0 | 0) | 0;
    UpdateSection_28Section__2c_20Rectangle_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3 + 44 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Section____operator___5babi_v15007_5d_28_29($3 + 20 | 0 | 0) | 0;
    continue label$4;
   };
  }
  __stack_pointer = $3 + 48 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____begin_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Divider______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____end_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Divider______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Divider___28std____2____wrap_iter_Divider___20const__2c_20std____2____wrap_iter_Divider___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Divider___28std____2____wrap_iter_Divider___20const__2c_20std____2____wrap_iter_Divider___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Divider____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function UpdateDivider_28Divider__2c_20std____2__vector_Section_2c_20std____2__allocator_Section____2c_20Rectangle__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $15 = 0, $22 = 0, $108 = 0, $182 = 0, $265 = 0, $281 = 0, $285 = 0, $289 = 0, $302 = 0, $306 = 0, $211 = Math_fround(0), $214 = Math_fround(0), $217 = Math_fround(0), $225 = Math_fround(0), $228 = Math_fround(0), $231 = Math_fround(0);
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 108 | 0) >> 2] = $0;
  HEAP32[($5 + 104 | 0) >> 2] = $1;
  HEAP32[($5 + 100 | 0) >> 2] = $2;
  GetDividerRec_28Divider_20const__2c_20std____2__vector_Section_2c_20std____2__allocator_Section___20const__2c_20Rectangle_20const__29($5 + 84 | 0 | 0, HEAP32[($5 + 108 | 0) >> 2] | 0 | 0, HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[($5 + 100 | 0) >> 2] | 0 | 0);
  GetMousePosition($5 + 76 | 0 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 76 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 80 | 0) >> 2] | 0;
  $265 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 64 | 0) >> 2] = $265;
  HEAP32[($5 + 68 | 0) >> 2] = i64toi32_i32$1;
  $15 = 8;
  i64toi32_i32$2 = ($5 + 84 | 0) + $15 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $281 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5 + 48 | 0) + $15 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $281;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 84 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 88 | 0) >> 2] | 0;
  $285 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 48 | 0) >> 2] = $285;
  HEAP32[($5 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 68 | 0) >> 2] | 0;
  $289 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 16 | 0) >> 2] = $289;
  HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$0;
  $22 = 8;
  i64toi32_i32$2 = ($5 + 48 | 0) + $22 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $302 = i64toi32_i32$0;
  i64toi32_i32$0 = $5 + $22 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $302;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 52 | 0) >> 2] | 0;
  $306 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[$5 >> 2] = $306;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (!((CheckCollisionPointRec($5 + 16 | 0 | 0, $5 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((IsMouseButtonDown(0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[((HEAP32[($5 + 108 | 0) >> 2] | 0) + 36 | 0) >> 0] = 1;
   }
  }
  label$3 : {
   if (!((HEAPU8[((HEAP32[($5 + 108 | 0) >> 2] | 0) + 36 | 0) >> 0] | 0) & 1 | 0)) {
    break label$3
   }
   label$4 : {
    label$5 : {
     if (!((IsMouseButtonDown(0 | 0) | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAPU8[(HEAP32[($5 + 108 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0)) {
       break label$6
      }
      HEAPF32[($5 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 76 | 0) >> 2]) - Math_fround(HEAPF32[(HEAP32[($5 + 100 | 0) >> 2] | 0) >> 2])) / Math_fround(HEAPF32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 8 | 0) >> 2]));
      HEAP32[($5 + 40 | 0) >> 2] = 0;
      label$7 : {
       label$8 : while (1) {
        if (!((HEAP32[($5 + 40 | 0) >> 2] | 0) >>> 0 < (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
         break label$7
        }
        $211 = Math_fround(Math_fround(HEAPF32[($5 + 44 | 0) >> 2]) - Math_fround(HEAPF32[(std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2]));
        HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5 + 40 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 8 | 0) >> 2] = $211;
        HEAP32[($5 + 40 | 0) >> 2] = (HEAP32[($5 + 40 | 0) >> 2] | 0) + 1 | 0;
        continue label$8;
       };
      }
      HEAP32[($5 + 36 | 0) >> 2] = 0;
      label$9 : {
       label$10 : while (1) {
        if (!((HEAP32[($5 + 36 | 0) >> 2] | 0) >>> 0 < (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
         break label$9
        }
        $214 = Math_fround(Math_fround(HEAPF32[($5 + 44 | 0) >> 2]) - Math_fround(HEAPF32[(std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2]));
        $108 = std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
        HEAPF32[($108 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($108 + 8 | 0) >> 2]) - $214);
        $217 = Math_fround(HEAPF32[($5 + 44 | 0) >> 2]);
        HEAPF32[(std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 36 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) >> 2] = $217;
        HEAP32[($5 + 36 | 0) >> 2] = (HEAP32[($5 + 36 | 0) >> 2] | 0) + 1 | 0;
        continue label$10;
       };
      }
     }
     label$11 : {
      if (!((HEAPU8[((HEAP32[($5 + 108 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 1 | 0)) {
       break label$11
      }
      HEAPF32[($5 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($5 + 80 | 0) >> 2]) - Math_fround(HEAPF32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 4 | 0) >> 2])) / Math_fround(HEAPF32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 12 | 0) >> 2]));
      HEAP32[($5 + 28 | 0) >> 2] = 0;
      label$12 : {
       label$13 : while (1) {
        if (!((HEAP32[($5 + 28 | 0) >> 2] | 0) >>> 0 < (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
         break label$12
        }
        $225 = Math_fround(Math_fround(HEAPF32[($5 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]));
        HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 12 | 0) >> 2] = $225;
        HEAP32[($5 + 28 | 0) >> 2] = (HEAP32[($5 + 28 | 0) >> 2] | 0) + 1 | 0;
        continue label$13;
       };
      }
      HEAP32[($5 + 24 | 0) >> 2] = 0;
      label$14 : {
       label$15 : while (1) {
        if (!((HEAP32[($5 + 24 | 0) >> 2] | 0) >>> 0 < (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
         break label$14
        }
        $228 = Math_fround(Math_fround(HEAPF32[($5 + 32 | 0) >> 2]) - Math_fround(HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2]));
        $182 = std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0;
        HEAPF32[($182 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($182 + 12 | 0) >> 2]) - $228);
        $231 = Math_fround(HEAPF32[($5 + 32 | 0) >> 2]);
        HEAPF32[((std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 104 | 0) >> 2] | 0 | 0, HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29((HEAP32[($5 + 108 | 0) >> 2] | 0) + 16 | 0 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $231;
        HEAP32[($5 + 24 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) + 1 | 0;
        continue label$15;
       };
      }
     }
     break label$4;
    }
    HEAP8[((HEAP32[($5 + 108 | 0) >> 2] | 0) + 36 | 0) >> 0] = 0;
   }
  }
  __stack_pointer = $5 + 112 | 0;
  return;
 }
 
 function std____2____wrap_iter_Divider____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 40 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____begin_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Section______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____end_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Section______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Section___28std____2____wrap_iter_Section___20const__2c_20std____2____wrap_iter_Section___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Section___28std____2____wrap_iter_Section___20const__2c_20std____2____wrap_iter_Section___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Section____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function UpdateSection_28Section__2c_20Rectangle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $31 = 0, $33 = 0, $37 = 0, $39 = 0, $28 = 0, $140 = 0, $150 = 0, $159 = 0, $169 = 0, $185 = 0, $56 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 92 | 0) >> 2] = $0;
  HEAP32[($4 + 88 | 0) >> 2] = $1;
  GetMousePosition($4 + 80 | 0 | 0);
  HEAP32[($4 + 76 | 0) >> 2] = (HEAP32[($4 + 92 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[($4 + 72 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____begin_5babi_v15007_5d_28_29(HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 68 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____end_5babi_v15007_5d_28_29(HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Button___28std____2____wrap_iter_Button___20const__2c_20std____2____wrap_iter_Button___20const__29($4 + 72 | 0 | 0, $4 + 68 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4 + 64 | 0) >> 2] = std____2____wrap_iter_Button____operator__5babi_v15007_5d_28_29_20const($4 + 72 | 0 | 0) | 0;
    $28 = HEAP32[($4 + 64 | 0) >> 2] | 0;
    $31 = $4 + 12 | 0;
    i64toi32_i32$2 = HEAP32[($4 + 92 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $140 = i64toi32_i32$0;
    i64toi32_i32$0 = $31;
    HEAP32[i64toi32_i32$0 >> 2] = $140;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $33 = 8;
    i64toi32_i32$2 = i64toi32_i32$2 + $33 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $150 = i64toi32_i32$1;
    i64toi32_i32$1 = $31 + $33 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $150;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $37 = $31 + 16 | 0;
    i64toi32_i32$2 = HEAP32[($4 + 88 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $159 = i64toi32_i32$0;
    i64toi32_i32$0 = $37;
    HEAP32[i64toi32_i32$0 >> 2] = $159;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $39 = 8;
    i64toi32_i32$2 = i64toi32_i32$2 + $39 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $169 = i64toi32_i32$1;
    i64toi32_i32$1 = $37 + $39 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $169;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4 + 44 | 0) >> 2] = $4 + 12 | 0;
    HEAP32[($4 + 48 | 0) >> 2] = 2;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 44 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 48 | 0) >> 2] | 0;
    $185 = i64toi32_i32$0;
    i64toi32_i32$0 = $4;
    HEAP32[$4 >> 2] = $185;
    HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$1;
    std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____vector_5babi_v15007_5d_28std__initializer_list_Rectangle__29($4 + 52 | 0 | 0, $4 | 0) | 0;
    $56 = CheckButton_28Vector2_20const__2c_20Button__2c_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle___20const__29($4 + 80 | 0 | 0, $28 | 0, $4 + 52 | 0 | 0) | 0;
    std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____vector_5babi_v15007_5d_28_29($4 + 52 | 0 | 0) | 0;
    label$3 : {
     if (!($56 & 1 | 0)) {
      break label$3
     }
    }
    std____2____wrap_iter_Button____operator___5babi_v15007_5d_28_29($4 + 72 | 0 | 0) | 0;
    continue label$2;
   };
  }
  __stack_pointer = $4 + 96 | 0;
  return;
 }
 
 function std____2____wrap_iter_Section____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 28 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Divider______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Divider__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Divider___28std____2____wrap_iter_Divider___20const__2c_20std____2____wrap_iter_Divider___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Divider____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Divider____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return (HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 28) | 0 | 0;
 }
 
 function std____2____wrap_iter_Section______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Section__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Section___28std____2____wrap_iter_Section___20const__2c_20std____2____wrap_iter_Section___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Section____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Section____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____begin_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Button______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____end_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Button______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Button___28std____2____wrap_iter_Button___20const__2c_20std____2____wrap_iter_Button___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Button___28std____2____wrap_iter_Button___20const__2c_20std____2____wrap_iter_Button___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Button____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function CheckButton_28Vector2_20const__2c_20Button__2c_20std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle___20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6 = 0, $7 = 0, $30 = 0, $41 = 0, $48 = 0, $122 = 0, $126 = 0, $178 = 0, $182 = 0, $195 = 0, $211 = 0, $215 = 0, $219 = 0, $235 = 0, $239 = 0, $84 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 104 | 0) >> 2] = $0;
  HEAP32[($5 + 100 | 0) >> 2] = $1;
  HEAP32[($5 + 96 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 100 | 0) >> 2] | 0;
  $7 = 8;
  i64toi32_i32$2 = $6 + $7 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $122 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5 + 80 | 0) + $7 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $122;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $126 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 80 | 0) >> 2] = $126;
  HEAP32[($5 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5 + 76 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5 + 76 | 0) >> 2] | 0) >>> 0 < (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____size_5babi_v15007_5d_28_29_20const(HEAP32[($5 + 96 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    RelToAbs_28Rectangle_20const__2c_20Rectangle_20const__29($5 + 60 | 0 | 0, $5 + 80 | 0 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____operator_5b_5d_5babi_v15007_5d_28unsigned_20long_29_20const(HEAP32[($5 + 96 | 0) >> 2] | 0 | 0, HEAP32[($5 + 76 | 0) >> 2] | 0 | 0) | 0 | 0);
    $30 = 8;
    i64toi32_i32$2 = ($5 + 60 | 0) + $30 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $178 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5 + 80 | 0) + $30 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $178;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[($5 + 60 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 64 | 0) >> 2] | 0;
    $182 = i64toi32_i32$1;
    i64toi32_i32$1 = $5;
    HEAP32[($5 + 80 | 0) >> 2] = $182;
    HEAP32[($5 + 84 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5 + 76 | 0) >> 2] = (HEAP32[($5 + 76 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  i64toi32_i32$2 = HEAP32[($5 + 104 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $195 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 48 | 0) >> 2] = $195;
  HEAP32[($5 + 52 | 0) >> 2] = i64toi32_i32$1;
  $41 = 8;
  i64toi32_i32$2 = ($5 + 80 | 0) + $41 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $211 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5 + 32 | 0) + $41 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $211;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 80 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 84 | 0) >> 2] | 0;
  $215 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 32 | 0) >> 2] = $215;
  HEAP32[($5 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 52 | 0) >> 2] | 0;
  $219 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 24 | 0) >> 2] = $219;
  HEAP32[($5 + 28 | 0) >> 2] = i64toi32_i32$0;
  $48 = 8;
  i64toi32_i32$2 = ($5 + 32 | 0) + $48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $235 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5 + 8 | 0) + $48 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $235;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 36 | 0) >> 2] | 0;
  $239 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 8 | 0) >> 2] = $239;
  HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    label$5 : {
     if (!((CheckCollisionPointRec($5 + 24 | 0 | 0, $5 + 8 | 0 | 0) | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!((IsMouseButtonDown(0 | 0) | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 16 | 0) >> 2] = 2;
       break label$6;
      }
      HEAP32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 16 | 0) >> 2] = 1;
     }
     label$8 : {
      if (!((IsMouseButtonReleased(0 | 0) | 0) & 1 | 0)) {
       break label$8
      }
      HEAP8[($5 + 111 | 0) >> 0] = 1 & 1 | 0;
      break label$3;
     }
     break label$4;
    }
    HEAP32[((HEAP32[($5 + 100 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
   }
   HEAP8[($5 + 111 | 0) >> 0] = 0 & 1 | 0;
  }
  $84 = (HEAPU8[($5 + 111 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $5 + 112 | 0;
  return $84 | 0;
 }
 
 function std____2____wrap_iter_Button____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 24 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Button______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Button__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Button___28std____2____wrap_iter_Button___20const__2c_20std____2____wrap_iter_Button___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Button____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Button____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2____wrap_iter_Section_20const____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Divider_20const____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Button_20const____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____less_float_2c_20float___operator_28_29_5babi_v15007_5d_28float_20const__2c_20float_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return Math_fround(HEAPF32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2]) < Math_fround(HEAPF32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2]) & 1 | 0 | 0;
 }
 
 function std____2____wrap_iter_Divider____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Section____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Button____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_Rectangle___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____transaction_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP8[($5 + 4 | 0) >> 0] = 0;
  return $5 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_Rectangle____max_size_5babi_v15007_5d_std____2__allocator_Rectangle__2c_20void__28std____2__allocator_Rectangle__20const__29(std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Rectangle____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Rectangle___28std____2__allocator_Rectangle___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_Rectangle___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0) << 4 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0) << 4 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 4 | 0) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____ConstructTransaction___ConstructTransaction_28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0) << 4 | 0) | 0;
  return $6 | 0;
 }
 
 function Rectangle__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Rectangle__2c_20Rectangle_2c_20Rectangle_2c_20_28void__290__28std____2__allocator_Rectangle___2c_20Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $10 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  $10 = Rectangle__20std____2__copy_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle___28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29(HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0) | 0;
  __stack_pointer = $6 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_Rectangle___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_Rectangle______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_Rectangle______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_Rectangle____max_size_5babi_v15007_5d_std____2__allocator_Rectangle__2c_20void__28std____2__allocator_Rectangle__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_Rectangle___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() {
  return std____2____libcpp_numeric_limits_long_2c_20true___max_5babi_v15007_5d_28_29() | 0 | 0;
 }
 
 function unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____throw_length_error_5babi_v15007_5d_28char_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = __cxa_allocate_exception(8 | 0) | 0;
  std__length_error__length_error_5babi_v15007_5d_28char_20const__29($5 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __cxa_throw($5 | 0, 85004 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function std____2__allocator_Rectangle___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_Rectangle____max_size_5babi_v15007_5d_std____2__allocator_Rectangle__2c_20void__28std____2__allocator_Rectangle__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29((HEAP32[($4 + 8 | 0) >> 2] | 0) << 4 | 0 | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Rectangle__20std____2____to_address_5babi_v15007_5d_Rectangle__28Rectangle__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 4 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v15007_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($4 + 15 | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__allocator_Rectangle___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 268435455 | 0;
 }
 
 function std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____libcpp_numeric_limits_long_2c_20true___max_5babi_v15007_5d_28_29() {
  return 2147483647 | 0;
 }
 
 function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v15007_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return (HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std__length_error__length_error_5babi_v15007_5d_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std__logic_error__logic_error_28char_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5 >> 2] = 84964 + 8 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____throw_bad_array_new_length_5babi_v15007_5d_28_29() {
  var $1 = 0;
  $1 = __cxa_allocate_exception(4 | 0) | 0;
  std__bad_array_new_length__bad_array_new_length_28_29($1 | 0) | 0;
  __cxa_throw($1 | 0, 84904 | 0, 2 | 0);
  wasm2js_trap();
 }
 
 function std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $15 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____is_overaligned_for_new_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$4 >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
    HEAP32[($4 + 12 | 0) >> 2] = void__20std____2____libcpp_operator_new_5babi_v15007_5d_unsigned_20long_2c_20std__align_val_t__28unsigned_20long_2c_20std__align_val_t_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($4 + 12 | 0) >> 2] = void__20std____2____libcpp_operator_new_5babi_v15007_5d_unsigned_20long__28unsigned_20long_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  $15 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____is_overaligned_for_new_5babi_v15007_5d_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return (HEAP32[($3 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function void__20std____2____libcpp_operator_new_5babi_v15007_5d_unsigned_20long_2c_20std__align_val_t__28unsigned_20long_2c_20std__align_val_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = operator_20new_28unsigned_20long_2c_20std__align_val_t_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function void__20std____2____libcpp_operator_new_5babi_v15007_5d_unsigned_20long__28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = operator_20new_28unsigned_20long_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Rectangle__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function Rectangle__20std____2____to_address_5babi_v15007_5d_Rectangle__28Rectangle__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Rectangle__2c_20std____2__allocator_Rectangle____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_Rectangle__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function Rectangle__20std____2__copy_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle___28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $12 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  std____2__pair_Rectangle_20const__2c_20Rectangle___20std____2____copy_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__2c_200__28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($5 + 12 | 0 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
  $12 = HEAP32[($5 + 16 | 0) >> 2] | 0;
  __stack_pointer = $5 + 32 | 0;
  return $12 | 0;
 }
 
 function std____2__pair_Rectangle_20const__2c_20Rectangle___20std____2____copy_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__2c_200__28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $1;
  HEAP32[($6 + 40 | 0) >> 2] = $2;
  HEAP32[($6 + 36 | 0) >> 2] = $3;
  std____2__pair_Rectangle_20const__2c_20Rectangle_20const___20std____2____unwrap_range_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__29($6 + 28 | 0 | 0, HEAP32[($6 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6 + 40 | 0) >> 2] | 0 | 0);
  std____2__pair_Rectangle_20const__2c_20Rectangle___20std____2____copy_impl_5babi_v15007_5d_Rectangle_20const_2c_20Rectangle_2c_20void__28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($6 + 20 | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 32 | 0) >> 2] | 0 | 0, decltype_28std____2____unwrap_iter_impl_Rectangle__2c_20true_____unwrap_28std__declval_Rectangle___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Rectangle__2c_20std____2____unwrap_iter_impl_Rectangle__2c_20true__2c_200__28Rectangle__29(HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($6 + 16 | 0) >> 2] = Rectangle_20const__20std____2____rewrap_range_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__29(HEAP32[($6 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 12 | 0) >> 2] = Rectangle__20std____2____rewrap_iter_5babi_v15007_5d_Rectangle__2c_20Rectangle__2c_20std____2____unwrap_iter_impl_Rectangle__2c_20true___28Rectangle__2c_20Rectangle__29(HEAP32[($6 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_Rectangle_20const____type_2c_20std____2____unwrap_ref_decay_Rectangle____type__20std____2__make_pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle___28Rectangle_20const____2c_20Rectangle____29($0 | 0, $6 + 16 | 0 | 0, $6 + 12 | 0 | 0);
  __stack_pointer = $6 + 48 | 0;
  return;
 }
 
 function std____2__pair_Rectangle_20const__2c_20Rectangle_20const___20std____2____unwrap_range_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[($5 + 4 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____unwrap_28std__declval_Rectangle_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Rectangle_20const__2c_20std____2____unwrap_iter_impl_Rectangle_20const__2c_20true__2c_200__28Rectangle_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5 >> 2] = decltype_28std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____unwrap_28std__declval_Rectangle_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Rectangle_20const__2c_20std____2____unwrap_iter_impl_Rectangle_20const__2c_20true__2c_200__28Rectangle_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_Rectangle_20const____type_2c_20std____2____unwrap_ref_decay_Rectangle_20const____type__20std____2__make_pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const____2c_20Rectangle_20const____29($0 | 0, $5 + 4 | 0 | 0, $5 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_Rectangle__2c_20true_____unwrap_28std__declval_Rectangle___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Rectangle__2c_20std____2____unwrap_iter_impl_Rectangle__2c_20true__2c_200__28Rectangle__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_Rectangle__2c_20true_____unwrap_5babi_v15007_5d_28Rectangle__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_Rectangle_20const__2c_20Rectangle___20std____2____copy_impl_5babi_v15007_5d_Rectangle_20const_2c_20Rectangle_2c_20void__28Rectangle_20const__2c_20Rectangle_20const__2c_20Rectangle__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $1;
  HEAP32[($6 + 24 | 0) >> 2] = $2;
  HEAP32[($6 + 20 | 0) >> 2] = $3;
  HEAP32[($6 + 16 | 0) >> 2] = ((HEAP32[($6 + 24 | 0) >> 2] | 0) - (HEAP32[($6 + 28 | 0) >> 2] | 0) | 0) >> 4 | 0;
  label$1 : {
   if (!((HEAP32[($6 + 16 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   memmove(HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($6 + 16 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
  }
  HEAP32[($6 + 12 | 0) >> 2] = (HEAP32[($6 + 28 | 0) >> 2] | 0) + ((HEAP32[($6 + 16 | 0) >> 2] | 0) << 4 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[($6 + 20 | 0) >> 2] | 0) + ((HEAP32[($6 + 16 | 0) >> 2] | 0) << 4 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_Rectangle_20const____type_2c_20std____2____unwrap_ref_decay_Rectangle____type__20std____2__make_pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle___28Rectangle_20const____2c_20Rectangle____29($0 | 0, $6 + 12 | 0 | 0, $6 + 8 | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function Rectangle_20const__20std____2____rewrap_range_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const__2c_20Rectangle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = Rectangle_20const__20std____2____rewrap_iter_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20std____2____unwrap_iter_impl_Rectangle_20const__2c_20true___28Rectangle_20const__2c_20Rectangle_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function Rectangle__20std____2____rewrap_iter_5babi_v15007_5d_Rectangle__2c_20Rectangle__2c_20std____2____unwrap_iter_impl_Rectangle__2c_20true___28Rectangle__2c_20Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2____unwrap_iter_impl_Rectangle__2c_20true_____rewrap_5babi_v15007_5d_28Rectangle__2c_20Rectangle__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_Rectangle_20const____type_2c_20std____2____unwrap_ref_decay_Rectangle____type__20std____2__make_pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle___28Rectangle_20const____2c_20Rectangle____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_Rectangle_20const__2c_20Rectangle____pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle__2c_20_28void__290__28Rectangle_20const____2c_20Rectangle____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____unwrap_28std__declval_Rectangle_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Rectangle_20const__2c_20std____2____unwrap_iter_impl_Rectangle_20const__2c_20true__2c_200__28Rectangle_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____unwrap_5babi_v15007_5d_28Rectangle_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_Rectangle_20const____type_2c_20std____2____unwrap_ref_decay_Rectangle_20const____type__20std____2__make_pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const___28Rectangle_20const____2c_20Rectangle_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_Rectangle_20const__2c_20Rectangle_20const____pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20_28void__290__28Rectangle_20const____2c_20Rectangle_20const____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____unwrap_iter_impl_Rectangle__2c_20true_____unwrap_5babi_v15007_5d_28Rectangle__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = Rectangle__20std____2____to_address_5babi_v15007_5d_Rectangle__28Rectangle__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_Rectangle_20const__2c_20Rectangle____pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle__2c_20_28void__290__28Rectangle_20const____2c_20Rectangle____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function Rectangle_20const__20std____2____rewrap_iter_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20std____2____unwrap_iter_impl_Rectangle_20const__2c_20true___28Rectangle_20const__2c_20Rectangle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____rewrap_5babi_v15007_5d_28Rectangle_20const__2c_20Rectangle_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____unwrap_iter_impl_Rectangle__2c_20true_____rewrap_5babi_v15007_5d_28Rectangle__2c_20Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $14 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4 + 8 | 0) >> 2] | 0) - (Rectangle__20std____2____to_address_5babi_v15007_5d_Rectangle__28Rectangle__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 4 | 0) << 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__pair_Rectangle_20const__2c_20Rectangle_20const____pair_5babi_v15007_5d_Rectangle_20const__2c_20Rectangle_20const__2c_20_28void__290__28Rectangle_20const____2c_20Rectangle_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____unwrap_5babi_v15007_5d_28Rectangle_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = Rectangle_20const__20std____2____to_address_5babi_v15007_5d_Rectangle_20const__28Rectangle_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function Rectangle_20const__20std____2____to_address_5babi_v15007_5d_Rectangle_20const__28Rectangle_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____unwrap_iter_impl_Rectangle_20const__2c_20true_____rewrap_5babi_v15007_5d_28Rectangle_20const__2c_20Rectangle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $14 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4 + 8 | 0) >> 2] | 0) - (Rectangle_20const__20std____2____to_address_5babi_v15007_5d_Rectangle_20const__28Rectangle_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 4 | 0) << 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 4 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 4 | 0) | 0 | 0, (std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 4 | 0) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____28std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______base_destruct_at_end_5babi_v15007_5d_28Rectangle__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__allocator_traits_std____2__allocator_Rectangle____deallocate_5babi_v15007_5d_28std____2__allocator_Rectangle___2c_20Rectangle__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_Rectangle___deallocate_5babi_v15007_5d_28Rectangle__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______base_destruct_at_end_5babi_v15007_5d_28Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_Rectangle_2c_20std____2__allocator_Rectangle______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -16 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_Rectangle____destroy_5babi_v15007_5d_Rectangle_2c_20void__28std____2__allocator_Rectangle___2c_20Rectangle__29($14 | 0, Rectangle__20std____2____to_address_5babi_v15007_5d_Rectangle__28Rectangle__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Rectangle___deallocate_5babi_v15007_5d_28Rectangle__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5 + 4 | 0) >> 2] | 0) << 4 | 0 | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Rectangle____destroy_5babi_v15007_5d_Rectangle_2c_20void__28std____2__allocator_Rectangle___2c_20Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_Rectangle___destroy_5babi_v15007_5d_28Rectangle__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Rectangle___destroy_5babi_v15007_5d_28Rectangle__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if (!((std____2____is_overaligned_for_new_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$5 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
    void_20std____2____do_deallocate_handle_size_5babi_v15007_5d_std__align_val_t__28void__2c_20unsigned_20long_2c_20std__align_val_t_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5 >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2____do_deallocate_handle_size_5babi_v15007_5d___28void__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2____do_deallocate_handle_size_5babi_v15007_5d_std__align_val_t__28void__2c_20unsigned_20long_2c_20std__align_val_t_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2____libcpp_operator_delete_5babi_v15007_5d_void__2c_20std__align_val_t__28void__2c_20std__align_val_t_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2____do_deallocate_handle_size_5babi_v15007_5d___28void__2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  void_20std____2____libcpp_operator_delete_5babi_v15007_5d_void___28void__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____libcpp_operator_delete_5babi_v15007_5d_void__2c_20std__align_val_t__28void__2c_20std__align_val_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  operator_20delete_28void__2c_20std__align_val_t_29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____libcpp_operator_delete_5babi_v15007_5d_void___28void__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  operator_20delete_28void__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function __original_main() {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  InitWindow(HEAP32[(0 + 85040 | 0) >> 2] | 0 | 0, HEAP32[(0 + 85044 | 0) >> 2] | 0 | 0, 70217 | 0);
  HEAP32[($2 + 8 | 0) >> 2] = std____2____unique_if_MainScreen_____unique_single_20std____2__make_unique_5babi_v15007_5d_MainScreen__28_29() | 0;
  std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____20std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator__5babi_v15007_5d_MainScreen_2c_20std____2__default_delete_MainScreen__2c_20void_2c_20void__28std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____29(86928 | 0, $2 + 8 | 0 | 0) | 0;
  std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____unique_ptr_5babi_v15007_5d_28_29($2 + 8 | 0 | 0) | 0;
  emscripten_set_main_loop(3 | 0, 60 | 0, 1 | 0);
  CloseWindow();
  __stack_pointer = $2 + 16 | 0;
  return 0 | 0;
 }
 
 function std____2____unique_if_MainScreen_____unique_single_20std____2__make_unique_5babi_v15007_5d_MainScreen__28_29() {
  var $2 = 0, $4 = 0, $8 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = operator_20new_28unsigned_20long_29(20 | 0) | 0;
  MainScreen__MainScreen_28_29($4 | 0) | 0;
  std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____unique_ptr_5babi_v15007_5d_true_2c_20void__28MainScreen__29($2 + 12 | 0 | 0, $4 | 0) | 0;
  $8 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  __stack_pointer = $2 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____20std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator__5babi_v15007_5d_MainScreen_2c_20std____2__default_delete_MainScreen__2c_20void_2c_20void__28std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____reset_5babi_v15007_5d_28Screen__29($5 | 0, std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____release_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2__default_delete_Screen___default_delete_5babi_v15007_5d_MainScreen__28std____2__default_delete_MainScreen__20const__2c_20std____2__enable_if_is_convertible_MainScreen__2c_20Screen____value_2c_20void___type__29($4 + 7 | 0 | 0, std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____get_deleter_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, 0 | 0) | 0;
  std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____second_5babi_v15007_5d_28_29($5 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____unique_ptr_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____reset_5babi_v15007_5d_28MainScreen__29($4 | 0, 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function $28anonymous_20namespace_29__UpdatePaintFrame_28_29() {
  var $2 = 0, $4 = 0, $8 = 0, $25 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator___5babi_v15007_5d_28_29_20const(86928 | 0) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($4);
  $8 = std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator___5babi_v15007_5d_28_29_20const(86928 | 0) | 0;
  $28anonymous_20namespace_29__ChangeToScreen_28Screen__AppScreen_29(FUNCTION_TABLE[HEAP32[((HEAP32[$8 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($8) | 0 | 0);
  label$1 : {
   label$2 : {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Screen_2c_20std____2__default_delete_Screen___28std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen___20const__2c_20std__nullptr_t_29(86928 | 0, 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   BeginDrawing();
   HEAP8[($2 + 12 | 0) >> 0] = 245;
   HEAP8[($2 + 13 | 0) >> 0] = 245;
   HEAP8[($2 + 14 | 0) >> 0] = 245;
   HEAP8[($2 + 15 | 0) >> 0] = 255;
   HEAP32[($2 + 8 | 0) >> 2] = HEAPU8[($2 + 12 | 0) >> 0] | 0 | ((HEAPU8[($2 + 13 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 14 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 15 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   ClearBackground($2 + 8 | 0 | 0);
   $25 = std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator___5babi_v15007_5d_28_29_20const(86928 | 0) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$25 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($25);
   EndDrawing();
  }
  __stack_pointer = $2 + 16 | 0;
  return;
 }
 
 function std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____unique_ptr_5babi_v15007_5d_true_2c_20void__28MainScreen__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen______compressed_pair_5babi_v15007_5d_MainScreen___2c_20std____2____value_init_tag__28MainScreen___2c_20std____2____value_init_tag___29($5 | 0, $4 + 8 | 0 | 0, $4 + 7 | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____release_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[(std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____first_5babi_v15007_5d_28_29($4 | 0) | 0) >> 2] | 0;
  HEAP32[(std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____first_5babi_v15007_5d_28_29($4 | 0) | 0) >> 2] = 0;
  $9 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____reset_5babi_v15007_5d_28Screen__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0;
  $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[(std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $8;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__default_delete_Screen___operator_28_29_5babi_v15007_5d_28Screen__29_20const(std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____second_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____get_deleter_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____second_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__default_delete_Screen___default_delete_5babi_v15007_5d_MainScreen__28std____2__default_delete_MainScreen__20const__2c_20std____2__enable_if_is_convertible_MainScreen__2c_20Screen____value_2c_20void___type__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return HEAP32[($5 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__default_delete_Screen__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen____reset_5babi_v15007_5d_28MainScreen__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____first_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0;
  $8 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[(std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____first_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $8;
  label$1 : {
   if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__default_delete_MainScreen___operator_28_29_5babi_v15007_5d_28MainScreen__29_20const(std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____second_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator___5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = HEAP32[(std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function $28anonymous_20namespace_29__ChangeToScreen_28Screen__AppScreen_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0, $15 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $6 = std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator___5babi_v15007_5d_28_29_20const(86928 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(($4 | 0) == (FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   label$3 : {
    switch ($15 | 0) {
    case 0:
     HEAP32[($3 + 8 | 0) >> 2] = std____2____unique_if_MainScreen_____unique_single_20std____2__make_unique_5babi_v15007_5d_MainScreen__28_29() | 0;
     std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____20std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator__5babi_v15007_5d_MainScreen_2c_20std____2__default_delete_MainScreen__2c_20void_2c_20void__28std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____29(86928 | 0, $3 + 8 | 0 | 0) | 0;
     std____2__unique_ptr_MainScreen_2c_20std____2__default_delete_MainScreen_____unique_ptr_5babi_v15007_5d_28_29($3 + 8 | 0 | 0) | 0;
     break label$1;
    case 1:
     std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator__5babi_v15007_5d_28std__nullptr_t_29(86928 | 0, 0 | 0) | 0;
     break label$1;
    default:
     break label$3;
    };
   }
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Screen_2c_20std____2__default_delete_Screen___28std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen___20const__2c_20std__nullptr_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $10 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $10 = ((std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator_20bool_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Screen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator__5babi_v15007_5d_28std__nullptr_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____reset_5babi_v15007_5d_28Screen__29($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____operator_20bool_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $12 = (HEAP32[(std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $12 | 0;
 }
 
 function std____2____compressed_pair_elem_Screen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Screen__2c_20std____2__default_delete_Screen____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Screen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__default_delete_Screen___operator_28_29_5babi_v15007_5d_28Screen__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($5);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_Screen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__default_delete_Screen__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen______compressed_pair_5babi_v15007_5d_MainScreen___2c_20std____2____value_init_tag__28MainScreen___2c_20std____2____value_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_MainScreen__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_MainScreen___2c_20void__28MainScreen___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__default_delete_MainScreen__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____value_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____compressed_pair_elem_MainScreen__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_MainScreen___2c_20void__28MainScreen___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__default_delete_MainScreen__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____value_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  return HEAP32[($3 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_MainScreen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_MainScreen__2c_20std____2__default_delete_MainScreen____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__default_delete_MainScreen__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__default_delete_MainScreen___operator_28_29_5babi_v15007_5d_28MainScreen__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   if (($5 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($5);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_MainScreen__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__default_delete_MainScreen__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function main($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __original_main() | 0 | 0;
 }
 
 function MainScreen__MainScreen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $23 = 0, $24 = 0, $36 = 0, $37 = 0, $47 = 0, $48 = 0, $75 = 0, $76 = 0, $95 = 0, $96 = 0, $299 = 0, $312 = 0, $338 = 0, $351 = 0, $373 = 0, $386 = 0, $436 = 0, $449 = 0, $486 = 0, $499 = 0, $546 = 0, $570 = 0, $626 = 0, $653 = 0;
  $3 = __stack_pointer - 400 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 396 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 396 | 0) >> 2] | 0;
  Screen__Screen_28_29($4 | 0) | 0;
  HEAP32[$4 >> 2] = 75716 + 8 | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer____vector_5babi_v15007_5d_28_29($4 + 8 | 0 | 0) | 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  Layer__Layer_28_29($3 + 352 | 0 | 0) | 0;
  HEAP8[($3 + 368 | 0) >> 0] = 1;
  HEAPF32[($3 + 336 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 340 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 344 | 0) >> 2] = Math_fround(HEAP32[(0 + 85040 | 0) >> 2] | 0 | 0);
  HEAPF32[($3 + 348 | 0) >> 2] = Math_fround(HEAP32[(0 + 85044 | 0) >> 2] | 0 | 0);
  $23 = $3 + 352 | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 336 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 340 | 0) >> 2] | 0;
  $299 = i64toi32_i32$0;
  i64toi32_i32$0 = $23;
  HEAP32[i64toi32_i32$0 >> 2] = $299;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $24 = 8;
  i64toi32_i32$2 = ($3 + 336 | 0) + $24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $312 = i64toi32_i32$1;
  i64toi32_i32$1 = $23 + $24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $312;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  Section__Section_28_29($3 + 308 | 0 | 0) | 0;
  HEAPF32[($3 + 292 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 296 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 300 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 304 | 0) >> 2] = Math_fround(.5);
  $36 = $3 + 308 | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 292 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 296 | 0) >> 2] | 0;
  $338 = i64toi32_i32$0;
  i64toi32_i32$0 = $36;
  HEAP32[i64toi32_i32$0 >> 2] = $338;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $37 = 8;
  i64toi32_i32$2 = ($3 + 292 | 0) + $37 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $351 = i64toi32_i32$1;
  i64toi32_i32$1 = $36 + $37 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $351;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  Button__Button_28_29($3 + 268 | 0 | 0) | 0;
  HEAPF32[($3 + 252 | 0) >> 2] = Math_fround(.05000000074505806);
  HEAPF32[($3 + 256 | 0) >> 2] = Math_fround(.05000000074505806);
  HEAPF32[($3 + 260 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 264 | 0) >> 2] = Math_fround(.05000000074505806);
  $47 = $3 + 268 | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 252 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 256 | 0) >> 2] | 0;
  $373 = i64toi32_i32$0;
  i64toi32_i32$0 = $47;
  HEAP32[i64toi32_i32$0 >> 2] = $373;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $48 = 8;
  i64toi32_i32$2 = ($3 + 252 | 0) + $48 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $386 = i64toi32_i32$1;
  i64toi32_i32$1 = $47 + $48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $386;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Button_2c_20std____2__allocator_Button____push_back_5babi_v15007_5d_28Button_20const__29(($3 + 308 | 0) + 16 | 0 | 0, $3 + 268 | 0 | 0);
  std____2__vector_Section_2c_20std____2__allocator_Section____push_back_5babi_v15007_5d_28Section_20const__29(($3 + 352 | 0) + 20 | 0 | 0, $3 + 308 | 0 | 0);
  Section__Section_28_29($3 + 224 | 0 | 0) | 0;
  HEAPF32[($3 + 208 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 212 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 216 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 220 | 0) >> 2] = Math_fround(.5);
  $75 = $3 + 224 | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 208 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 212 | 0) >> 2] | 0;
  $436 = i64toi32_i32$0;
  i64toi32_i32$0 = $75;
  HEAP32[i64toi32_i32$0 >> 2] = $436;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $76 = 8;
  i64toi32_i32$2 = ($3 + 208 | 0) + $76 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $449 = i64toi32_i32$1;
  i64toi32_i32$1 = $75 + $76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $449;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Section_2c_20std____2__allocator_Section____push_back_5babi_v15007_5d_28Section_20const__29(($3 + 352 | 0) + 20 | 0 | 0, $3 + 224 | 0 | 0);
  Section__Section_28_29($3 + 180 | 0 | 0) | 0;
  HEAPF32[($3 + 164 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 168 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($3 + 172 | 0) >> 2] = Math_fround(.5);
  HEAPF32[($3 + 176 | 0) >> 2] = Math_fround(1.0);
  $95 = $3 + 180 | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 164 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 168 | 0) >> 2] | 0;
  $486 = i64toi32_i32$0;
  i64toi32_i32$0 = $95;
  HEAP32[i64toi32_i32$0 >> 2] = $486;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $96 = 8;
  i64toi32_i32$2 = ($3 + 164 | 0) + $96 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $499 = i64toi32_i32$1;
  i64toi32_i32$1 = $95 + $96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $499;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Section_2c_20std____2__allocator_Section____push_back_5babi_v15007_5d_28Section_20const__29(($3 + 352 | 0) + 20 | 0 | 0, $3 + 180 | 0 | 0);
  HEAP8[($3 + 124 | 0) >> 0] = 1;
  HEAP8[($3 + 125 | 0) >> 0] = 0;
  HEAP32[($3 + 108 | 0) >> 2] = 0;
  HEAP32[($3 + 112 | 0) >> 2] = 1;
  HEAP32[($3 + 116 | 0) >> 2] = $3 + 108 | 0;
  HEAP32[($3 + 120 | 0) >> 2] = 2;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 116 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 120 | 0) >> 2] | 0;
  $546 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[$3 >> 2] = $546;
  HEAP32[($3 + 4 | 0) >> 2] = i64toi32_i32$1;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std__initializer_list_unsigned_20long__29(($3 + 124 | 0) + 4 | 0 | 0, $3 | 0) | 0;
  HEAP32[($3 + 96 | 0) >> 2] = 2;
  HEAP32[($3 + 100 | 0) >> 2] = $3 + 96 | 0;
  HEAP32[($3 + 104 | 0) >> 2] = 1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 100 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 104 | 0) >> 2] | 0;
  $570 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $570;
  HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std__initializer_list_unsigned_20long__29(($3 + 124 | 0) + 16 | 0 | 0, $3 + 8 | 0 | 0) | 0;
  HEAPF32[($3 + 152 | 0) >> 2] = Math_fround(.004000000189989805);
  HEAPF32[($3 + 156 | 0) >> 2] = Math_fround(2.0);
  HEAP8[($3 + 160 | 0) >> 0] = 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider____push_back_5babi_v15007_5d_28Divider___29(($3 + 352 | 0) + 32 | 0 | 0, $3 + 124 | 0 | 0);
  Divider___Divider_28_29($3 + 124 | 0 | 0) | 0;
  HEAP8[($3 + 56 | 0) >> 0] = 0;
  HEAP8[($3 + 57 | 0) >> 0] = 1;
  HEAP32[($3 + 44 | 0) >> 2] = 0;
  HEAP32[($3 + 48 | 0) >> 2] = $3 + 44 | 0;
  HEAP32[($3 + 52 | 0) >> 2] = 1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 52 | 0) >> 2] | 0;
  $626 = i64toi32_i32$0;
  i64toi32_i32$0 = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $626;
  HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$1;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std__initializer_list_unsigned_20long__29(($3 + 56 | 0) + 4 | 0 | 0, $3 + 16 | 0 | 0) | 0;
  HEAP32[($3 + 32 | 0) >> 2] = 1;
  HEAP32[($3 + 36 | 0) >> 2] = $3 + 32 | 0;
  HEAP32[($3 + 40 | 0) >> 2] = 1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 36 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 40 | 0) >> 2] | 0;
  $653 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 24 | 0) >> 2] = $653;
  HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std__initializer_list_unsigned_20long__29(($3 + 56 | 0) + 16 | 0 | 0, $3 + 24 | 0 | 0) | 0;
  HEAPF32[($3 + 84 | 0) >> 2] = Math_fround(.004000000189989805);
  HEAPF32[($3 + 88 | 0) >> 2] = Math_fround(2.0);
  HEAP8[($3 + 92 | 0) >> 0] = 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider____push_back_5babi_v15007_5d_28Divider___29(($3 + 352 | 0) + 32 | 0 | 0, $3 + 56 | 0 | 0);
  Divider___Divider_28_29($3 + 56 | 0 | 0) | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer____push_back_5babi_v15007_5d_28Layer_20const__29($4 + 8 | 0 | 0, $3 + 352 | 0 | 0);
  Section___Section_28_29($3 + 180 | 0 | 0) | 0;
  Section___Section_28_29($3 + 224 | 0 | 0) | 0;
  Section___Section_28_29($3 + 308 | 0 | 0) | 0;
  Layer___Layer_28_29($3 + 352 | 0 | 0) | 0;
  __stack_pointer = $3 + 400 | 0;
  return $4 | 0;
 }
 
 function Screen__Screen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 75792 + 8 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($4 + 8 | 0 | 0, $3 + 8 | 0 | 0, $3 + 7 | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Layer__Layer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP8[($4 + 16 | 0) >> 0] = 0;
  std____2__vector_Section_2c_20std____2__allocator_Section____vector_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_5babi_v15007_5d_28_29($4 + 32 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Section__Section_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button____vector_5babi_v15007_5d_28_29($4 + 16 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Button__Button_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = 0;
  return $4 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____push_back_5babi_v15007_5d_28Button_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_Button_2c_20std____2__allocator_Button______construct_one_at_end_5babi_v15007_5d_Button_20const___28Button_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_Button_2c_20std____2__allocator_Button______push_back_slow_path_Button_20const___28Button_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____push_back_5babi_v15007_5d_28Section_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_Section_2c_20std____2__allocator_Section______construct_one_at_end_5babi_v15007_5d_Section_20const___28Section_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_Section_2c_20std____2__allocator_Section______push_back_slow_path_Section_20const___28Section_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std__initializer_list_unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $41 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 28 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 20 | 0) >> 2] = 0;
  std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($5 + 8 | 0 | 0, $4 + 20 | 0 | 0, $4 + 19 | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector____destroy_vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($4 + 4 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_29($4 + 8 | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($5 | 0);
  label$1 : {
   if (!((std__initializer_list_unsigned_20long___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, std__initializer_list_unsigned_20long___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_unsigned_20long_20const____value_2c_20void___type_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______construct_at_end_unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long_29($5 | 0, std__initializer_list_unsigned_20long___begin_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0, std__initializer_list_unsigned_20long___end_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0, std__initializer_list_unsigned_20long___size_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0);
  }
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 8 | 0 | 0);
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 8 | 0 | 0) | 0;
  $41 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $41 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____push_back_5babi_v15007_5d_28Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_Divider_2c_20std____2__allocator_Divider______construct_one_at_end_5babi_v15007_5d_Divider__28Divider___29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_Divider_2c_20std____2__allocator_Divider______push_back_slow_path_Divider__28Divider___29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function Divider___Divider_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____vector_5babi_v15007_5d_28_29($4 + 16 | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____vector_5babi_v15007_5d_28_29($4 + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____push_back_5babi_v15007_5d_28Layer_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[(std____2__vector_Layer_2c_20std____2__allocator_Layer______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    void_20std____2__vector_Layer_2c_20std____2__allocator_Layer______construct_one_at_end_5babi_v15007_5d_Layer_20const___28Layer_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   void_20std____2__vector_Layer_2c_20std____2__allocator_Layer______push_back_slow_path_Layer_20const___28Layer_20const__29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function Section___Section_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button_____vector_5babi_v15007_5d_28_29($4 + 16 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Layer___Layer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider_____vector_5babi_v15007_5d_28_29($4 + 32 | 0 | 0) | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section_____vector_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Section__2c_20std____2__allocator_Section______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($4 + 8 | 0 | 0, $3 + 8 | 0 | 0, $3 + 7 | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($4 + 8 | 0 | 0, $3 + 8 | 0 | 0, $3 + 7 | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Button__2c_20std____2__allocator_Button______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($4 + 8 | 0 | 0, $3 + 8 | 0 | 0, $3 + 7 | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_Button_2c_20std____2__allocator_Button______construct_one_at_end_5babi_v15007_5d_Button_20const___28Button_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction___ConstructTransaction_28std____2__vector_Button_2c_20std____2__allocator_Button____2c_20unsigned_20long_29($4 + 12 | 0 | 0, $5 | 0, 1 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Button____construct_5babi_v15007_5d_Button_2c_20Button_20const__2c_20void__28std____2__allocator_Button___2c_20Button__2c_20Button_20const__29(std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 24 | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction____ConstructTransaction_28_29($4 + 12 | 0 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function void_20std____2__vector_Button_2c_20std____2__allocator_Button______push_back_slow_path_Button_20const___28Button_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2____split_buffer_Button_2c_20std____2__allocator_Button_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Button___29($4 | 0, std____2__vector_Button_2c_20std____2__allocator_Button______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Button____construct_5babi_v15007_5d_Button_2c_20Button_20const__2c_20void__28std____2__allocator_Button___2c_20Button__2c_20Button_20const__29(HEAP32[($4 + 20 | 0) >> 2] | 0 | 0, Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 24 | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______swap_out_circular_buffer_28std____2____split_buffer_Button_2c_20std____2__allocator_Button_____29($5 | 0, $4 | 0);
  std____2____split_buffer_Button_2c_20std____2__allocator_Button________split_buffer_28_29($4 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_Section_2c_20std____2__allocator_Section______construct_one_at_end_5babi_v15007_5d_Section_20const___28Section_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction___ConstructTransaction_28std____2__vector_Section_2c_20std____2__allocator_Section____2c_20unsigned_20long_29($4 + 12 | 0 | 0, $5 | 0, 1 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section_20const__2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section_20const__29(std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 28 | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction____ConstructTransaction_28_29($4 + 12 | 0 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function void_20std____2__vector_Section_2c_20std____2__allocator_Section______push_back_slow_path_Section_20const___28Section_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2____split_buffer_Section_2c_20std____2__allocator_Section_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Section___29($4 | 0, std____2__vector_Section_2c_20std____2__allocator_Section______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section_20const__2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section_20const__29(HEAP32[($4 + 20 | 0) >> 2] | 0 | 0, Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 28 | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______swap_out_circular_buffer_28std____2____split_buffer_Section_2c_20std____2__allocator_Section_____29($5 | 0, $4 | 0);
  std____2____split_buffer_Section_2c_20std____2__allocator_Section________split_buffer_28_29($4 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_Divider_2c_20std____2__allocator_Divider______construct_one_at_end_5babi_v15007_5d_Divider__28Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction___ConstructTransaction_28std____2__vector_Divider_2c_20std____2__allocator_Divider____2c_20unsigned_20long_29($4 + 12 | 0 | 0, $5 | 0, 1 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider___29(std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 40 | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction____ConstructTransaction_28_29($4 + 12 | 0 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function void_20std____2__vector_Divider_2c_20std____2__allocator_Divider______push_back_slow_path_Divider__28Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Divider___29($4 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider___29(HEAP32[($4 + 20 | 0) >> 2] | 0 | 0, Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 40 | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______swap_out_circular_buffer_28std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____29($5 | 0, $4 | 0);
  std____2____split_buffer_Divider_2c_20std____2__allocator_Divider________split_buffer_28_29($4 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector____destroy_vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_29($0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std__initializer_list_unsigned_20long___size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______vallocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_unsigned_20long____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_unsigned_20long___28std____2__allocator_unsigned_20long___2c_20unsigned_20long_29($4 | 0, std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  $22 = (HEAP32[$5 >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $22;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std__initializer_list_unsigned_20long___begin_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std__initializer_list_unsigned_20long___end_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return (HEAP32[$4 >> 2] | 0) + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0 | 0;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_unsigned_20long_20const____value_2c_20void___type_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______construct_at_end_unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction___ConstructTransaction_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = unsigned_20long__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20unsigned_20long_2c_20unsigned_20long_2c_20_28void__290__28std____2__allocator_unsigned_20long___2c_20unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_____complete_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector______transaction_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($4 | 0);
  }
  $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector____destroy_vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function void_20std____2__vector_Layer_2c_20std____2__allocator_Layer______construct_one_at_end_5babi_v15007_5d_Layer_20const___28Layer_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer_____ConstructTransaction___ConstructTransaction_28std____2__vector_Layer_2c_20std____2__allocator_Layer____2c_20unsigned_20long_29($4 + 12 | 0 | 0, $5 | 0, 1 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Layer____construct_5babi_v15007_5d_Layer_2c_20Layer_20const__2c_20void__28std____2__allocator_Layer___2c_20Layer__2c_20Layer_20const__29(std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = (HEAP32[($4 + 16 | 0) >> 2] | 0) + 44 | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer_____ConstructTransaction____ConstructTransaction_28_29($4 + 12 | 0 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function void_20std____2__vector_Layer_2c_20std____2__allocator_Layer______push_back_slow_path_Layer_20const___28Layer_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Layer___29($4 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + 1 | 0 | 0) | 0 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) | 0;
  void_20std____2__allocator_traits_std____2__allocator_Layer____construct_5babi_v15007_5d_Layer_2c_20Layer_20const__2c_20void__28std____2__allocator_Layer___2c_20Layer__2c_20Layer_20const__29(HEAP32[($4 + 20 | 0) >> 2] | 0 | 0, Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 44 | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______swap_out_circular_buffer_28std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____29($5 | 0, $4 | 0);
  std____2____split_buffer_Layer_2c_20std____2__allocator_Layer________split_buffer_28_29($4 | 0) | 0;
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector____destroy_vector_28std____2__vector_Button_2c_20std____2__allocator_Button____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector____destroy_vector_28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector____destroy_vector_28std____2__vector_Section_2c_20std____2__allocator_Section____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function MainScreen___MainScreen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = 75716 + 8 | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer_____vector_5babi_v15007_5d_28_29($4 + 8 | 0 | 0) | 0;
  Screen___Screen_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer_____vector_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______destroy_vector____destroy_vector_28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($3 + 8 | 0 | 0, $4 | 0) | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($3 + 8 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______destroy_vector____destroy_vector_28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_Layer_2c_20std____2__allocator_Layer______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_Layer____deallocate_5babi_v15007_5d_28std____2__allocator_Layer___2c_20Layer__2c_20unsigned_20long_29(std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function MainScreen___MainScreen_28_29_1($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[4 | 0]($4) | 0;
  operator_20delete_28void__29($4 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function MainScreen__Update_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  GetMousePosition($3 + 20 | 0 | 0);
  HEAP32[($3 + 16 | 0) >> 2] = $4 + 8 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____begin_5babi_v15007_5d_28_29(HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____end_5babi_v15007_5d_28_29(HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Layer___28std____2____wrap_iter_Layer___20const__2c_20std____2____wrap_iter_Layer___20const__29($3 + 12 | 0 | 0, $3 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3 + 4 | 0) >> 2] = std____2____wrap_iter_Layer____operator__5babi_v15007_5d_28_29_20const($3 + 12 | 0 | 0) | 0;
    UpdateLayer_28Layer__29(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Layer____operator___5babi_v15007_5d_28_29($3 + 12 | 0 | 0) | 0;
    continue label$2;
   };
  }
  __stack_pointer = $3 + 32 | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____begin_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Layer______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Layer__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[$4 >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____end_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $9 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2____wrap_iter_Layer______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Layer__29($3 + 12 | 0 | 0, $4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $9 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Layer___28std____2____wrap_iter_Layer___20const__2c_20std____2____wrap_iter_Layer___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $11 = ((bool_20std____2__operator___5babi_v15007_5d_Layer___28std____2____wrap_iter_Layer___20const__2c_20std____2____wrap_iter_Layer___20const__29_1(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $11 | 0;
 }
 
 function std____2____wrap_iter_Layer____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Layer____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 44 | 0;
  return $4 | 0;
 }
 
 function std____2____wrap_iter_Layer______wrap_iter_5babi_v15007_5d_28void_20const__2c_20Layer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Layer___28std____2____wrap_iter_Layer___20const__2c_20std____2____wrap_iter_Layer___20const__29_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2____wrap_iter_Layer____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == (std____2____wrap_iter_Layer____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function MainScreen__Paint_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  $6 = HEAP32[(0 + 85040 | 0) >> 2] | 0;
  $8 = HEAP32[(0 + 85044 | 0) >> 2] | 0;
  HEAP8[($3 + 24 | 0) >> 0] = 0;
  HEAP8[($3 + 25 | 0) >> 0] = 228;
  HEAP8[($3 + 26 | 0) >> 0] = 48;
  HEAP8[($3 + 27 | 0) >> 0] = 255;
  HEAP32[($3 + 4 | 0) >> 2] = HEAPU8[($3 + 24 | 0) >> 0] | 0 | ((HEAPU8[($3 + 25 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($3 + 26 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($3 + 27 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $14 = 0;
  DrawRectangle($14 | 0, $14 | 0, $6 | 0, $8 | 0, $3 + 4 | 0 | 0);
  HEAP32[($3 + 20 | 0) >> 2] = $4 + 8 | 0;
  HEAP32[($3 + 16 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____begin_5babi_v15007_5d_28_29(HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($3 + 12 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____end_5babi_v15007_5d_28_29(HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Layer___28std____2____wrap_iter_Layer___20const__2c_20std____2____wrap_iter_Layer___20const__29($3 + 16 | 0 | 0, $3 + 12 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($3 + 8 | 0) >> 2] = std____2____wrap_iter_Layer____operator__5babi_v15007_5d_28_29_20const($3 + 16 | 0 | 0) | 0;
    PaintLayer_28Layer_20const__29(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
    std____2____wrap_iter_Layer____operator___5babi_v15007_5d_28_29($3 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  __stack_pointer = $3 + 32 | 0;
  return;
 }
 
 function MainScreen__Finish_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function MainScreen__GetEnum_28_29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 0 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Section__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_elem_Section__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_Section___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_Section___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_Section______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_Section______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_Divider___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_Divider___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_Divider______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_Divider______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2____default_init_tag__28std__nullptr_t___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Button__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($6 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_elem_Button__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_Button___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_Button___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_Button______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_Button______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_unsigned_20long____deallocate_5babi_v15007_5d_28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long_29(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 2 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 2 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + ((std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0) << 2 | 0) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______base_destruct_at_end_5babi_v15007_5d_28unsigned_20long__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0) >> 2 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_unsigned_20long____deallocate_5babi_v15007_5d_28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_unsigned_20long___deallocate_5babi_v15007_5d_28unsigned_20long__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______base_destruct_at_end_5babi_v15007_5d_28unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_unsigned_20long____destroy_5babi_v15007_5d_unsigned_20long_2c_20void__28std____2__allocator_unsigned_20long___2c_20unsigned_20long__29($14 | 0, unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_unsigned_20long___deallocate_5babi_v15007_5d_28unsigned_20long__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, (HEAP32[($5 + 4 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_unsigned_20long____destroy_5babi_v15007_5d_unsigned_20long_2c_20void__28std____2__allocator_unsigned_20long___2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_unsigned_20long___destroy_5babi_v15007_5d_28unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_unsigned_20long___destroy_5babi_v15007_5d_28unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector____destroy_vector_28std____2__vector_Button_2c_20std____2__allocator_Button____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_Button_2c_20std____2__allocator_Button______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_Button____deallocate_5babi_v15007_5d_28std____2__allocator_Button___2c_20Button__2c_20unsigned_20long_29(std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 24) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 24) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 24) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______base_destruct_at_end_5babi_v15007_5d_28Button__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (24 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_Button____deallocate_5babi_v15007_5d_28std____2__allocator_Button___2c_20Button__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_Button___deallocate_5babi_v15007_5d_28Button__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (24 | 0) | 0 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______base_destruct_at_end_5babi_v15007_5d_28Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -24 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_Button____destroy_5babi_v15007_5d_Button_2c_20void__28std____2__allocator_Button___2c_20Button__29($14 | 0, Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Button___deallocate_5babi_v15007_5d_28Button__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 24) | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Button____destroy_5babi_v15007_5d_Button_2c_20void__28std____2__allocator_Button___2c_20Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_Button___destroy_5babi_v15007_5d_28Button__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Button___destroy_5babi_v15007_5d_28Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector____destroy_vector_28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_Divider_2c_20std____2__allocator_Divider______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_Divider____deallocate_5babi_v15007_5d_28std____2__allocator_Divider___2c_20Divider__2c_20unsigned_20long_29(std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector____destroy_vector_28std____2__vector_Section_2c_20std____2__allocator_Section____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_delete_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0);
  void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29(HEAP32[$4 >> 2] | 0 | 0);
  label$1 : {
   if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__vector_Section_2c_20std____2__allocator_Section______clear_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0);
   std____2__allocator_traits_std____2__allocator_Section____deallocate_5babi_v15007_5d_28std____2__allocator_Section___2c_20Section__2c_20unsigned_20long_29(std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0, std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const(HEAP32[$4 >> 2] | 0 | 0) | 0 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 40) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 40) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 40) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______base_destruct_at_end_5babi_v15007_5d_28Divider__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (40 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_Divider____deallocate_5babi_v15007_5d_28std____2__allocator_Divider___2c_20Divider__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_Divider___deallocate_5babi_v15007_5d_28Divider__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (40 | 0) | 0 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______base_destruct_at_end_5babi_v15007_5d_28Divider__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -40 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_Divider____destroy_5babi_v15007_5d_Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__29($14 | 0, Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Divider___deallocate_5babi_v15007_5d_28Divider__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 40) | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Divider____destroy_5babi_v15007_5d_Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_Divider___destroy_5babi_v15007_5d_28Divider__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Divider___destroy_5babi_v15007_5d_28Divider__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  Divider___Divider_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 28) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 28) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 28) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______base_destruct_at_end_5babi_v15007_5d_28Section__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (28 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_Section____deallocate_5babi_v15007_5d_28std____2__allocator_Section___2c_20Section__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_Section___deallocate_5babi_v15007_5d_28Section__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (28 | 0) | 0 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______base_destruct_at_end_5babi_v15007_5d_28Section__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_Section____destroy_5babi_v15007_5d_Section_2c_20void__28std____2__allocator_Section___2c_20Section__29($14 | 0, Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Section___deallocate_5babi_v15007_5d_28Section__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 28) | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Section____destroy_5babi_v15007_5d_Section_2c_20void__28std____2__allocator_Section___2c_20Section__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_Section___destroy_5babi_v15007_5d_28Section__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Section___destroy_5babi_v15007_5d_28Section__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  Section___Section_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____wrap_iter_Layer____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_Layer___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_Layer___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_Layer______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_Layer______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_delete_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($4 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 44) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Layer_2c_20std____2__allocator_Layer____size_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 44) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($4 | 0) | 0) + Math_imul(std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0, 44) | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_erase_c_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______base_destruct_at_end_5babi_v15007_5d_28Layer__29($4 | 0, HEAP32[$4 >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2__vector_Layer_2c_20std____2__allocator_Layer______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (44 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_Layer____deallocate_5babi_v15007_5d_28std____2__allocator_Layer___2c_20Layer__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2__allocator_Layer___deallocate_5babi_v15007_5d_28Layer__2c_20unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29(HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4 + 4 | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (44 | 0) | 0 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  HEAP32[($7 + 28 | 0) >> 2] = $0;
  HEAP32[($7 + 24 | 0) >> 2] = $1;
  HEAP32[($7 + 20 | 0) >> 2] = $2;
  HEAP32[($7 + 16 | 0) >> 2] = $3;
  HEAP32[($7 + 12 | 0) >> 2] = $4;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______base_destruct_at_end_5babi_v15007_5d_28Layer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $17 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $14 = std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $17 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -44 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $17;
    void_20std____2__allocator_traits_std____2__allocator_Layer____destroy_5babi_v15007_5d_Layer_2c_20void__28std____2__allocator_Layer___2c_20Layer__29($14 | 0, Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29($17 | 0) | 0 | 0);
    continue label$2;
   };
  }
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Layer___deallocate_5babi_v15007_5d_28Layer__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  std____2____libcpp_deallocate_5babi_v15007_5d_28void__2c_20unsigned_20long_2c_20unsigned_20long_29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 44) | 0, 4 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Layer____destroy_5babi_v15007_5d_Layer_2c_20void__28std____2__allocator_Layer___2c_20Layer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2__allocator_Layer___destroy_5babi_v15007_5d_28Layer__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__allocator_Layer___destroy_5babi_v15007_5d_28Layer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  Layer___Layer_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction___ConstructTransaction_28std____2__vector_Button_2c_20std____2__allocator_Button____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 24) | 0;
  return $6 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Button____construct_5babi_v15007_5d_Button_2c_20Button_20const__2c_20void__28std____2__allocator_Button___2c_20Button__2c_20Button_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Button___construct_5babi_v15007_5d_Button_2c_20Button_20const___28Button__2c_20Button_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Button_2c_20std____2__allocator_Button______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Button___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Button__2c_20std____2__allocator_Button_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Button____28std__nullptr_t___2c_20std____2__allocator_Button___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7 >> 2] = 0;
    break label$1;
   }
   std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Button____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Button___28std____2__allocator_Button___2c_20unsigned_20long_29($6 | 0, std____2____split_buffer_Button_2c_20std____2__allocator_Button_______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  }
  $26 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 24) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 20 | 0) >> 2] | 0, 24) | 0;
  HEAP32[(std____2____split_buffer_Button_2c_20std____2__allocator_Button_______end_cap_5babi_v15007_5d_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______swap_out_circular_buffer_28std____2____split_buffer_Button_2c_20std____2__allocator_Button_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $27 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_delete_5babi_v15007_5d_28_29_20const($5 | 0);
  $6 = std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2__reverse_iterator_Button____reverse_iterator_5babi_v15007_5d_28Button__29($4 + 16 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Button____reverse_iterator_5babi_v15007_5d_28Button__29($4 + 12 | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Button____reverse_iterator_5babi_v15007_5d_28Button__29($4 + 8 | 0 | 0, HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__reverse_iterator_Button___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Button__2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20Button_2c_20void__28std____2__allocator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($6 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27 = std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($4 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27;
  std____2__enable_if_is_move_constructible_Button____value_20___20is_move_assignable_Button____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Button___28Button___2c_20Button___29($5 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_Button____value_20___20is_move_assignable_Button____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Button___28Button___2c_20Button___29($5 + 4 | 0 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_Button____value_20___20is_move_assignable_Button____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Button___28Button___2c_20Button___29(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, std____2____split_buffer_Button_2c_20std____2__allocator_Button_______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0);
  void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($5 | 0);
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_Button_2c_20std____2__allocator_Button_____clear_5babi_v15007_5d_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_Button____deallocate_5babi_v15007_5d_28std____2__allocator_Button___2c_20Button__2c_20unsigned_20long_29(std____2____split_buffer_Button_2c_20std____2__allocator_Button_______alloc_5babi_v15007_5d_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_Button_2c_20std____2__allocator_Button_____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_Button___construct_5babi_v15007_5d_Button_2c_20Button_20const___28Button__2c_20Button_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $34 = 0, $44 = 0, $54 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $7 = HEAP32[($5 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[i64toi32_i32$0 >> 2] = $34;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + $8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $44;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $11 = 8;
  i64toi32_i32$2 = $7 + $11 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54 = i64toi32_i32$0;
  i64toi32_i32$0 = $6 + $11 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_Button____max_size_5babi_v15007_5d_std____2__allocator_Button__2c_20void__28std____2__allocator_Button__20const__29(std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Button____28std__nullptr_t___2c_20std____2__allocator_Button___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Button__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Button___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Button___2c_20void__28std____2__allocator_Button___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Button____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Button___28std____2__allocator_Button___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_Button___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__reverse_iterator_Button____reverse_iterator_5babi_v15007_5d_28Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Button___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Button__2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20Button_2c_20void__28std____2__allocator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $14 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[($6 + 20 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = std____2__reverse_iterator_Button___20std____2__move_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29(HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0) | 0;
  $14 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $14 | 0;
 }
 
 function std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__enable_if_is_move_constructible_Button____value_20___20is_move_assignable_Button____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Button___28Button___2c_20Button___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 24) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Button_2c_20std____2__allocator_Button____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 24) | 0 | 0, (std____2__vector_Button_2c_20std____2__allocator_Button____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 24) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_____clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_Button_2c_20std____2__allocator_Button_______destruct_at_end_5babi_v15007_5d_28Button__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_Button_2c_20std____2__allocator_Button_______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (24 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_Button____max_size_5babi_v15007_5d_std____2__allocator_Button__2c_20void__28std____2__allocator_Button__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_Button___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_5babi_v15007_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($4 + 15 | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $14 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    break label$1;
   }
   $14 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__allocator_Button___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 178956970 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Button___2c_20void__28std____2__allocator_Button___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Button___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_Button____max_size_5babi_v15007_5d_std____2__allocator_Button__2c_20void__28std____2__allocator_Button__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 24) | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_Button___2c_201_2c_20false_____get_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button___2c_201_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__reverse_iterator_Button___20std____2__move_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $21 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 40 | 0) >> 2] = $0;
  HEAP32[($5 + 36 | 0) >> 2] = $1;
  HEAP32[($5 + 32 | 0) >> 2] = $2;
  HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($5 + 40 | 0) >> 2] | 0;
  HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($5 + 36 | 0) >> 2] | 0;
  HEAP32[($5 + 12 | 0) >> 2] = HEAP32[($5 + 32 | 0) >> 2] | 0;
  std____2__enable_if_is_copy_constructible_std____2__reverse_iterator_Button_____value_20___20is_copy_constructible_std____2__reverse_iterator_Button_____value_20___20is_copy_constructible_std____2__reverse_iterator_Button_____value_2c_20std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button______type_20std____2____move_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($5 + 24 | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($5 + 44 | 0) >> 2] = HEAP32[(($5 + 24 | 0) + 4 | 0) >> 2] | 0;
  $21 = HEAP32[($5 + 44 | 0) >> 2] | 0;
  __stack_pointer = $5 + 48 | 0;
  return $21 | 0;
 }
 
 function std____2__enable_if_is_copy_constructible_std____2__reverse_iterator_Button_____value_20___20is_copy_constructible_std____2__reverse_iterator_Button_____value_20___20is_copy_constructible_std____2__reverse_iterator_Button_____value_2c_20std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button______type_20std____2____move_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 76 | 0) >> 2] = $1;
  HEAP32[($6 + 72 | 0) >> 2] = $2;
  HEAP32[($6 + 68 | 0) >> 2] = $3;
  HEAP32[($6 + 52 | 0) >> 2] = HEAP32[($6 + 76 | 0) >> 2] | 0;
  HEAP32[($6 + 56 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_Button____28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false__2c_200__28std____2__reverse_iterator_Button___29(HEAP32[($6 + 52 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 44 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0;
  HEAP32[($6 + 48 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_Button____28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false__2c_200__28std____2__reverse_iterator_Button___29(HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 36 | 0) >> 2] = HEAP32[($6 + 68 | 0) >> 2] | 0;
  HEAP32[($6 + 40 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_Button____28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false__2c_200__28std____2__reverse_iterator_Button___29(HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____20std____2____move_impl_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20Button__2c_20Button__2c_200__28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($6 + 60 | 0 | 0, HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, HEAP32[($6 + 48 | 0) >> 2] | 0 | 0, HEAP32[($6 + 40 | 0) >> 2] | 0 | 0);
  HEAP32[($6 + 28 | 0) >> 2] = HEAP32[($6 + 76 | 0) >> 2] | 0;
  HEAP32[($6 + 24 | 0) >> 2] = HEAP32[($6 + 60 | 0) >> 2] | 0;
  HEAP32[($6 + 32 | 0) >> 2] = std____2__reverse_iterator_Button___20std____2____rewrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false___28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 16 | 0) >> 2] = HEAP32[($6 + 68 | 0) >> 2] | 0;
  HEAP32[($6 + 12 | 0) >> 2] = HEAP32[(($6 + 60 | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 20 | 0) >> 2] = std____2__reverse_iterator_Button___20std____2____rewrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false___28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29(HEAP32[($6 + 16 | 0) >> 2] | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type__20std____2__make_pair_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button_____2c_20std____2__reverse_iterator_Button_____29($0 | 0, $6 + 32 | 0 | 0, $6 + 20 | 0 | 0);
  __stack_pointer = $6 + 80 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_28std__declval_std____2__reverse_iterator_Button____28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false__2c_200__28std____2__reverse_iterator_Button___29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_5babi_v15007_5d_28std____2__reverse_iterator_Button___29(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____20std____2____move_impl_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20Button__2c_20Button__2c_200__28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $1;
  HEAP32[($6 + 40 | 0) >> 2] = $2;
  HEAP32[($6 + 36 | 0) >> 2] = $3;
  HEAP32[($6 + 32 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_28std__declval_Button___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true__2c_200__28Button__29(std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($6 + 44 | 0 | 0) | 0 | 0) | 0;
  HEAP32[($6 + 28 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_28std__declval_Button___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true__2c_200__28Button__29(std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($6 + 40 | 0 | 0) | 0 | 0) | 0;
  HEAP32[($6 + 24 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_28std__declval_Button___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true__2c_200__28Button__29(std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($6 + 36 | 0 | 0) | 0 | 0) | 0;
  HEAP32[($6 + 20 | 0) >> 2] = (HEAP32[($6 + 24 | 0) >> 2] | 0) + Math_imul(0 - (((HEAP32[($6 + 32 | 0) >> 2] | 0) - (HEAP32[($6 + 28 | 0) >> 2] | 0) | 0 | 0) / (24 | 0) | 0) | 0, 24) | 0;
  std____2__pair_Button__2c_20Button___20std____2____move_impl_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20Button_2c_20Button_2c_20void__28Button__2c_20Button__2c_20Button__29($6 + 12 | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0);
  std____2__reverse_iterator_Button____reverse_iterator_5babi_v15007_5d_28Button__29($6 + 8 | 0 | 0, Button__20std____2____rewrap_iter_5babi_v15007_5d_Button__2c_20Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true___28Button__2c_20Button__29(std____2__reverse_iterator_Button____base_5babi_v15007_5d_28_29_20const($6 + 36 | 0 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_Button______type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type__20std____2__make_pair_5babi_v15007_5d_std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button_____29($0 | 0, $6 + 40 | 0 | 0, $6 + 8 | 0 | 0);
  __stack_pointer = $6 + 48 | 0;
  return;
 }
 
 function std____2__reverse_iterator_Button___20std____2____rewrap_iter_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false___28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $10 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 12 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
  HEAP32[($4 + 28 | 0) >> 2] = std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____rewrap_5babi_v15007_5d_28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29(HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0;
  $10 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $10 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type__20std____2__make_pair_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button_____2c_20std____2__reverse_iterator_Button_____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button_____pair_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20_28void__290__28std____2__reverse_iterator_Button_____2c_20std____2__reverse_iterator_Button_____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_28std__declval_Button___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true__2c_200__28Button__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_5babi_v15007_5d_28Button__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_Button__2c_20Button___20std____2____move_impl_5babi_v15007_5d_std____2___ClassicAlgPolicy_2c_20Button_2c_20Button_2c_20void__28Button__2c_20Button__2c_20Button__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $1;
  HEAP32[($6 + 24 | 0) >> 2] = $2;
  HEAP32[($6 + 20 | 0) >> 2] = $3;
  HEAP32[($6 + 16 | 0) >> 2] = ((HEAP32[($6 + 24 | 0) >> 2] | 0) - (HEAP32[($6 + 28 | 0) >> 2] | 0) | 0 | 0) / (24 | 0) | 0;
  memmove(HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 24) | 0) | 0;
  HEAP32[($6 + 12 | 0) >> 2] = (HEAP32[($6 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 24) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[($6 + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 24) | 0;
  std____2__pair_std____2____unwrap_ref_decay_Button____type_2c_20std____2____unwrap_ref_decay_Button____type__20std____2__make_pair_5babi_v15007_5d_Button__2c_20Button___28Button____2c_20Button____29($0 | 0, $6 + 12 | 0 | 0, $6 + 8 | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function Button__20std____2____rewrap_iter_5babi_v15007_5d_Button__2c_20Button__2c_20std____2____unwrap_iter_impl_Button__2c_20true___28Button__2c_20Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2____unwrap_iter_impl_Button__2c_20true_____rewrap_5babi_v15007_5d_28Button__2c_20Button__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_std____2__reverse_iterator_Button______type_2c_20std____2____unwrap_ref_decay_std____2__reverse_iterator_Button_____type__20std____2__make_pair_5babi_v15007_5d_std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button____28std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button_____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button_____pair_5babi_v15007_5d_std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button___2c_20_28void__290__28std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button_____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____unwrap_5babi_v15007_5d_28std____2__reverse_iterator_Button___29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button_____pair_5babi_v15007_5d_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___2c_20_28void__290__28std____2__reverse_iterator_Button_____2c_20std____2__reverse_iterator_Button_____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function std____2____unwrap_iter_impl_std____2__reverse_iterator_Button___2c_20false_____rewrap_5babi_v15007_5d_28std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  HEAP32[($4 + 12 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____unwrap_iter_impl_Button__2c_20true_____unwrap_5babi_v15007_5d_28Button__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_Button____type_2c_20std____2____unwrap_ref_decay_Button____type__20std____2__make_pair_5babi_v15007_5d_Button__2c_20Button___28Button____2c_20Button____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_Button__2c_20Button____pair_5babi_v15007_5d_Button__2c_20Button__2c_20_28void__290__28Button____2c_20Button____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__pair_std____2__reverse_iterator_Button___2c_20std____2__reverse_iterator_Button_____pair_5babi_v15007_5d_std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button___2c_20_28void__290__28std____2__reverse_iterator_Button____2c_20std____2__reverse_iterator_Button_____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function std____2____unwrap_iter_impl_Button__2c_20true_____rewrap_5babi_v15007_5d_28Button__2c_20Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $14 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + Math_imul(((HEAP32[($4 + 8 | 0) >> 2] | 0) - (Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) | 0 | 0) / (24 | 0) | 0, 24) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__pair_Button__2c_20Button____pair_5babi_v15007_5d_Button__2c_20Button__2c_20_28void__290__28Button____2c_20Button____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______destruct_at_end_5babi_v15007_5d_28Button__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_Button_2c_20std____2__allocator_Button_______destruct_at_end_5babi_v15007_5d_28Button__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_Button_2c_20std____2__allocator_Button_______destruct_at_end_5babi_v15007_5d_28Button__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13 = std____2____split_buffer_Button_2c_20std____2__allocator_Button_______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -24 | 0;
    HEAP32[($5 + 8 | 0) >> 2] = $16;
    void_20std____2__allocator_traits_std____2__allocator_Button____destroy_5babi_v15007_5d_Button_2c_20void__28std____2__allocator_Button___2c_20Button__29($13 | 0, Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29($16 | 0) | 0 | 0);
    continue label$2;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button_____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Button__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction___ConstructTransaction_28std____2__vector_Section_2c_20std____2__allocator_Section____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 28) | 0;
  return $6 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section_20const__2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section_20const___28Section__2c_20Section_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Section_2c_20std____2__allocator_Section______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Section___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Section__2c_20std____2__allocator_Section_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Section____28std__nullptr_t___2c_20std____2__allocator_Section___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7 >> 2] = 0;
    break label$1;
   }
   std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Section____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Section___28std____2__allocator_Section___2c_20unsigned_20long_29($6 | 0, std____2____split_buffer_Section_2c_20std____2__allocator_Section_______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  }
  $26 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 28) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 20 | 0) >> 2] | 0, 28) | 0;
  HEAP32[(std____2____split_buffer_Section_2c_20std____2__allocator_Section_______end_cap_5babi_v15007_5d_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______swap_out_circular_buffer_28std____2____split_buffer_Section_2c_20std____2__allocator_Section_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $27 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_delete_5babi_v15007_5d_28_29_20const($5 | 0);
  $6 = std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2__reverse_iterator_Section____reverse_iterator_5babi_v15007_5d_28Section__29($4 + 16 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Section____reverse_iterator_5babi_v15007_5d_28Section__29($4 + 12 | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Section____reverse_iterator_5babi_v15007_5d_28Section__29($4 + 8 | 0 | 0, HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__reverse_iterator_Section___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Section__2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section____28std____2__allocator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___29($6 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27 = std____2__reverse_iterator_Section____base_5babi_v15007_5d_28_29_20const($4 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27;
  std____2__enable_if_is_move_constructible_Section____value_20___20is_move_assignable_Section____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Section___28Section___2c_20Section___29($5 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_Section____value_20___20is_move_assignable_Section____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Section___28Section___2c_20Section___29($5 + 4 | 0 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_Section____value_20___20is_move_assignable_Section____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Section___28Section___2c_20Section___29(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, std____2____split_buffer_Section_2c_20std____2__allocator_Section_______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0);
  void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($5 | 0);
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_Section_2c_20std____2__allocator_Section_____clear_5babi_v15007_5d_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_Section____deallocate_5babi_v15007_5d_28std____2__allocator_Section___2c_20Section__2c_20unsigned_20long_29(std____2____split_buffer_Section_2c_20std____2__allocator_Section_______alloc_5babi_v15007_5d_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_Section_2c_20std____2__allocator_Section_____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section_20const___28Section__2c_20Section_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Section__Section_28Section_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function Section__Section_28Section_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $35 = 0, $45 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[$5 >> 2] = $35;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $7 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + $7 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $45;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Button_2c_20std____2__allocator_Button____vector_28std____2__vector_Button_2c_20std____2__allocator_Button___20const__29($5 + 16 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____vector_28std____2__vector_Button_2c_20std____2__allocator_Button___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $47 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[($4 + 44 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  std____2__allocator_Button__20std____2__allocator_traits_std____2__allocator_Button____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Button__2c_20void_2c_20void__28std____2__allocator_Button__20const__29(std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2____compressed_pair_Button__2c_20std____2__allocator_Button______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Button___28std__nullptr_t___2c_20std____2__allocator_Button____29($5 + 8 | 0 | 0, $4 + 32 | 0 | 0, $4 + 31 | 0 | 0) | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector____destroy_vector_28std____2__vector_Button_2c_20std____2__allocator_Button____29($4 + 16 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__28std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_29($4 + 20 | 0 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($5 | 0);
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Button_2c_20std____2__allocator_Button____size_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Button_2c_20std____2__allocator_Button______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_Button____value_2c_20void___type_20std____2__vector_Button_2c_20std____2__allocator_Button______construct_at_end_Button___28Button__2c_20Button__2c_20unsigned_20long_29($5 | 0, HEAP32[(HEAP32[($4 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  }
  std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 20 | 0 | 0);
  std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  $47 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $47 | 0;
 }
 
 function std____2__allocator_Button__20std____2__allocator_traits_std____2__allocator_Button____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Button__2c_20void_2c_20void__28std____2__allocator_Button__20const__29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_Button__2c_20std____2__allocator_Button______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Button___28std__nullptr_t___2c_20std____2__allocator_Button____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Button__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Button__2c_20void__28std____2__allocator_Button____29($6 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__28std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_29($0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button______vallocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_Button_2c_20std____2__allocator_Button____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Button_2c_20std____2__allocator_Button______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Button____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Button___28std____2__allocator_Button___2c_20unsigned_20long_29($4 | 0, std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  $22 = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 4 | 0) >> 2] | 0, 24) | 0;
  HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $22;
  std____2__vector_Button_2c_20std____2__allocator_Button______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_Button____value_2c_20void___type_20std____2__vector_Button_2c_20std____2__allocator_Button______construct_at_end_Button___28Button__2c_20Button__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction___ConstructTransaction_28std____2__vector_Button_2c_20std____2__allocator_Button____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = Button__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Button__2c_20Button__2c_20Button__2c_20Button___28std____2__allocator_Button___2c_20Button__2c_20Button__2c_20Button__29(std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_Button_2c_20std____2__allocator_Button_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_____complete_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector______transaction_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($4 | 0);
  }
  $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Button__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Button__2c_20void__28std____2__allocator_Button____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____transaction_std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Button_2c_20std____2__allocator_Button______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP8[($5 + 4 | 0) >> 0] = 0;
  return $5 | 0;
 }
 
 function Button__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Button__2c_20Button__2c_20Button__2c_20Button___28std____2__allocator_Button___2c_20Button__2c_20Button__2c_20Button__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $25 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Button____construct_5babi_v15007_5d_Button_2c_20Button__2c_20void__28std____2__allocator_Button___2c_20Button__2c_20Button__29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, Button__20std____2____to_address_5babi_v15007_5d_Button__28Button__29(HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($6 + 24 | 0) >> 2] = (HEAP32[($6 + 24 | 0) >> 2] | 0) + 24 | 0;
    HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 16 | 0) >> 2] | 0) + 24 | 0;
    continue label$2;
   };
  }
  $25 = HEAP32[($6 + 16 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $25 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Button____construct_5babi_v15007_5d_Button_2c_20Button__2c_20void__28std____2__allocator_Button___2c_20Button__2c_20Button__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Button___construct_5babi_v15007_5d_Button_2c_20Button___28Button__2c_20Button__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_Button___construct_5babi_v15007_5d_Button_2c_20Button___28Button__2c_20Button__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $11 = 0, $34 = 0, $44 = 0, $54 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $7 = HEAP32[($5 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[i64toi32_i32$0 >> 2] = $34;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8 = 16;
  i64toi32_i32$2 = i64toi32_i32$2 + $8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44 = i64toi32_i32$1;
  i64toi32_i32$1 = $6 + $8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $44;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $11 = 8;
  i64toi32_i32$2 = $7 + $11 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54 = i64toi32_i32$0;
  i64toi32_i32$0 = $6 + $11 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_Section____max_size_5babi_v15007_5d_std____2__allocator_Section__2c_20void__28std____2__allocator_Section__20const__29(std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Section____28std__nullptr_t___2c_20std____2__allocator_Section___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Section__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Section___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Section___2c_20void__28std____2__allocator_Section___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Section____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Section___28std____2__allocator_Section___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_Section___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__reverse_iterator_Section____reverse_iterator_5babi_v15007_5d_28Section__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Section___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Section__2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section____28std____2__allocator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___2c_20std____2__reverse_iterator_Section___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Section__2c_20Section___28std____2__reverse_iterator_Section___20const__2c_20std____2__reverse_iterator_Section___20const__29($6 + 24 | 0 | 0, $6 + 20 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section_2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section___29(HEAP32[($6 + 12 | 0) >> 2] | 0 | 0, std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Section_______call_28declval_std____2__reverse_iterator_Section___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Section___2c_20void__28std____2__reverse_iterator_Section___20const__29($6 + 16 | 0 | 0) | 0 | 0, std____2__reverse_iterator_Section____operator__5babi_v15007_5d_28_29_20const($6 + 24 | 0 | 0) | 0 | 0);
    std____2__reverse_iterator_Section____operator___5babi_v15007_5d_28_29($6 + 24 | 0 | 0) | 0;
    std____2__reverse_iterator_Section____operator___5babi_v15007_5d_28_29($6 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($6 + 28 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__reverse_iterator_Section____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__enable_if_is_move_constructible_Section____value_20___20is_move_assignable_Section____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Section___28Section___2c_20Section___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 28) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Section_2c_20std____2__allocator_Section____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 28) | 0 | 0, (std____2__vector_Section_2c_20std____2__allocator_Section____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 28) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_____clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_Section_2c_20std____2__allocator_Section_______destruct_at_end_5babi_v15007_5d_28Section__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_Section_2c_20std____2__allocator_Section_______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (28 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_Section____max_size_5babi_v15007_5d_std____2__allocator_Section__2c_20void__28std____2__allocator_Section__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_Section___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Section___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 153391689 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Section___2c_20void__28std____2__allocator_Section___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Section___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_Section____max_size_5babi_v15007_5d_std____2__allocator_Section__2c_20void__28std____2__allocator_Section__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 28) | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_Section___2c_201_2c_20false_____get_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section___2c_201_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Section__2c_20Section___28std____2__reverse_iterator_Section___20const__2c_20std____2__reverse_iterator_Section___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2__reverse_iterator_Section____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != (std____2__reverse_iterator_Section____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Section_______call_28declval_std____2__reverse_iterator_Section___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Section___2c_20void__28std____2__reverse_iterator_Section___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____to_address_helper_std____2__reverse_iterator_Section___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Section___20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Section____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8 = (HEAP32[($3 + 8 | 0) >> 2] | 0) + -28 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $8;
  return $8 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section_2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section__28Section__2c_20Section___29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__reverse_iterator_Section____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -28 | 0;
  return $4 | 0;
 }
 
 function void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section__28Section__2c_20Section___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Section__Section_28Section___29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____to_address_helper_std____2__reverse_iterator_Section___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Section___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29(std____2__reverse_iterator_Section____operator___5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function Section__Section_28Section___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $35 = 0, $45 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[$5 >> 2] = $35;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $7 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + $7 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $45;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Button_2c_20std____2__allocator_Button____vector_5babi_v15007_5d_28std____2__vector_Button_2c_20std____2__allocator_Button_____29($5 + 16 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Button_2c_20std____2__allocator_Button____vector_5babi_v15007_5d_28std____2__vector_Button_2c_20std____2__allocator_Button_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  std____2____compressed_pair_Button__2c_20std____2__allocator_Button______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Button___28std__nullptr_t___2c_20std____2__allocator_Button____29($5 + 8 | 0 | 0, $4 + 4 | 0 | 0, std____2__vector_Button_2c_20std____2__allocator_Button______alloc_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____29($5 | 0);
  void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____2c_20std____2__vector_Button_2c_20std____2__allocator_Button____29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $23 = HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $23;
  HEAP32[(std____2__vector_Button_2c_20std____2__allocator_Button______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Button_2c_20std____2__allocator_Button____28std____2__vector_Button_2c_20std____2__allocator_Button____2c_20std____2__vector_Button_2c_20std____2__allocator_Button____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2__reverse_iterator_Section____operator___5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__reverse_iterator_Section____operator__5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______destruct_at_end_5babi_v15007_5d_28Section__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_Section_2c_20std____2__allocator_Section_______destruct_at_end_5babi_v15007_5d_28Section__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_Section_2c_20std____2__allocator_Section_______destruct_at_end_5babi_v15007_5d_28Section__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13 = std____2____split_buffer_Section_2c_20std____2__allocator_Section_______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -28 | 0;
    HEAP32[($5 + 8 | 0) >> 2] = $16;
    void_20std____2__allocator_traits_std____2__allocator_Section____destroy_5babi_v15007_5d_Section_2c_20void__28std____2__allocator_Section___2c_20Section__29($13 | 0, Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29($16 | 0) | 0 | 0);
    continue label$2;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section_____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Section__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction___ConstructTransaction_28std____2__vector_Divider_2c_20std____2__allocator_Divider____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 40) | 0;
  return $6 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Divider___construct_5babi_v15007_5d_Divider_2c_20Divider__28Divider__2c_20Divider___29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Divider_2c_20std____2__allocator_Divider______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Divider___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Divider____28std__nullptr_t___2c_20std____2__allocator_Divider___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7 >> 2] = 0;
    break label$1;
   }
   std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Divider____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Divider___28std____2__allocator_Divider___2c_20unsigned_20long_29($6 | 0, std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  }
  $26 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 40) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 20 | 0) >> 2] | 0, 40) | 0;
  HEAP32[(std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______end_cap_5babi_v15007_5d_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______swap_out_circular_buffer_28std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $27 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_delete_5babi_v15007_5d_28_29_20const($5 | 0);
  $6 = std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2__reverse_iterator_Divider____reverse_iterator_5babi_v15007_5d_28Divider__29($4 + 16 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Divider____reverse_iterator_5babi_v15007_5d_28Divider__29($4 + 12 | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Divider____reverse_iterator_5babi_v15007_5d_28Divider__29($4 + 8 | 0 | 0, HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__reverse_iterator_Divider___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Divider__2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider____28std____2__allocator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___29($6 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27 = std____2__reverse_iterator_Divider____base_5babi_v15007_5d_28_29_20const($4 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27;
  std____2__enable_if_is_move_constructible_Divider____value_20___20is_move_assignable_Divider____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Divider___28Divider___2c_20Divider___29($5 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_Divider____value_20___20is_move_assignable_Divider____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Divider___28Divider___2c_20Divider___29($5 + 4 | 0 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_Divider____value_20___20is_move_assignable_Divider____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Divider___28Divider___2c_20Divider___29(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0);
  void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($5 | 0);
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____clear_5babi_v15007_5d_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_Divider____deallocate_5babi_v15007_5d_28std____2__allocator_Divider___2c_20Divider__2c_20unsigned_20long_29(std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______alloc_5babi_v15007_5d_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_Divider___construct_5babi_v15007_5d_Divider_2c_20Divider__28Divider__2c_20Divider___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Divider__Divider_28Divider___29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function Divider__Divider_28Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $22 = 0, $23 = 0, i64toi32_i32$1 = 0, $80 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP16[$5 >> 1] = HEAPU16[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 1] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____29($5 + 4 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____29($5 + 16 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  $22 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 28 | 0;
  i64toi32_i32$0 = HEAP32[$22 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($22 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$0;
  i64toi32_i32$0 = $5 + 28 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $80;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $23 = 8;
  HEAP8[(i64toi32_i32$0 + $23 | 0) >> 0] = HEAPU8[($22 + $23 | 0) >> 0] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_5babi_v15007_5d_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_unsigned_20long___28std__nullptr_t___2c_20std____2__allocator_unsigned_20long____29($5 + 8 | 0 | 0, $4 + 4 | 0 | 0, std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($5 | 0);
  void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____2c_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $23 = HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $23;
  HEAP32[(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_unsigned_20long___28std__nullptr_t___2c_20std____2__allocator_unsigned_20long____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long____29($6 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____2c_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_unsigned_20long__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_Divider____max_size_5babi_v15007_5d_std____2__allocator_Divider__2c_20void__28std____2__allocator_Divider__20const__29(std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Divider____28std__nullptr_t___2c_20std____2__allocator_Divider___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Divider___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Divider___2c_20void__28std____2__allocator_Divider___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Divider____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Divider___28std____2__allocator_Divider___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_Divider___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__reverse_iterator_Divider____reverse_iterator_5babi_v15007_5d_28Divider__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Divider___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Divider__2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider____28std____2__allocator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___2c_20std____2__reverse_iterator_Divider___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Divider__2c_20Divider___28std____2__reverse_iterator_Divider___20const__2c_20std____2__reverse_iterator_Divider___20const__29($6 + 24 | 0 | 0, $6 + 20 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider___29(HEAP32[($6 + 12 | 0) >> 2] | 0 | 0, std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Divider_______call_28declval_std____2__reverse_iterator_Divider___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Divider___2c_20void__28std____2__reverse_iterator_Divider___20const__29($6 + 16 | 0 | 0) | 0 | 0, std____2__reverse_iterator_Divider____operator__5babi_v15007_5d_28_29_20const($6 + 24 | 0 | 0) | 0 | 0);
    std____2__reverse_iterator_Divider____operator___5babi_v15007_5d_28_29($6 + 24 | 0 | 0) | 0;
    std____2__reverse_iterator_Divider____operator___5babi_v15007_5d_28_29($6 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($6 + 28 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__reverse_iterator_Divider____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__enable_if_is_move_constructible_Divider____value_20___20is_move_assignable_Divider____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Divider___28Divider___2c_20Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 40) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Divider_2c_20std____2__allocator_Divider____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 40) | 0 | 0, (std____2__vector_Divider_2c_20std____2__allocator_Divider____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 40) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______destruct_at_end_5babi_v15007_5d_28Divider__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (40 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_Divider____max_size_5babi_v15007_5d_std____2__allocator_Divider__2c_20void__28std____2__allocator_Divider__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_Divider___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Divider___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 107374182 | 0;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Divider___2c_20void__28std____2__allocator_Divider___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Divider___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_Divider____max_size_5babi_v15007_5d_std____2__allocator_Divider__2c_20void__28std____2__allocator_Divider__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 40) | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_Divider___2c_201_2c_20false_____get_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider___2c_201_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Divider__2c_20Divider___28std____2__reverse_iterator_Divider___20const__2c_20std____2__reverse_iterator_Divider___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2__reverse_iterator_Divider____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != (std____2__reverse_iterator_Divider____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Divider_______call_28declval_std____2__reverse_iterator_Divider___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Divider___2c_20void__28std____2__reverse_iterator_Divider___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____to_address_helper_std____2__reverse_iterator_Divider___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Divider___20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Divider____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8 = (HEAP32[($3 + 8 | 0) >> 2] | 0) + -40 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $8;
  return $8 | 0;
 }
 
 function std____2__reverse_iterator_Divider____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -40 | 0;
  return $4 | 0;
 }
 
 function std____2____to_address_helper_std____2__reverse_iterator_Divider___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Divider___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29(std____2__reverse_iterator_Divider____operator___5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2__reverse_iterator_Divider____operator___5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__reverse_iterator_Divider____operator__5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______destruct_at_end_5babi_v15007_5d_28Divider__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______destruct_at_end_5babi_v15007_5d_28Divider__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______destruct_at_end_5babi_v15007_5d_28Divider__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13 = std____2____split_buffer_Divider_2c_20std____2__allocator_Divider_______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -40 | 0;
    HEAP32[($5 + 8 | 0) >> 2] = $16;
    void_20std____2__allocator_traits_std____2__allocator_Divider____destroy_5babi_v15007_5d_Divider_2c_20void__28std____2__allocator_Divider___2c_20Divider__29($13 | 0, Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29($16 | 0) | 0 | 0);
    continue label$2;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider_____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  std____2__allocator_unsigned_20long___allocator_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP8[($5 + 4 | 0) >> 0] = 0;
  return $5 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_unsigned_20long____max_size_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long__20const__29(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_unsigned_20long____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_unsigned_20long___28std____2__allocator_unsigned_20long___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_unsigned_20long___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0) << 2 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0) << 2 | 0) | 0 | 0, (std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + ((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction___ConstructTransaction_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
  return $6 | 0;
 }
 
 function unsigned_20long__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20unsigned_20long_2c_20unsigned_20long_2c_20_28void__290__28std____2__allocator_unsigned_20long___2c_20unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $10 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  $10 = unsigned_20long__20std____2__copy_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29(HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0) | 0;
  __stack_pointer = $6 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__allocator_unsigned_20long___allocator_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____non_trivial_if_true_2c_20std____2__allocator_unsigned_20long______non_trivial_if_5babi_v15007_5d_28_29($4 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_unsigned_20long______non_trivial_if_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_unsigned_20long____max_size_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_unsigned_20long___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_unsigned_20long___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_unsigned_20long____max_size_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29((HEAP32[($4 + 8 | 0) >> 2] | 0) << 2 | 0 | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2__allocator_unsigned_20long___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 1073741823 | 0;
 }
 
 function std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_unsigned_20long__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function unsigned_20long__20std____2__copy_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long___28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $12 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  std____2__pair_unsigned_20long_20const__2c_20unsigned_20long___20std____2____copy_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__2c_200__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($5 + 12 | 0 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
  $12 = HEAP32[($5 + 16 | 0) >> 2] | 0;
  __stack_pointer = $5 + 32 | 0;
  return $12 | 0;
 }
 
 function std____2__pair_unsigned_20long_20const__2c_20unsigned_20long___20std____2____copy_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__2c_200__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $1;
  HEAP32[($6 + 40 | 0) >> 2] = $2;
  HEAP32[($6 + 36 | 0) >> 2] = $3;
  std____2__pair_unsigned_20long_20const__2c_20unsigned_20long_20const___20std____2____unwrap_range_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__29($6 + 28 | 0 | 0, HEAP32[($6 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6 + 40 | 0) >> 2] | 0 | 0);
  std____2__pair_unsigned_20long_20const__2c_20unsigned_20long___20std____2____copy_impl_5babi_v15007_5d_unsigned_20long_20const_2c_20unsigned_20long_2c_20void__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($6 + 20 | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6 + 32 | 0) >> 2] | 0 | 0, decltype_28std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____unwrap_28std__declval_unsigned_20long___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_unsigned_20long__2c_20std____2____unwrap_iter_impl_unsigned_20long__2c_20true__2c_200__28unsigned_20long__29(HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[($6 + 16 | 0) >> 2] = unsigned_20long_20const__20std____2____rewrap_range_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__29(HEAP32[($6 + 44 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 12 | 0) >> 2] = unsigned_20long__20std____2____rewrap_iter_5babi_v15007_5d_unsigned_20long__2c_20unsigned_20long__2c_20std____2____unwrap_iter_impl_unsigned_20long__2c_20true___28unsigned_20long__2c_20unsigned_20long__29(HEAP32[($6 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_unsigned_20long_20const____type_2c_20std____2____unwrap_ref_decay_unsigned_20long____type__20std____2__make_pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long___28unsigned_20long_20const____2c_20unsigned_20long____29($0 | 0, $6 + 16 | 0 | 0, $6 + 12 | 0 | 0);
  __stack_pointer = $6 + 48 | 0;
  return;
 }
 
 function std____2__pair_unsigned_20long_20const__2c_20unsigned_20long_20const___20std____2____unwrap_range_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[($5 + 4 | 0) >> 2] = decltype_28std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____unwrap_28std__declval_unsigned_20long_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_unsigned_20long_20const__2c_20std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true__2c_200__28unsigned_20long_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5 >> 2] = decltype_28std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____unwrap_28std__declval_unsigned_20long_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_unsigned_20long_20const__2c_20std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true__2c_200__28unsigned_20long_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_unsigned_20long_20const____type_2c_20std____2____unwrap_ref_decay_unsigned_20long_20const____type__20std____2__make_pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const____2c_20unsigned_20long_20const____29($0 | 0, $5 + 4 | 0 | 0, $5 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____unwrap_28std__declval_unsigned_20long___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_unsigned_20long__2c_20std____2____unwrap_iter_impl_unsigned_20long__2c_20true__2c_200__28unsigned_20long__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____unwrap_5babi_v15007_5d_28unsigned_20long__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_unsigned_20long_20const__2c_20unsigned_20long___20std____2____copy_impl_5babi_v15007_5d_unsigned_20long_20const_2c_20unsigned_20long_2c_20void__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20unsigned_20long__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $1;
  HEAP32[($6 + 24 | 0) >> 2] = $2;
  HEAP32[($6 + 20 | 0) >> 2] = $3;
  HEAP32[($6 + 16 | 0) >> 2] = ((HEAP32[($6 + 24 | 0) >> 2] | 0) - (HEAP32[($6 + 28 | 0) >> 2] | 0) | 0) >> 2 | 0;
  label$1 : {
   if (!((HEAP32[($6 + 16 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   memmove(HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($6 + 16 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  }
  HEAP32[($6 + 12 | 0) >> 2] = (HEAP32[($6 + 28 | 0) >> 2] | 0) + ((HEAP32[($6 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[($6 + 20 | 0) >> 2] | 0) + ((HEAP32[($6 + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
  std____2__pair_std____2____unwrap_ref_decay_unsigned_20long_20const____type_2c_20std____2____unwrap_ref_decay_unsigned_20long____type__20std____2__make_pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long___28unsigned_20long_20const____2c_20unsigned_20long____29($0 | 0, $6 + 12 | 0 | 0, $6 + 8 | 0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function unsigned_20long_20const__20std____2____rewrap_range_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = unsigned_20long_20const__20std____2____rewrap_iter_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true___28unsigned_20long_20const__2c_20unsigned_20long_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long__20std____2____rewrap_iter_5babi_v15007_5d_unsigned_20long__2c_20unsigned_20long__2c_20std____2____unwrap_iter_impl_unsigned_20long__2c_20true___28unsigned_20long__2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____rewrap_5babi_v15007_5d_28unsigned_20long__2c_20unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_unsigned_20long_20const____type_2c_20std____2____unwrap_ref_decay_unsigned_20long____type__20std____2__make_pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long___28unsigned_20long_20const____2c_20unsigned_20long____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_unsigned_20long_20const__2c_20unsigned_20long____pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long__2c_20_28void__290__28unsigned_20long_20const____2c_20unsigned_20long____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function decltype_28std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____unwrap_28std__declval_unsigned_20long_20const___28_29_29_29_20std____2____unwrap_iter_5babi_v15007_5d_unsigned_20long_20const__2c_20std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true__2c_200__28unsigned_20long_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____unwrap_5babi_v15007_5d_28unsigned_20long_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_unsigned_20long_20const____type_2c_20std____2____unwrap_ref_decay_unsigned_20long_20const____type__20std____2__make_pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const___28unsigned_20long_20const____2c_20unsigned_20long_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  std____2__pair_unsigned_20long_20const__2c_20unsigned_20long_20const____pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20_28void__290__28unsigned_20long_20const____2c_20unsigned_20long_20const____29($0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____unwrap_5babi_v15007_5d_28unsigned_20long__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__pair_unsigned_20long_20const__2c_20unsigned_20long____pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long__2c_20_28void__290__28unsigned_20long_20const____2c_20unsigned_20long____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function unsigned_20long_20const__20std____2____rewrap_iter_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true___28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $7 = std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____rewrap_5babi_v15007_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____unwrap_iter_impl_unsigned_20long__2c_20true_____rewrap_5babi_v15007_5d_28unsigned_20long__2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $14 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4 + 8 | 0) >> 2] | 0) - (unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0) << 2 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2__pair_unsigned_20long_20const__2c_20unsigned_20long_20const____pair_5babi_v15007_5d_unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20_28void__290__28unsigned_20long_20const____2c_20unsigned_20long_20const____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return $6 | 0;
 }
 
 function std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____unwrap_5babi_v15007_5d_28unsigned_20long_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = unsigned_20long_20const__20std____2____to_address_5babi_v15007_5d_unsigned_20long_20const__28unsigned_20long_20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function unsigned_20long_20const__20std____2____to_address_5babi_v15007_5d_unsigned_20long_20const__28unsigned_20long_20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____unwrap_iter_impl_unsigned_20long_20const__2c_20true_____rewrap_5babi_v15007_5d_28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $14 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $14 = (HEAP32[($4 + 12 | 0) >> 2] | 0) + ((((HEAP32[($4 + 8 | 0) >> 2] | 0) - (unsigned_20long_20const__20std____2____to_address_5babi_v15007_5d_unsigned_20long_20const__28unsigned_20long_20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) | 0) >> 2 | 0) << 2 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $14 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer_____ConstructTransaction___ConstructTransaction_28std____2__vector_Layer_2c_20std____2__allocator_Layer____2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  HEAP32[$6 >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  HEAP32[($6 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 4 | 0) >> 2] | 0, 44) | 0;
  return $6 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Layer____construct_5babi_v15007_5d_Layer_2c_20Layer_20const__2c_20void__28std____2__allocator_Layer___2c_20Layer__2c_20Layer_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Layer___construct_5babi_v15007_5d_Layer_2c_20Layer_20const___28Layer__2c_20Layer_20const__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer_____ConstructTransaction____ConstructTransaction_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return $4 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______recommend_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $36 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____max_size_28_29_20const($5 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Layer_2c_20std____2__allocator_Layer______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($4 + 8 | 0 | 0, $4 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $36 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $36 | 0;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______split_buffer_28unsigned_20long_2c_20unsigned_20long_2c_20std____2__allocator_Layer___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $26 = 0, $31 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $0;
  HEAP32[($6 + 20 | 0) >> 2] = $1;
  HEAP32[($6 + 16 | 0) >> 2] = $2;
  HEAP32[($6 + 12 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[($6 + 28 | 0) >> 2] = $7;
  HEAP32[($6 + 8 | 0) >> 2] = 0;
  std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Layer____28std__nullptr_t___2c_20std____2__allocator_Layer___29($7 + 12 | 0 | 0, $6 + 8 | 0 | 0, HEAP32[($6 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($6 + 20 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[$7 >> 2] = 0;
    break label$1;
   }
   std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Layer____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Layer___28std____2__allocator_Layer___2c_20unsigned_20long_29($6 | 0, std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2] | 0;
   HEAP32[($6 + 20 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  }
  $26 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 16 | 0) >> 2] | 0, 44) | 0;
  HEAP32[($7 + 8 | 0) >> 2] = $26;
  HEAP32[($7 + 4 | 0) >> 2] = $26;
  $31 = (HEAP32[$7 >> 2] | 0) + Math_imul(HEAP32[($6 + 20 | 0) >> 2] | 0, 44) | 0;
  HEAP32[(std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______end_cap_5babi_v15007_5d_28_29($7 | 0) | 0) >> 2] = $31;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______swap_out_circular_buffer_28std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $27 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 28 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_delete_5babi_v15007_5d_28_29_20const($5 | 0);
  $6 = std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
  std____2__reverse_iterator_Layer____reverse_iterator_5babi_v15007_5d_28Layer__29($4 + 16 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Layer____reverse_iterator_5babi_v15007_5d_28Layer__29($4 + 12 | 0 | 0, HEAP32[$5 >> 2] | 0 | 0) | 0;
  std____2__reverse_iterator_Layer____reverse_iterator_5babi_v15007_5d_28Layer__29($4 + 8 | 0 | 0, HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4 + 20 | 0) >> 2] = std____2__reverse_iterator_Layer___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Layer__2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer____28std____2__allocator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___29($6 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
  $27 = std____2__reverse_iterator_Layer____base_5babi_v15007_5d_28_29_20const($4 + 20 | 0 | 0) | 0;
  HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] = $27;
  std____2__enable_if_is_move_constructible_Layer____value_20___20is_move_assignable_Layer____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Layer___28Layer___2c_20Layer___29($5 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0 | 0);
  std____2__enable_if_is_move_constructible_Layer____value_20___20is_move_assignable_Layer____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Layer___28Layer___2c_20Layer___29($5 + 4 | 0 | 0, (HEAP32[($4 + 24 | 0) >> 2] | 0) + 8 | 0 | 0);
  std____2__enable_if_is_move_constructible_Layer____value_20___20is_move_assignable_Layer____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Layer___28Layer___2c_20Layer___29(std____2__vector_Layer_2c_20std____2__allocator_Layer______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4 + 24 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer____size_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0);
  void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($5 | 0);
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer________split_buffer_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____clear_5babi_v15007_5d_28_29($4 | 0);
  label$1 : {
   if (!((HEAP32[$4 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   std____2__allocator_traits_std____2__allocator_Layer____deallocate_5babi_v15007_5d_28std____2__allocator_Layer___2c_20Layer__2c_20unsigned_20long_29(std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______alloc_5babi_v15007_5d_28_29($4 | 0) | 0 | 0, HEAP32[$4 >> 2] | 0 | 0, std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____capacity_5babi_v15007_5d_28_29_20const($4 | 0) | 0 | 0);
  }
  $15 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function void_20std____2__allocator_Layer___construct_5babi_v15007_5d_Layer_2c_20Layer_20const___28Layer__2c_20Layer_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Layer__Layer_28Layer_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function Layer__Layer_28Layer_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $11 = 0, $44 = 0, $64 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[$5 >> 2] = $44;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7 = 16;
  HEAP8[($5 + $7 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + $7 | 0) >> 0] | 0;
  $11 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $11 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $64 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + $11 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $64;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Section_2c_20std____2__allocator_Section____vector_28std____2__vector_Section_2c_20std____2__allocator_Section___20const__29($5 + 20 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_28std____2__vector_Divider_2c_20std____2__allocator_Divider___20const__29($5 + 32 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____vector_28std____2__vector_Section_2c_20std____2__allocator_Section___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $47 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[($4 + 44 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  std____2__allocator_Section__20std____2__allocator_traits_std____2__allocator_Section____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Section__2c_20void_2c_20void__28std____2__allocator_Section__20const__29(std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2____compressed_pair_Section__2c_20std____2__allocator_Section______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Section___28std__nullptr_t___2c_20std____2__allocator_Section____29($5 + 8 | 0 | 0, $4 + 32 | 0 | 0, $4 + 31 | 0 | 0) | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector____destroy_vector_28std____2__vector_Section_2c_20std____2__allocator_Section____29($4 + 16 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__28std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_29($4 + 20 | 0 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($5 | 0);
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Section_2c_20std____2__allocator_Section____size_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Section_2c_20std____2__allocator_Section______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_Section____value_2c_20void___type_20std____2__vector_Section_2c_20std____2__allocator_Section______construct_at_end_Section___28Section__2c_20Section__2c_20unsigned_20long_29($5 | 0, HEAP32[(HEAP32[($4 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  }
  std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 20 | 0 | 0);
  std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  $47 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $47 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_28std____2__vector_Divider_2c_20std____2__allocator_Divider___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $47 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[($4 + 44 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  std____2__allocator_Divider__20std____2__allocator_traits_std____2__allocator_Divider____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Divider__2c_20void_2c_20void__28std____2__allocator_Divider__20const__29(std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Divider___28std__nullptr_t___2c_20std____2__allocator_Divider____29($5 + 8 | 0 | 0, $4 + 32 | 0 | 0, $4 + 31 | 0 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector____destroy_vector_28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($4 + 16 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__28std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_29($4 + 20 | 0 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($5 | 0);
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_Divider_2c_20std____2__allocator_Divider____size_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Divider_2c_20std____2__allocator_Divider______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_Divider____value_2c_20void___type_20std____2__vector_Divider_2c_20std____2__allocator_Divider______construct_at_end_Divider___28Divider__2c_20Divider__2c_20unsigned_20long_29($5 | 0, HEAP32[(HEAP32[($4 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  }
  std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 20 | 0 | 0);
  std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  $47 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $47 | 0;
 }
 
 function std____2__allocator_Section__20std____2__allocator_traits_std____2__allocator_Section____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Section__2c_20void_2c_20void__28std____2__allocator_Section__20const__29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_Section__2c_20std____2__allocator_Section______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Section___28std__nullptr_t___2c_20std____2__allocator_Section____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Section__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Section__2c_20void__28std____2__allocator_Section____29($6 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__28std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_29($0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section______vallocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_Section_2c_20std____2__allocator_Section____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Section_2c_20std____2__allocator_Section______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Section____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Section___28std____2__allocator_Section___2c_20unsigned_20long_29($4 | 0, std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  $22 = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 4 | 0) >> 2] | 0, 28) | 0;
  HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $22;
  std____2__vector_Section_2c_20std____2__allocator_Section______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_Section____value_2c_20void___type_20std____2__vector_Section_2c_20std____2__allocator_Section______construct_at_end_Section___28Section__2c_20Section__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction___ConstructTransaction_28std____2__vector_Section_2c_20std____2__allocator_Section____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = Section__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Section__2c_20Section__2c_20Section__2c_20Section___28std____2__allocator_Section___2c_20Section__2c_20Section__2c_20Section__29(std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_Section_2c_20std____2__allocator_Section_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_____complete_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector______transaction_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($4 | 0);
  }
  $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2__allocator_Divider__20std____2__allocator_traits_std____2__allocator_Divider____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_Divider__2c_20void_2c_20void__28std____2__allocator_Divider__20const__29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Divider___28std__nullptr_t___2c_20std____2__allocator_Divider____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Divider__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Divider__2c_20void__28std____2__allocator_Divider____29($6 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__28std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_29($0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider______vallocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $22 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (std____2__vector_Divider_2c_20std____2__allocator_Divider____max_size_28_29_20const($5 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_Divider_2c_20std____2__allocator_Divider______throw_length_error_5babi_v15007_5d_28_29_20const($5 | 0);
   wasm2js_trap();
  }
  std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Divider____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Divider___28std____2__allocator_Divider___2c_20unsigned_20long_29($4 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($5 | 0) | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  $22 = (HEAP32[$5 >> 2] | 0) + Math_imul(HEAP32[($4 + 4 | 0) >> 2] | 0, 40) | 0;
  HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $22;
  std____2__vector_Divider_2c_20std____2__allocator_Divider______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($5 | 0, 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_Divider____value_2c_20void___type_20std____2__vector_Divider_2c_20std____2__allocator_Divider______construct_at_end_Divider___28Divider__2c_20Divider__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction___ConstructTransaction_28std____2__vector_Divider_2c_20std____2__allocator_Divider____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = Divider__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Divider__2c_20Divider__2c_20Divider__2c_20Divider___28std____2__allocator_Divider___2c_20Divider__2c_20Divider__2c_20Divider__29(std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_____complete_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] = 1;
  return;
 }
 
 function std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector______transaction_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $4;
  label$1 : {
   if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector__operator_28_29_5babi_v15007_5d_28_29($4 | 0);
  }
  $8 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $8 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Section__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Section__2c_20void__28std____2__allocator_Section____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____transaction_std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Section_2c_20std____2__allocator_Section______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP8[($5 + 4 | 0) >> 0] = 0;
  return $5 | 0;
 }
 
 function Section__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Section__2c_20Section__2c_20Section__2c_20Section___28std____2__allocator_Section___2c_20Section__2c_20Section__2c_20Section__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $25 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section__2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section__29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, Section__20std____2____to_address_5babi_v15007_5d_Section__28Section__29(HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($6 + 24 | 0) >> 2] = (HEAP32[($6 + 24 | 0) >> 2] | 0) + 28 | 0;
    HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 16 | 0) >> 2] | 0) + 28 | 0;
    continue label$2;
   };
  }
  $25 = HEAP32[($6 + 16 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $25 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Section____construct_5babi_v15007_5d_Section_2c_20Section__2c_20void__28std____2__allocator_Section___2c_20Section__2c_20Section__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section___28Section__2c_20Section__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_Section___construct_5babi_v15007_5d_Section_2c_20Section___28Section__2c_20Section__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Section__Section_28Section_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Divider__2c_201_2c_20true_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Divider__2c_20void__28std____2__allocator_Divider____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return HEAP32[($4 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____transaction_std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_____transaction_5babi_v15007_5d_28std____2__vector_Divider_2c_20std____2__allocator_Divider______destroy_vector_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP8[($5 + 4 | 0) >> 0] = 0;
  return $5 | 0;
 }
 
 function Divider__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_Divider__2c_20Divider__2c_20Divider__2c_20Divider___28std____2__allocator_Divider___2c_20Divider__2c_20Divider__2c_20Divider__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $25 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider__2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider__29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, Divider__20std____2____to_address_5babi_v15007_5d_Divider__28Divider__29(HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($6 + 24 | 0) >> 2] = (HEAP32[($6 + 24 | 0) >> 2] | 0) + 40 | 0;
    HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 16 | 0) >> 2] | 0) + 40 | 0;
    continue label$2;
   };
  }
  $25 = HEAP32[($6 + 16 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $25 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Divider____construct_5babi_v15007_5d_Divider_2c_20Divider__2c_20void__28std____2__allocator_Divider___2c_20Divider__2c_20Divider__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Divider___construct_5babi_v15007_5d_Divider_2c_20Divider___28Divider__2c_20Divider__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_Divider___construct_5babi_v15007_5d_Divider_2c_20Divider___28Divider__2c_20Divider__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Divider__Divider_28Divider_20const__29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function Divider__Divider_28Divider_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$0 = 0, $22 = 0, $23 = 0, i64toi32_i32$1 = 0, $80 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP16[$5 >> 1] = HEAPU16[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 1] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long___20const__29($5 + 4 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long___20const__29($5 + 16 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 16 | 0 | 0) | 0;
  $22 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 28 | 0;
  i64toi32_i32$0 = HEAP32[$22 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($22 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$0;
  i64toi32_i32$0 = $5 + 28 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $80;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $23 = 8;
  HEAP8[(i64toi32_i32$0 + $23 | 0) >> 0] = HEAPU8[($22 + $23 | 0) >> 0] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $47 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 40 | 0) >> 2] = $0;
  HEAP32[($4 + 36 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  HEAP32[($4 + 44 | 0) >> 2] = $5;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 32 | 0) >> 2] = 0;
  std____2__allocator_unsigned_20long__20std____2__allocator_traits_std____2__allocator_unsigned_20long____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void_2c_20void__28std____2__allocator_unsigned_20long__20const__29(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0 | 0);
  std____2____compressed_pair_unsigned_20long__2c_20std____2__allocator_unsigned_20long______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_unsigned_20long___28std__nullptr_t___2c_20std____2__allocator_unsigned_20long____29($5 + 8 | 0 | 0, $4 + 32 | 0 | 0, $4 + 31 | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector____destroy_vector_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($4 + 16 | 0 | 0, $5 | 0) | 0;
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__20std____2____make_transaction_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector__28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_29($4 + 20 | 0 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____29($5 | 0);
  HEAP32[($4 + 12 | 0) >> 2] = std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____size_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______vallocate_5babi_v15007_5d_28unsigned_20long_29($5 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
   std____2__enable_if___is_cpp17_forward_iterator_unsigned_20long____value_2c_20void___type_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______construct_at_end_unsigned_20long___28unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long_29($5 | 0, HEAP32[(HEAP32[($4 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  }
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector_____complete_5babi_v15007_5d_28_29($4 + 20 | 0 | 0);
  std____2____transaction_std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______destroy_vector______transaction_5babi_v15007_5d_28_29($4 + 20 | 0 | 0) | 0;
  $47 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  __stack_pointer = $4 + 48 | 0;
  return $47 | 0;
 }
 
 function std____2__allocator_unsigned_20long__20std____2__allocator_traits_std____2__allocator_unsigned_20long____select_on_container_copy_construction_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20void_2c_20void__28std____2__allocator_unsigned_20long__20const__29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2__enable_if___is_cpp17_forward_iterator_unsigned_20long____value_2c_20void___type_20std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______construct_at_end_unsigned_20long___28unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $7 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction___ConstructTransaction_28std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long____2c_20unsigned_20long_29($6 + 4 | 0 | 0, $7 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($6 + 8 | 0) >> 2] = unsigned_20long__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long___28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long__29(std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long______alloc_5babi_v15007_5d_28_29($7 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2__vector_unsigned_20long_2c_20std____2__allocator_unsigned_20long_____ConstructTransaction____ConstructTransaction_28_29($6 + 4 | 0 | 0) | 0;
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function unsigned_20long__20std____2____uninitialized_allocator_copy_5babi_v15007_5d_std____2__allocator_unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long___28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long__2c_20unsigned_20long__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $25 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_unsigned_20long____construct_5babi_v15007_5d_unsigned_20long_2c_20unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long__29(HEAP32[($6 + 28 | 0) >> 2] | 0 | 0, unsigned_20long__20std____2____to_address_5babi_v15007_5d_unsigned_20long__28unsigned_20long__29(HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0);
    HEAP32[($6 + 24 | 0) >> 2] = (HEAP32[($6 + 24 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 16 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  $25 = HEAP32[($6 + 16 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $25 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_unsigned_20long____construct_5babi_v15007_5d_unsigned_20long_2c_20unsigned_20long__2c_20void__28std____2__allocator_unsigned_20long___2c_20unsigned_20long__2c_20unsigned_20long__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_unsigned_20long___construct_5babi_v15007_5d_unsigned_20long_2c_20unsigned_20long___28unsigned_20long__2c_20unsigned_20long__29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function void_20std____2__allocator_unsigned_20long___construct_5babi_v15007_5d_unsigned_20long_2c_20unsigned_20long___28unsigned_20long__2c_20unsigned_20long__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer____max_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $15 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = unsigned_20long_20std____2__allocator_traits_std____2__allocator_Layer____max_size_5babi_v15007_5d_std____2__allocator_Layer__2c_20void__28std____2__allocator_Layer__20const__29(std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3 + 4 | 0) >> 2] = std____2__numeric_limits_long___max_5babi_v15007_5d_28_29() | 0;
  $15 = HEAP32[(unsigned_20long_20const__20std____2__min_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 8 | 0 | 0, $3 + 4 | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $15 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______throw_length_error_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(67982 | 0);
  wasm2js_trap();
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Layer____28std__nullptr_t___2c_20std____2__allocator_Layer___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std__nullptr_t_2c_20void__28std__nullptr_t___29($6 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  std____2____compressed_pair_elem_std____2__allocator_Layer___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Layer___2c_20void__28std____2__allocator_Layer___29($6 + 4 | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return $6 | 0;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______alloc_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____second_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_Layer____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_Layer___28std____2__allocator_Layer___2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $1;
  HEAP32[($5 + 8 | 0) >> 2] = $2;
  HEAP32[$0 >> 2] = std____2__allocator_Layer___allocate_5babi_v15007_5d_28unsigned_20long_29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______end_cap_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____first_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2__reverse_iterator_Layer____reverse_iterator_5babi_v15007_5d_28Layer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Layer___20std____2____uninitialized_allocator_move_if_noexcept_5babi_v15007_5d_std____2__allocator_Layer__2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer____28std____2__allocator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___2c_20std____2__reverse_iterator_Layer___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $33 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((bool_20std____2__operator___5babi_v15007_5d_Layer__2c_20Layer___28std____2__reverse_iterator_Layer___20const__2c_20std____2__reverse_iterator_Layer___20const__29($6 + 24 | 0 | 0, $6 + 20 | 0 | 0) | 0) & 1 | 0)) {
     break label$1
    }
    void_20std____2__allocator_traits_std____2__allocator_Layer____construct_5babi_v15007_5d_Layer_2c_20Layer_2c_20void__28std____2__allocator_Layer___2c_20Layer__2c_20Layer___29(HEAP32[($6 + 12 | 0) >> 2] | 0 | 0, std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Layer_______call_28declval_std____2__reverse_iterator_Layer___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Layer___2c_20void__28std____2__reverse_iterator_Layer___20const__29($6 + 16 | 0 | 0) | 0 | 0, std____2__reverse_iterator_Layer____operator__5babi_v15007_5d_28_29_20const($6 + 24 | 0 | 0) | 0 | 0);
    std____2__reverse_iterator_Layer____operator___5babi_v15007_5d_28_29($6 + 24 | 0 | 0) | 0;
    std____2__reverse_iterator_Layer____operator___5babi_v15007_5d_28_29($6 + 16 | 0 | 0) | 0;
    continue label$2;
   };
  }
  HEAP32[($6 + 28 | 0) >> 2] = HEAP32[($6 + 16 | 0) >> 2] | 0;
  $33 = HEAP32[($6 + 28 | 0) >> 2] | 0;
  __stack_pointer = $6 + 32 | 0;
  return $33 | 0;
 }
 
 function std____2__reverse_iterator_Layer____base_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function std____2__enable_if_is_move_constructible_Layer____value_20___20is_move_assignable_Layer____value_2c_20void___type_20std____2__swap_5babi_v15007_5d_Layer___28Layer___2c_20Layer___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_new_5babi_v15007_5d_28unsigned_20long_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  std____2__vector_Layer_2c_20std____2__allocator_Layer______annotate_contiguous_container_5babi_v15007_5d_28void_20const__2c_20void_20const__2c_20void_20const__2c_20void_20const__29_20const($5 | 0, std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 44) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(std____2__vector_Layer_2c_20std____2__allocator_Layer____capacity_5babi_v15007_5d_28_29_20const($5 | 0) | 0, 44) | 0 | 0, (std____2__vector_Layer_2c_20std____2__allocator_Layer____data_5babi_v15007_5d_28_29_20const($5 | 0) | 0) + Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 44) | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function void_20std____2____debug_db_invalidate_all_5babi_v15007_5d_std____2__vector_Layer_2c_20std____2__allocator_Layer____28std____2__vector_Layer_2c_20std____2__allocator_Layer____29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____clear_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______destruct_at_end_5babi_v15007_5d_28Layer__29($4 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_____capacity_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $10 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $10 = ((HEAP32[(std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______end_cap_5babi_v15007_5d_28_29_20const($4 | 0) | 0) >> 2] | 0) - (HEAP32[$4 >> 2] | 0) | 0 | 0) / (44 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $10 | 0;
 }
 
 function std____2__vector_Layer_2c_20std____2__allocator_Layer______alloc_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____second_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function unsigned_20long_20std____2__allocator_traits_std____2__allocator_Layer____max_size_5babi_v15007_5d_std____2__allocator_Layer__2c_20void__28std____2__allocator_Layer__20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__allocator_Layer___max_size_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Layer___max_size_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 97612893 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer____second_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Layer__2c_201_2c_20true_____get_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Layer___2c_201_2c_20false_____compressed_pair_elem_5babi_v15007_5d_std____2__allocator_Layer___2c_20void__28std____2__allocator_Layer___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  return $5 | 0;
 }
 
 function std____2__allocator_Layer___allocate_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $17 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 > (unsigned_20long_20std____2__allocator_traits_std____2__allocator_Layer____max_size_5babi_v15007_5d_std____2__allocator_Layer__2c_20void__28std____2__allocator_Layer__20const__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
   wasm2js_trap();
  }
  $17 = std____2____libcpp_allocate_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, 44) | 0, 4 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $17 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____second_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_elem_std____2__allocator_Layer___2c_201_2c_20false_____get_5babi_v15007_5d_28_29((HEAP32[($3 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____first_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_Layer___2c_201_2c_20false_____get_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function bool_20std____2__operator___5babi_v15007_5d_Layer__2c_20Layer___28std____2__reverse_iterator_Layer___20const__2c_20std____2__reverse_iterator_Layer___20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $13 = (std____2__reverse_iterator_Layer____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) != (std____2__reverse_iterator_Layer____base_5babi_v15007_5d_28_29_20const(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  __stack_pointer = $4 + 16 | 0;
  return $13 | 0;
 }
 
 function std____2__decay_decltype_28__to_address_helper_std____2__reverse_iterator_Layer_______call_28declval_std____2__reverse_iterator_Layer___20const___28_29_29_29___type_20std____2____to_address_5babi_v15007_5d_std____2__reverse_iterator_Layer___2c_20void__28std____2__reverse_iterator_Layer___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____to_address_helper_std____2__reverse_iterator_Layer___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Layer___20const__29(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__reverse_iterator_Layer____operator__5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0;
  $8 = (HEAP32[($3 + 8 | 0) >> 2] | 0) + -44 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $8;
  return $8 | 0;
 }
 
 function void_20std____2__allocator_traits_std____2__allocator_Layer____construct_5babi_v15007_5d_Layer_2c_20Layer_2c_20void__28std____2__allocator_Layer___2c_20Layer__2c_20Layer___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  void_20std____2__allocator_Layer___construct_5babi_v15007_5d_Layer_2c_20Layer__28Layer__2c_20Layer___29(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2__reverse_iterator_Layer____operator___5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + -44 | 0;
  return $4 | 0;
 }
 
 function void_20std____2__allocator_Layer___construct_5babi_v15007_5d_Layer_2c_20Layer__28Layer__2c_20Layer___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  Layer__Layer_28Layer___29(HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function std____2____to_address_helper_std____2__reverse_iterator_Layer___2c_20void_____call_5babi_v15007_5d_28std____2__reverse_iterator_Layer___20const__29($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $6 = Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29(std____2__reverse_iterator_Layer____operator___5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $6 | 0;
 }
 
 function Layer__Layer_28Layer___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $11 = 0, $44 = 0, $64 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[$5 >> 2] = $44;
  HEAP32[($5 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7 = 16;
  HEAP8[($5 + $7 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + $7 | 0) >> 0] | 0;
  $11 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $11 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $64 = i64toi32_i32$1;
  i64toi32_i32$1 = $5 + $11 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $64;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  std____2__vector_Section_2c_20std____2__allocator_Section____vector_5babi_v15007_5d_28std____2__vector_Section_2c_20std____2__allocator_Section_____29($5 + 20 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 20 | 0 | 0) | 0;
  std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_5babi_v15007_5d_28std____2__vector_Divider_2c_20std____2__allocator_Divider_____29($5 + 32 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 32 | 0 | 0) | 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Section_2c_20std____2__allocator_Section____vector_5babi_v15007_5d_28std____2__vector_Section_2c_20std____2__allocator_Section_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  std____2____compressed_pair_Section__2c_20std____2__allocator_Section______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Section___28std__nullptr_t___2c_20std____2__allocator_Section____29($5 + 8 | 0 | 0, $4 + 4 | 0 | 0, std____2__vector_Section_2c_20std____2__allocator_Section______alloc_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____29($5 | 0);
  void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____2c_20std____2__vector_Section_2c_20std____2__allocator_Section____29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $23 = HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $23;
  HEAP32[(std____2__vector_Section_2c_20std____2__allocator_Section______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2__vector_Divider_2c_20std____2__allocator_Divider____vector_5babi_v15007_5d_28std____2__vector_Divider_2c_20std____2__allocator_Divider_____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $23 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[($5 + 4 | 0) >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  std____2____compressed_pair_Divider__2c_20std____2__allocator_Divider______compressed_pair_5babi_v15007_5d_std__nullptr_t_2c_20std____2__allocator_Divider___28std__nullptr_t___2c_20std____2__allocator_Divider____29($5 + 8 | 0 | 0, $4 + 4 | 0 | 0, std____2__vector_Divider_2c_20std____2__allocator_Divider______alloc_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  void_20std____2____debug_db_insert_c_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____29($5 | 0);
  void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____2c_20std____2__vector_Divider_2c_20std____2__allocator_Divider____29($5 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  HEAP32[$5 >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $23 = HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29($5 | 0) | 0) >> 2] = $23;
  HEAP32[(std____2__vector_Divider_2c_20std____2__allocator_Divider______end_cap_5babi_v15007_5d_28_29(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0) >> 2] = 0;
  HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] = 0;
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Section_2c_20std____2__allocator_Section____28std____2__vector_Section_2c_20std____2__allocator_Section____2c_20std____2__vector_Section_2c_20std____2__allocator_Section____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function void_20std____2____debug_db_swap_5babi_v15007_5d_std____2__vector_Divider_2c_20std____2__allocator_Divider____28std____2__vector_Divider_2c_20std____2__allocator_Divider____2c_20std____2__vector_Divider_2c_20std____2__allocator_Divider____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function std____2__reverse_iterator_Layer____operator___5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2__reverse_iterator_Layer____operator__5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______destruct_at_end_5babi_v15007_5d_28Layer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______destruct_at_end_5babi_v15007_5d_28Layer__2c_20std____2__integral_constant_bool_2c_20false__29(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______end_cap_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $7 = std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____first_5babi_v15007_5d_28_29_20const((HEAP32[($3 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $7 | 0;
 }
 
 function std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______destruct_at_end_5babi_v15007_5d_28Layer__2c_20std____2__integral_constant_bool_2c_20false__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $16 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 8 | 0) >> 2] = $0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $13 = std____2____split_buffer_Layer_2c_20std____2__allocator_Layer_______alloc_5babi_v15007_5d_28_29($5 | 0) | 0;
    $16 = (HEAP32[($5 + 8 | 0) >> 2] | 0) + -44 | 0;
    HEAP32[($5 + 8 | 0) >> 2] = $16;
    void_20std____2__allocator_traits_std____2__allocator_Layer____destroy_5babi_v15007_5d_Layer_2c_20void__28std____2__allocator_Layer___2c_20Layer__29($13 | 0, Layer__20std____2____to_address_5babi_v15007_5d_Layer__28Layer__29($16 | 0) | 0 | 0);
    continue label$2;
   };
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function std____2____compressed_pair_Layer__2c_20std____2__allocator_Layer_____first_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  var $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $5 = std____2____compressed_pair_elem_Layer__2c_200_2c_20false_____get_5babi_v15007_5d_28_29_20const(HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $5 | 0;
 }
 
 function __cxx_global_var_init() {
  __cxa_atexit(11 | 0, 0 | 0, 65536 | 0) | 0;
  return;
 }
 
 function __cxx_global_array_dtor($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen_____unique_ptr_5babi_v15007_5d_28_29(86928 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen_____unique_ptr_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  std____2__unique_ptr_Screen_2c_20std____2__default_delete_Screen____reset_5babi_v15007_5d_28Screen__29($4 | 0, 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $4 | 0;
 }
 
 function Screen___Screen_28_29($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function _GLOBAL__sub_I_screens_cpp() {
  __cxx_global_var_init();
  return;
 }
 
 function rlMatrixMode($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) == (5889 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 86992 | 0) >> 2] = 86932 + 128 | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) == (5888 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[(0 + 86992 | 0) >> 2] = 86932 + 64 | 0;
   }
  }
  HEAP32[(0 + 86988 | 0) >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
  return;
 }
 
 function rlLoadIdentity() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $12 = 0, $15 = 0, $18 = 0, $21 = 0, $24 = 0, $49 = 0, $59 = 0, $69 = 0, $79 = 0, $89 = 0, $99 = 0, $109 = 0, $119 = 0;
  $2 = __stack_pointer - 64 | 0;
  __stack_pointer = $2;
  $4 = HEAP32[(0 + 86992 | 0) >> 2] | 0;
  rlMatrixIdentity($2 | 0);
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $49 = i64toi32_i32$0;
  i64toi32_i32$0 = $4;
  HEAP32[i64toi32_i32$0 >> 2] = $49;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6 = 56;
  i64toi32_i32$2 = i64toi32_i32$2 + $6 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59 = i64toi32_i32$1;
  i64toi32_i32$1 = $4 + $6 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $59;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9 = 48;
  i64toi32_i32$2 = $2 + $9 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69 = i64toi32_i32$0;
  i64toi32_i32$0 = $4 + $9 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $69;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12 = 40;
  i64toi32_i32$2 = $2 + $12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79 = i64toi32_i32$1;
  i64toi32_i32$1 = $4 + $12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $79;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15 = 32;
  i64toi32_i32$2 = $2 + $15 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $89 = i64toi32_i32$0;
  i64toi32_i32$0 = $4 + $15 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $89;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $18 = 24;
  i64toi32_i32$2 = $2 + $18 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $99 = i64toi32_i32$1;
  i64toi32_i32$1 = $4 + $18 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $99;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $21 = 16;
  i64toi32_i32$2 = $2 + $21 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109 = i64toi32_i32$0;
  i64toi32_i32$0 = $4 + $21 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $109;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $24 = 8;
  i64toi32_i32$2 = $2 + $24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $119 = i64toi32_i32$1;
  i64toi32_i32$1 = $4 + $24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $119;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 64 | 0;
  return;
 }
 
 function rlMatrixIdentity($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  i64toi32_i32$0 = 0;
  $1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0 >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 60 | 0) >> 2] = Math_fround(1.0);
  return;
 }
 
 function rlMatrixMultiply($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0;
  i64toi32_i32$0 = 0;
  $3 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[$0 >> 2] = $3;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) * Math_fround(HEAPF32[$2 >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 4 | 0) >> 2])))));
  HEAPF32[($0 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) * Math_fround(HEAPF32[($2 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))));
  HEAPF32[($0 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) * Math_fround(HEAPF32[($2 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 36 | 0) >> 2])))));
  HEAPF32[($0 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 60 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 56 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) * Math_fround(HEAPF32[($2 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 52 | 0) >> 2])))));
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[$2 >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 4 | 0) >> 2])))));
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))));
  HEAPF32[($0 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 36 | 0) >> 2])))));
  HEAPF32[($0 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 60 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 56 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 52 | 0) >> 2])))));
  HEAPF32[($0 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[$2 >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 4 | 0) >> 2])))));
  HEAPF32[($0 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))));
  HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 36 | 0) >> 2])))));
  HEAPF32[($0 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 60 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 56 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 52 | 0) >> 2])))));
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[$2 >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 4 | 0) >> 2])))));
  HEAPF32[($0 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 20 | 0) >> 2])))));
  HEAPF32[($0 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 44 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 32 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 36 | 0) >> 2])))));
  HEAPF32[($0 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 60 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 60 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 44 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 56 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 48 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($1 + 28 | 0) >> 2]) * Math_fround(HEAPF32[($2 + 52 | 0) >> 2])))));
  return;
 }
 
 function rlMultMatrixf($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, $21 = 0, $23 = 0, $26 = 0, $31 = 0, $36 = 0, $41 = 0, $46 = 0, $51 = 0, $56 = 0, $109 = 0, $114 = 0, $119 = 0, $124 = 0, $129 = 0, $134 = 0, $139 = 0, $309 = 0, $322 = 0, $335 = 0, $348 = 0, $361 = 0, $374 = 0, $387 = 0, $391 = 0, $407 = 0, $423 = 0, $439 = 0, $455 = 0, $471 = 0, $487 = 0, $503 = 0, $507 = 0, $523 = 0, $536 = 0, $549 = 0, $562 = 0, $575 = 0, $588 = 0, $601 = 0, $614 = 0;
  $3 = __stack_pointer - 272 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 268 | 0) >> 2] = $0;
  HEAPF32[($3 + 204 | 0) >> 2] = Math_fround(HEAPF32[(HEAP32[($3 + 268 | 0) >> 2] | 0) >> 2]);
  HEAPF32[($3 + 208 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 16 | 0) >> 2]);
  HEAPF32[($3 + 212 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 32 | 0) >> 2]);
  HEAPF32[($3 + 216 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 48 | 0) >> 2]);
  HEAPF32[($3 + 220 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 4 | 0) >> 2]);
  HEAPF32[($3 + 224 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 20 | 0) >> 2]);
  HEAPF32[($3 + 228 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 36 | 0) >> 2]);
  HEAPF32[($3 + 232 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 52 | 0) >> 2]);
  HEAPF32[($3 + 236 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 8 | 0) >> 2]);
  HEAPF32[($3 + 240 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 24 | 0) >> 2]);
  HEAPF32[($3 + 244 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 40 | 0) >> 2]);
  HEAPF32[($3 + 248 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 56 | 0) >> 2]);
  HEAPF32[($3 + 252 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  HEAPF32[($3 + 256 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 28 | 0) >> 2]);
  HEAPF32[($3 + 260 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 44 | 0) >> 2]);
  HEAPF32[($3 + 264 | 0) >> 2] = Math_fround(HEAPF32[((HEAP32[($3 + 268 | 0) >> 2] | 0) + 60 | 0) >> 2]);
  $21 = HEAP32[(0 + 86992 | 0) >> 2] | 0;
  $23 = HEAP32[(0 + 86992 | 0) >> 2] | 0;
  $26 = 56;
  i64toi32_i32$2 = $23 + $26 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $309 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 72 | 0) + $26 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $309;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $31 = 48;
  i64toi32_i32$2 = $23 + $31 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $322 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 72 | 0) + $31 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $322;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $36 = 40;
  i64toi32_i32$2 = $23 + $36 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $335 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 72 | 0) + $36 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $335;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $41 = 32;
  i64toi32_i32$2 = $23 + $41 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $348 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 72 | 0) + $41 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $348;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $46 = 24;
  i64toi32_i32$2 = $23 + $46 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $361 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 72 | 0) + $46 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $361;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $51 = 16;
  i64toi32_i32$2 = $23 + $51 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $374 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 72 | 0) + $51 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $374;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $56 = 8;
  i64toi32_i32$2 = $23 + $56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $387 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 72 | 0) + $56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $387;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $23;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $391 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $391;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = (i64toi32_i32$1 + 204 | 0) + $26 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $407 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 8 | 0) + $26 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $407;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($3 + 204 | 0) + $31 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $423 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 8 | 0) + $31 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $423;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($3 + 204 | 0) + $36 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $439 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 8 | 0) + $36 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $439;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($3 + 204 | 0) + $41 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $455 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 8 | 0) + $41 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $455;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($3 + 204 | 0) + $46 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $471 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 8 | 0) + $46 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $471;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($3 + 204 | 0) + $51 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $487 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3 + 8 | 0) + $51 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $487;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($3 + 204 | 0) + $56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $503 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3 + 8 | 0) + $56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $503;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = HEAP32[($3 + 204 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 208 | 0) >> 2] | 0;
  $507 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $507;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  rlMatrixMultiply(i64toi32_i32$1 + 140 | 0 | 0, i64toi32_i32$1 + 72 | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
  $523 = i64toi32_i32$0;
  i64toi32_i32$0 = $21;
  HEAP32[i64toi32_i32$0 >> 2] = $523;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $109 = 56;
  i64toi32_i32$2 = ($3 + 140 | 0) + $109 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $536 = i64toi32_i32$1;
  i64toi32_i32$1 = $21 + $109 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $536;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $114 = 48;
  i64toi32_i32$2 = ($3 + 140 | 0) + $114 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $549 = i64toi32_i32$0;
  i64toi32_i32$0 = $21 + $114 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $549;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $119 = 40;
  i64toi32_i32$2 = ($3 + 140 | 0) + $119 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $562 = i64toi32_i32$1;
  i64toi32_i32$1 = $21 + $119 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $562;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $124 = 32;
  i64toi32_i32$2 = ($3 + 140 | 0) + $124 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $575 = i64toi32_i32$0;
  i64toi32_i32$0 = $21 + $124 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $575;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $129 = 24;
  i64toi32_i32$2 = ($3 + 140 | 0) + $129 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $588 = i64toi32_i32$1;
  i64toi32_i32$1 = $21 + $129 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $588;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $134 = 16;
  i64toi32_i32$2 = ($3 + 140 | 0) + $134 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $601 = i64toi32_i32$0;
  i64toi32_i32$0 = $21 + $134 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $601;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $139 = 8;
  i64toi32_i32$2 = ($3 + 140 | 0) + $139 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $614 = i64toi32_i32$1;
  i64toi32_i32$1 = $21 + $139 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $614;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $3 + 272 | 0;
  return;
 }
 
 function rlOrtho($0, $1, $2, $3, $4, $5) {
  $0 = +$0;
  $1 = +$1;
  $2 = +$2;
  $3 = +$3;
  $4 = +$4;
  $5 = +$5;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8 = 0, $23 = 0, $134 = 0, $25 = 0, $27 = 0, $30 = 0, $35 = 0, $40 = 0, $45 = 0, $50 = 0, $55 = 0, $60 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $178 = Math_fround(0), $97 = 0, $102 = 0, $107 = 0, $112 = 0, $117 = 0, $122 = 0, $127 = 0, $412 = 0, $425 = 0, $438 = 0, $451 = 0, $464 = 0, $477 = 0, $490 = 0, $494 = 0, $507 = 0, $520 = 0, $533 = 0, $546 = 0, $559 = 0, $572 = 0, $585 = 0, $589 = 0, $602 = 0, $615 = 0, $628 = 0, $641 = 0, $654 = 0, $667 = 0, $680 = 0, $693 = 0;
  $8 = __stack_pointer - 320 | 0;
  __stack_pointer = $8;
  HEAPF64[($8 + 312 | 0) >> 3] = $0;
  HEAPF64[($8 + 304 | 0) >> 3] = $1;
  HEAPF64[($8 + 296 | 0) >> 3] = $2;
  HEAPF64[($8 + 288 | 0) >> 3] = $3;
  HEAPF64[($8 + 280 | 0) >> 3] = $4;
  HEAPF64[($8 + 272 | 0) >> 3] = $5;
  $10 = $8 + 264 | 0;
  i64toi32_i32$0 = 0;
  $134 = 0;
  i64toi32_i32$1 = $10;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $12 = $8 + 256 | 0;
  i64toi32_i32$1 = $12;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $14 = $8 + 248 | 0;
  i64toi32_i32$1 = $14;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16 = $8 + 240 | 0;
  i64toi32_i32$1 = $16;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $18 = $8 + 232 | 0;
  i64toi32_i32$1 = $18;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $20 = $8 + 224 | 0;
  i64toi32_i32$1 = $20;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $22 = $8 + 216 | 0;
  i64toi32_i32$1 = $22;
  HEAP32[i64toi32_i32$1 >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $8;
  HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = $134;
  HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[(i64toi32_i32$1 + 204 | 0) >> 2] = Math_fround(+HEAPF64[(i64toi32_i32$1 + 304 | 0) >> 3] - +HEAPF64[(i64toi32_i32$1 + 312 | 0) >> 3]);
  HEAPF32[(i64toi32_i32$1 + 200 | 0) >> 2] = Math_fround(+HEAPF64[(i64toi32_i32$1 + 288 | 0) >> 3] - +HEAPF64[(i64toi32_i32$1 + 296 | 0) >> 3]);
  HEAPF32[(i64toi32_i32$1 + 196 | 0) >> 2] = Math_fround(+HEAPF64[(i64toi32_i32$1 + 272 | 0) >> 3] - +HEAPF64[(i64toi32_i32$1 + 280 | 0) >> 3]);
  $178 = Math_fround(2.0);
  HEAPF32[(i64toi32_i32$1 + 208 | 0) >> 2] = Math_fround($178 / Math_fround(HEAPF32[(i64toi32_i32$1 + 204 | 0) >> 2]));
  $23 = 0;
  HEAP32[$20 >> 2] = $23;
  HEAP32[$16 >> 2] = $23;
  HEAP32[$12 >> 2] = $23;
  HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = $23;
  HEAPF32[(i64toi32_i32$1 + 228 | 0) >> 2] = Math_fround($178 / Math_fround(HEAPF32[(i64toi32_i32$1 + 200 | 0) >> 2]));
  HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] = $23;
  HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] = $23;
  HEAP32[$22 >> 2] = $23;
  HEAP32[$18 >> 2] = $23;
  HEAPF32[$14 >> 2] = Math_fround(Math_fround(-2.0) / Math_fround(HEAPF32[(i64toi32_i32$1 + 196 | 0) >> 2]));
  HEAP32[$10 >> 2] = $23;
  HEAPF32[(i64toi32_i32$1 + 220 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(Math_fround(+HEAPF64[(i64toi32_i32$1 + 312 | 0) >> 3]) + Math_fround(+HEAPF64[(i64toi32_i32$1 + 304 | 0) >> 3]))) / Math_fround(HEAPF32[(i64toi32_i32$1 + 204 | 0) >> 2]));
  HEAPF32[(i64toi32_i32$1 + 236 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(Math_fround(+HEAPF64[(i64toi32_i32$1 + 288 | 0) >> 3]) + Math_fround(+HEAPF64[(i64toi32_i32$1 + 296 | 0) >> 3]))) / Math_fround(HEAPF32[(i64toi32_i32$1 + 200 | 0) >> 2]));
  HEAPF32[(i64toi32_i32$1 + 252 | 0) >> 2] = Math_fround(Math_fround(-Math_fround(Math_fround(+HEAPF64[(i64toi32_i32$1 + 272 | 0) >> 3]) + Math_fround(+HEAPF64[(i64toi32_i32$1 + 280 | 0) >> 3]))) / Math_fround(HEAPF32[(i64toi32_i32$1 + 196 | 0) >> 2]));
  HEAPF32[(i64toi32_i32$1 + 268 | 0) >> 2] = Math_fround(1.0);
  $25 = HEAP32[(0 + 86992 | 0) >> 2] | 0;
  $27 = HEAP32[(0 + 86992 | 0) >> 2] | 0;
  $30 = 56;
  i64toi32_i32$2 = $27 + $30 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $412 = i64toi32_i32$0;
  i64toi32_i32$0 = ($8 + 64 | 0) + $30 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $412;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $35 = 48;
  i64toi32_i32$2 = $27 + $35 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $425 = i64toi32_i32$1;
  i64toi32_i32$1 = ($8 + 64 | 0) + $35 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $425;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $40 = 40;
  i64toi32_i32$2 = $27 + $40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $438 = i64toi32_i32$0;
  i64toi32_i32$0 = ($8 + 64 | 0) + $40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $438;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $45 = 32;
  i64toi32_i32$2 = $27 + $45 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $451 = i64toi32_i32$1;
  i64toi32_i32$1 = ($8 + 64 | 0) + $45 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $451;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $50 = 24;
  i64toi32_i32$2 = $27 + $50 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $464 = i64toi32_i32$0;
  i64toi32_i32$0 = ($8 + 64 | 0) + $50 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $464;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $55 = 16;
  i64toi32_i32$2 = $27 + $55 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $477 = i64toi32_i32$1;
  i64toi32_i32$1 = ($8 + 64 | 0) + $55 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $477;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $60 = 8;
  i64toi32_i32$2 = $27 + $60 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $490 = i64toi32_i32$0;
  i64toi32_i32$0 = ($8 + 64 | 0) + $60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $490;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $27;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $494 = i64toi32_i32$1;
  i64toi32_i32$1 = $8;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $494;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = (i64toi32_i32$1 + 208 | 0) + $30 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $507 = i64toi32_i32$0;
  i64toi32_i32$0 = $8 + $30 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $507;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($8 + 208 | 0) + $35 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $520 = i64toi32_i32$1;
  i64toi32_i32$1 = $8 + $35 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $520;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($8 + 208 | 0) + $40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $533 = i64toi32_i32$0;
  i64toi32_i32$0 = $8 + $40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $533;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($8 + 208 | 0) + $45 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $546 = i64toi32_i32$1;
  i64toi32_i32$1 = $8 + $45 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $546;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($8 + 208 | 0) + $50 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $559 = i64toi32_i32$0;
  i64toi32_i32$0 = $8 + $50 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $559;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($8 + 208 | 0) + $55 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $572 = i64toi32_i32$1;
  i64toi32_i32$1 = $8 + $55 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $572;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($8 + 208 | 0) + $60 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $585 = i64toi32_i32$0;
  i64toi32_i32$0 = $8 + $60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $585;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = HEAP32[($8 + 208 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($8 + 212 | 0) >> 2] | 0;
  $589 = i64toi32_i32$1;
  i64toi32_i32$1 = $8;
  HEAP32[i64toi32_i32$1 >> 2] = $589;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  rlMatrixMultiply(i64toi32_i32$1 + 132 | 0 | 0, i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] | 0;
  $602 = i64toi32_i32$0;
  i64toi32_i32$0 = $25;
  HEAP32[i64toi32_i32$0 >> 2] = $602;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $97 = 56;
  i64toi32_i32$2 = ($8 + 132 | 0) + $97 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $615 = i64toi32_i32$1;
  i64toi32_i32$1 = $25 + $97 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $615;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $102 = 48;
  i64toi32_i32$2 = ($8 + 132 | 0) + $102 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $628 = i64toi32_i32$0;
  i64toi32_i32$0 = $25 + $102 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $628;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $107 = 40;
  i64toi32_i32$2 = ($8 + 132 | 0) + $107 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $641 = i64toi32_i32$1;
  i64toi32_i32$1 = $25 + $107 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $641;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $112 = 32;
  i64toi32_i32$2 = ($8 + 132 | 0) + $112 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $654 = i64toi32_i32$0;
  i64toi32_i32$0 = $25 + $112 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $654;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $117 = 24;
  i64toi32_i32$2 = ($8 + 132 | 0) + $117 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $667 = i64toi32_i32$1;
  i64toi32_i32$1 = $25 + $117 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $667;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $122 = 16;
  i64toi32_i32$2 = ($8 + 132 | 0) + $122 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $680 = i64toi32_i32$0;
  i64toi32_i32$0 = $25 + $122 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $680;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $127 = 8;
  i64toi32_i32$2 = ($8 + 132 | 0) + $127 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $693 = i64toi32_i32$1;
  i64toi32_i32$1 = $25 + $127 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $693;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $8 + 320 | 0;
  return;
 }
 
 function rlViewport($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 12 | 0) >> 2] = $0;
  HEAP32[($6 + 8 | 0) >> 2] = $1;
  HEAP32[($6 + 4 | 0) >> 2] = $2;
  HEAP32[$6 >> 2] = $3;
  glViewport(HEAP32[($6 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6 >> 2] | 0 | 0);
  __stack_pointer = $6 + 16 | 0;
  return;
 }
 
 function rlBegin($0) {
  $0 = $0 | 0;
  var $3 = 0, $88 = 0, $152 = 0, $225 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  label$1 : {
   if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
         break label$6
        }
        $88 = HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0;
        break label$5;
       }
       $88 = (HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (4 | 0) | 0;
      }
      HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $88;
      break label$3;
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$8
       }
       label$9 : {
        label$10 : {
         if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
          break label$10
         }
         $152 = 1;
         break label$9;
        }
        $152 = 4 - ((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (4 | 0) | 0) | 0;
       }
       HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $152;
       break label$7;
      }
      HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = 0;
     }
    }
    label$11 : {
     if ((rlCheckRenderBatchLimit(HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
      break label$11
     }
     HEAP32[(0 + 86960 | 0) >> 2] = (HEAP32[(0 + 86960 | 0) >> 2] | 0) + (HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0) | 0;
     $225 = HEAP32[(0 + 86932 | 0) >> 2] | 0;
     HEAP32[($225 + 16 | 0) >> 2] = (HEAP32[($225 + 16 | 0) >> 2] | 0) + 1 | 0;
    }
   }
   label$12 : {
    if (!((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
     break label$12
    }
    rlDrawRenderBatch(HEAP32[(0 + 86932 | 0) >> 2] | 0 | 0);
   }
   HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
   HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = 0;
   HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = HEAP32[(0 + 89244 | 0) >> 2] | 0;
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function rlCheckRenderBatchLimit($0) {
  $0 = $0 | 0;
  var $3 = 0, $79 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[($3 + 11 | 0) >> 0] = 0;
  label$1 : {
   if (!(((HEAP32[(0 + 86960 | 0) >> 2] | 0) + (HEAP32[($3 + 12 | 0) >> 2] | 0) | 0 | 0) >= ((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) >> 2] | 0) << 2 | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP8[($3 + 11 | 0) >> 0] = 1;
   HEAP32[($3 + 4 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0;
   HEAP32[$3 >> 2] = HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] | 0;
   rlDrawRenderBatch(HEAP32[(0 + 86932 | 0) >> 2] | 0 | 0);
   HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
   HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
  }
  $79 = (HEAPU8[($3 + 11 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $79 | 0;
 }
 
 function rlDrawRenderBatch($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $178 = 0, $321 = 0, $703 = 0, $718 = 0, $181 = 0, $188 = 0, $195 = 0, $202 = 0, $209 = 0, $216 = 0, $223 = 0, $900 = Math_fround(0), $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $322 = 0, $327 = 0, $332 = 0, $337 = 0, $342 = 0, $347 = 0, $352 = 0, $372 = 0, $376 = 0, $380 = 0, $384 = 0, $388 = 0, $392 = 0, $396 = 0, $466 = 0, $487 = 0, $508 = 0, $699 = 0, $787 = 0, $1103 = 0, $1110 = 0, $1117 = 0, $1124 = 0, $1131 = 0, $1138 = 0, $1145 = 0, $1149 = 0, $1156 = 0, $1163 = 0, $1170 = 0, $1177 = 0, $1184 = 0, $1191 = 0, $1198 = 0, $1202 = 0, $1293 = 0, $1309 = 0, $1325 = 0, $1341 = 0, $1357 = 0, $1373 = 0, $1389 = 0, $1393 = 0, $1406 = 0, $1419 = 0, $1432 = 0, $1445 = 0, $1458 = 0, $1471 = 0, $1484 = 0, $1488 = 0, $1516 = 0, $1532 = 0, $1548 = 0, $1564 = 0, $1580 = 0, $1596 = 0, $1612 = 0, $1616 = 0, $1644 = 0, $1657 = 0, $1670 = 0, $1683 = 0, $1696 = 0, $1709 = 0, $1722 = 0, $1726 = 0, $1759 = 0, $1769 = 0, $1779 = 0, $1789 = 0, $1799 = 0, $1809 = 0, $1819 = 0, $1823 = 0, $1833 = 0, $1843 = 0, $1853 = 0, $1863 = 0, $1873 = 0, $1883 = 0, $1893 = 0, $1897 = 0, $2479 = 0, $2486 = 0, $2493 = 0, $2500 = 0, $2507 = 0, $2514 = 0, $2521 = 0, $2528 = 0, $2532 = 0, $2539 = 0, $2546 = 0, $2553 = 0, $2560 = 0, $2567 = 0, $2574 = 0, $2581 = 0;
  $3 = __stack_pointer - 752 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 748 | 0) >> 2] = $0;
  label$1 : {
   if (!((HEAP32[(0 + 86960 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] | 0);
   }
   glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 24 | 0) >> 2] | 0 | 0);
   glBufferSubData(34962 | 0, 0 | 0, Math_imul(HEAP32[(0 + 86960 | 0) >> 2] | 0, 3) << 2 | 0 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0 | 0);
   glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 28 | 0) >> 2] | 0 | 0);
   glBufferSubData(34962 | 0, 0 | 0, ((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 1 | 0) << 2 | 0 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0 | 0);
   glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 32 | 0) >> 2] | 0 | 0);
   glBufferSubData(34962 | 0, 0 | 0, ((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 2 | 0) << 0 | 0 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0 | 0);
   label$3 : {
    if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](0);
   }
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87116 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87120 | 0) >> 2] | 0;
  $1103 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 736 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1103;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87108 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87112 | 0) >> 2] | 0;
  $1110 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 728 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1110;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87100 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87104 | 0) >> 2] | 0;
  $1117 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 720 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1117;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87092 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87096 | 0) >> 2] | 0;
  $1124 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 712 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1124;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87084 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87088 | 0) >> 2] | 0;
  $1131 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 704 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1131;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87076 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87080 | 0) >> 2] | 0;
  $1138 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 696 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1138;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87068 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87072 | 0) >> 2] | 0;
  $1145 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 688 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1145;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87060 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87064 | 0) >> 2] | 0;
  $1149 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 680 | 0) >> 2] = $1149;
  HEAP32[(i64toi32_i32$1 + 684 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87052 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87056 | 0) >> 2] | 0;
  $1156 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 672 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1156;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87044 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87048 | 0) >> 2] | 0;
  $1163 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 664 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1163;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87036 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87040 | 0) >> 2] | 0;
  $1170 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 656 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1170;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87028 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87032 | 0) >> 2] | 0;
  $1177 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 648 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1177;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87020 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87024 | 0) >> 2] | 0;
  $1184 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 640 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1184;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87012 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87016 | 0) >> 2] | 0;
  $1191 = i64toi32_i32$1;
  i64toi32_i32$1 = $3 + 632 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1191;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87004 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87008 | 0) >> 2] | 0;
  $1198 = i64toi32_i32$0;
  i64toi32_i32$0 = $3 + 624 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1198;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 86996 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87e3 | 0) >> 2] | 0;
  $1202 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] = $1202;
  HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] = 1;
  label$4 : {
   if (!((HEAPU8[(0 + 89288 | 0) >> 0] | 0) & 1 | 0)) {
    break label$4
   }
   HEAP32[($3 + 612 | 0) >> 2] = 2;
  }
  HEAP32[($3 + 608 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3 + 608 | 0) >> 2] | 0 | 0) < (HEAP32[($3 + 612 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$5
    }
    label$7 : {
     if (!((HEAP32[($3 + 612 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$7
     }
     rlViewport((Math_imul(HEAP32[($3 + 608 | 0) >> 2] | 0, HEAP32[(0 + 89592 | 0) >> 2] | 0) | 0) / (2 | 0) | 0 | 0, 0 | 0, (HEAP32[(0 + 89592 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0, HEAP32[(0 + 89596 | 0) >> 2] | 0 | 0);
     $178 = (86932 + 2488 | 0) + ((HEAP32[($3 + 608 | 0) >> 2] | 0) << 6 | 0) | 0;
     $181 = 56;
     i64toi32_i32$2 = ($3 + 616 | 0) + $181 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1293 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 200 | 0) + $181 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1293;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $188 = 48;
     i64toi32_i32$2 = ($3 + 616 | 0) + $188 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1309 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 200 | 0) + $188 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1309;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $195 = 40;
     i64toi32_i32$2 = ($3 + 616 | 0) + $195 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1325 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 200 | 0) + $195 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1325;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $202 = 32;
     i64toi32_i32$2 = ($3 + 616 | 0) + $202 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1341 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 200 | 0) + $202 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1341;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $209 = 24;
     i64toi32_i32$2 = ($3 + 616 | 0) + $209 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1357 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 200 | 0) + $209 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1357;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $216 = 16;
     i64toi32_i32$2 = ($3 + 616 | 0) + $216 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1373 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 200 | 0) + $216 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1373;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $223 = 8;
     i64toi32_i32$2 = ($3 + 616 | 0) + $223 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1389 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 200 | 0) + $223 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1389;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3;
     i64toi32_i32$1 = HEAP32[($3 + 616 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 620 | 0) >> 2] | 0;
     $1393 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 200 | 0) >> 2] = $1393;
     HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $178 + $181 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1406 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 136 | 0) + $181 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1406;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $178 + $188 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1419 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 136 | 0) + $188 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1419;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $178 + $195 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1432 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 136 | 0) + $195 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1432;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $178 + $202 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1445 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 136 | 0) + $202 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1445;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $178 + $209 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1458 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 136 | 0) + $209 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1458;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $178 + $216 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1471 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 136 | 0) + $216 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1471;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $178 + $223 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1484 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 136 | 0) + $223 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1484;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $178;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1488 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = $1488;
     HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = i64toi32_i32$0;
     rlMatrixMultiply(i64toi32_i32$1 + 544 | 0 | 0, i64toi32_i32$1 + 200 | 0 | 0, i64toi32_i32$1 + 136 | 0 | 0);
     $264 = 56;
     i64toi32_i32$2 = (i64toi32_i32$1 + 544 | 0) + $264 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1516 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 264 | 0) + $264 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1516;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $271 = 48;
     i64toi32_i32$2 = ($3 + 544 | 0) + $271 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1532 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 264 | 0) + $271 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1532;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $278 = 40;
     i64toi32_i32$2 = ($3 + 544 | 0) + $278 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1548 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 264 | 0) + $278 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1548;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $285 = 32;
     i64toi32_i32$2 = ($3 + 544 | 0) + $285 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1564 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 264 | 0) + $285 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1564;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $292 = 24;
     i64toi32_i32$2 = ($3 + 544 | 0) + $292 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1580 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 264 | 0) + $292 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1580;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $299 = 16;
     i64toi32_i32$2 = ($3 + 544 | 0) + $299 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1596 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 264 | 0) + $299 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1596;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $306 = 8;
     i64toi32_i32$2 = ($3 + 544 | 0) + $306 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1612 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 264 | 0) + $306 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1612;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3;
     i64toi32_i32$1 = HEAP32[($3 + 544 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3 + 548 | 0) >> 2] | 0;
     $1616 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = $1616;
     HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = i64toi32_i32$0;
     rlSetMatrixModelview(i64toi32_i32$1 + 264 | 0 | 0);
     $321 = (86932 + 2360 | 0) + ((HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0) << 6 | 0) | 0;
     $322 = 56;
     i64toi32_i32$2 = $321 + $322 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1644 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 328 | 0) + $322 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1644;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $327 = 48;
     i64toi32_i32$2 = $321 + $327 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1657 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 328 | 0) + $327 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1657;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $332 = 40;
     i64toi32_i32$2 = $321 + $332 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1670 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 328 | 0) + $332 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1670;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $337 = 32;
     i64toi32_i32$2 = $321 + $337 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1683 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 328 | 0) + $337 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1683;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $342 = 24;
     i64toi32_i32$2 = $321 + $342 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1696 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 328 | 0) + $342 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1696;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $347 = 16;
     i64toi32_i32$2 = $321 + $347 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1709 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 328 | 0) + $347 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1709;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $352 = 8;
     i64toi32_i32$2 = $321 + $352 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1722 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 328 | 0) + $352 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1722;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $321;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1726 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = $1726;
     HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] = i64toi32_i32$0;
     rlSetMatrixProjection(i64toi32_i32$1 + 328 | 0 | 0);
    }
    label$8 : {
     if (!((HEAP32[(0 + 86960 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$8
     }
     glUseProgram(HEAP32[(0 + 89280 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87052 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87056 | 0) >> 2] | 0;
     $372 = 56;
     $1759 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 72 | 0) + $372 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1759;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87044 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87048 | 0) >> 2] | 0;
     $376 = 48;
     $1769 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 72 | 0) + $376 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1769;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87036 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87040 | 0) >> 2] | 0;
     $380 = 40;
     $1779 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 72 | 0) + $380 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1779;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87028 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87032 | 0) >> 2] | 0;
     $384 = 32;
     $1789 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 72 | 0) + $384 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1789;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87020 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87024 | 0) >> 2] | 0;
     $388 = 24;
     $1799 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 72 | 0) + $388 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1799;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87012 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87016 | 0) >> 2] | 0;
     $392 = 16;
     $1809 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 72 | 0) + $392 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1809;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87004 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87008 | 0) >> 2] | 0;
     $396 = 8;
     $1819 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 72 | 0) + $396 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1819;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 86996 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87e3 | 0) >> 2] | 0;
     $1823 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $1823;
     HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87116 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87120 | 0) >> 2] | 0;
     $1833 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 8 | 0) + $372 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1833;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87108 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87112 | 0) >> 2] | 0;
     $1843 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 8 | 0) + $376 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1843;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87100 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87104 | 0) >> 2] | 0;
     $1853 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 8 | 0) + $380 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1853;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87092 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87096 | 0) >> 2] | 0;
     $1863 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 8 | 0) + $384 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1863;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87084 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87088 | 0) >> 2] | 0;
     $1873 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 8 | 0) + $388 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1873;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87076 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87080 | 0) >> 2] | 0;
     $1883 = i64toi32_i32$1;
     i64toi32_i32$1 = ($3 + 8 | 0) + $392 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $1883;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87068 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87072 | 0) >> 2] | 0;
     $1893 = i64toi32_i32$0;
     i64toi32_i32$0 = ($3 + 8 | 0) + $396 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1893;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 87060 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 87064 | 0) >> 2] | 0;
     $1897 = i64toi32_i32$1;
     i64toi32_i32$1 = $3;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1897;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     rlMatrixMultiply(i64toi32_i32$1 + 480 | 0 | 0, i64toi32_i32$1 + 72 | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0);
     HEAPF32[(i64toi32_i32$1 + 416 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 480 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 420 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 496 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 424 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 512 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 428 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 528 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 432 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 484 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 436 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 500 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 440 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 516 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 444 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 532 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 448 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 488 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 452 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 504 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 456 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 520 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 460 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 536 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 464 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 492 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 468 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 508 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 472 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 524 | 0) >> 2]);
     HEAPF32[(i64toi32_i32$1 + 476 | 0) >> 2] = Math_fround(HEAPF32[(i64toi32_i32$1 + 540 | 0) >> 2]);
     glUniformMatrix4fv(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0, 1 | 0, 0 & 255 | 0 | 0, i64toi32_i32$1 + 416 | 0 | 0);
     label$9 : {
      label$10 : {
       if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
        break label$10
       }
       FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] | 0);
       break label$9;
      }
      glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 24 | 0) >> 2] | 0 | 0);
      $466 = 0;
      glVertexAttribPointer(HEAP32[(HEAP32[(0 + 89284 | 0) >> 2] | 0) >> 2] | 0 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, $466 | 0, $466 | 0);
      glEnableVertexAttribArray(HEAP32[(HEAP32[(0 + 89284 | 0) >> 2] | 0) >> 2] | 0 | 0);
      glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 28 | 0) >> 2] | 0 | 0);
      $487 = 0;
      glVertexAttribPointer(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 2 | 0, 5126 | 0, 0 & 255 | 0 | 0, $487 | 0, $487 | 0);
      glEnableVertexAttribArray(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
      glBindBuffer(34962 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 32 | 0) >> 2] | 0 | 0);
      $508 = 0;
      glVertexAttribPointer(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, 4 | 0, 5121 | 0, 1 & 255 | 0 | 0, $508 | 0, $508 | 0);
      glEnableVertexAttribArray(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
      glBindBuffer(34963 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 36 | 0) >> 2] | 0 | 0);
     }
     $900 = Math_fround(1.0);
     glUniform4f(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0, Math_fround($900), Math_fround($900), Math_fround($900), Math_fround($900));
     glUniform1i(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0, 0 | 0);
     HEAP32[($3 + 412 | 0) >> 2] = 0;
     label$11 : {
      label$12 : while (1) {
       if (!((HEAP32[($3 + 412 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
        break label$11
       }
       label$13 : {
        if (!((HEAP32[((86932 + 2316 | 0) + ((HEAP32[($3 + 412 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
         break label$13
        }
        glActiveTexture((HEAP32[($3 + 412 | 0) >> 2] | 0) + 33985 | 0 | 0);
        glBindTexture(3553 | 0, HEAP32[((86932 + 2316 | 0) + ((HEAP32[($3 + 412 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
       }
       HEAP32[($3 + 412 | 0) >> 2] = (HEAP32[($3 + 412 | 0) >> 2] | 0) + 1 | 0;
       continue label$12;
      };
     }
     glActiveTexture(33984 | 0);
     HEAP32[($3 + 408 | 0) >> 2] = 0;
     HEAP32[($3 + 404 | 0) >> 2] = 0;
     label$14 : {
      label$15 : while (1) {
       if (!((HEAP32[($3 + 408 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       glBindTexture(3553 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2] | 0 | 0);
       label$16 : {
        label$17 : {
         label$18 : {
          if ((HEAP32[((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
           break label$18
          }
          if (!((HEAP32[((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break label$17
          }
         }
         glDrawArrays(HEAP32[((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] | 0 | 0, HEAP32[($3 + 404 | 0) >> 2] | 0 | 0, HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0);
         break label$16;
        }
        glDrawElements(4 | 0, Math_imul((HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) / (4 | 0) | 0, 6) | 0, 5123 | 0, Math_imul((HEAP32[($3 + 404 | 0) >> 2] | 0 | 0) / (4 | 0) | 0, 6) << 1 | 0 | 0);
       }
       HEAP32[($3 + 404 | 0) >> 2] = (HEAP32[($3 + 404 | 0) >> 2] | 0) + ((HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 408 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0) | 0) | 0;
       HEAP32[($3 + 408 | 0) >> 2] = (HEAP32[($3 + 408 | 0) >> 2] | 0) + 1 | 0;
       continue label$15;
      };
     }
     label$19 : {
      if ((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0) {
       break label$19
      }
      glBindBuffer(34962 | 0, 0 | 0);
      glBindBuffer(34963 | 0, 0 | 0);
     }
     glBindTexture(3553 | 0, 0 | 0);
    }
    label$20 : {
     if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
      break label$20
     }
     FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](0);
    }
    glUseProgram(0 | 0);
    HEAP32[($3 + 608 | 0) >> 2] = (HEAP32[($3 + 608 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  label$21 : {
   if (!((HEAP32[($3 + 612 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
    break label$21
   }
   $699 = 0;
   rlViewport($699 | 0, $699 | 0, HEAP32[(0 + 89592 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89596 | 0) >> 2] | 0 | 0);
  }
  HEAP32[(0 + 86960 | 0) >> 2] = 0;
  HEAPF32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 20 | 0) >> 2] = Math_fround(-1.0);
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 680 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 684 | 0) >> 2] | 0;
  $703 = 0;
  $2479 = i64toi32_i32$0;
  i64toi32_i32$0 = $703;
  HEAP32[(i64toi32_i32$0 + 87060 | 0) >> 2] = $2479;
  HEAP32[(i64toi32_i32$0 + 87064 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 736 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2486 = i64toi32_i32$1;
  i64toi32_i32$1 = $703;
  HEAP32[(i64toi32_i32$1 + 87116 | 0) >> 2] = $2486;
  HEAP32[(i64toi32_i32$1 + 87120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 728 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2493 = i64toi32_i32$0;
  i64toi32_i32$0 = $703;
  HEAP32[(i64toi32_i32$0 + 87108 | 0) >> 2] = $2493;
  HEAP32[(i64toi32_i32$0 + 87112 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 720 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2500 = i64toi32_i32$1;
  i64toi32_i32$1 = $703;
  HEAP32[(i64toi32_i32$1 + 87100 | 0) >> 2] = $2500;
  HEAP32[(i64toi32_i32$1 + 87104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 712 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2507 = i64toi32_i32$0;
  i64toi32_i32$0 = $703;
  HEAP32[(i64toi32_i32$0 + 87092 | 0) >> 2] = $2507;
  HEAP32[(i64toi32_i32$0 + 87096 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 704 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2514 = i64toi32_i32$1;
  i64toi32_i32$1 = $703;
  HEAP32[(i64toi32_i32$1 + 87084 | 0) >> 2] = $2514;
  HEAP32[(i64toi32_i32$1 + 87088 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 696 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2521 = i64toi32_i32$0;
  i64toi32_i32$0 = $703;
  HEAP32[(i64toi32_i32$0 + 87076 | 0) >> 2] = $2521;
  HEAP32[(i64toi32_i32$0 + 87080 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 688 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2528 = i64toi32_i32$1;
  i64toi32_i32$1 = $703;
  HEAP32[(i64toi32_i32$1 + 87068 | 0) >> 2] = $2528;
  HEAP32[(i64toi32_i32$1 + 87072 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 616 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 620 | 0) >> 2] | 0;
  $718 = 0;
  $2532 = i64toi32_i32$0;
  i64toi32_i32$0 = $718;
  HEAP32[(i64toi32_i32$0 + 86996 | 0) >> 2] = $2532;
  HEAP32[(i64toi32_i32$0 + 87e3 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 672 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2539 = i64toi32_i32$1;
  i64toi32_i32$1 = $718;
  HEAP32[(i64toi32_i32$1 + 87052 | 0) >> 2] = $2539;
  HEAP32[(i64toi32_i32$1 + 87056 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 664 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2546 = i64toi32_i32$0;
  i64toi32_i32$0 = $718;
  HEAP32[(i64toi32_i32$0 + 87044 | 0) >> 2] = $2546;
  HEAP32[(i64toi32_i32$0 + 87048 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 656 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2553 = i64toi32_i32$1;
  i64toi32_i32$1 = $718;
  HEAP32[(i64toi32_i32$1 + 87036 | 0) >> 2] = $2553;
  HEAP32[(i64toi32_i32$1 + 87040 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 648 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2560 = i64toi32_i32$0;
  i64toi32_i32$0 = $718;
  HEAP32[(i64toi32_i32$0 + 87028 | 0) >> 2] = $2560;
  HEAP32[(i64toi32_i32$0 + 87032 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 640 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2567 = i64toi32_i32$1;
  i64toi32_i32$1 = $718;
  HEAP32[(i64toi32_i32$1 + 87020 | 0) >> 2] = $2567;
  HEAP32[(i64toi32_i32$1 + 87024 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3 + 632 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2574 = i64toi32_i32$0;
  i64toi32_i32$0 = $718;
  HEAP32[(i64toi32_i32$0 + 87012 | 0) >> 2] = $2574;
  HEAP32[(i64toi32_i32$0 + 87016 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 624 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2581 = i64toi32_i32$1;
  i64toi32_i32$1 = $718;
  HEAP32[(i64toi32_i32$1 + 87004 | 0) >> 2] = $2581;
  HEAP32[(i64toi32_i32$1 + 87008 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3 + 400 | 0) >> 2] = 0;
  label$22 : {
   label$23 : while (1) {
    if (!((HEAP32[($3 + 400 | 0) >> 2] | 0 | 0) < (256 | 0) & 1 | 0)) {
     break label$22
    }
    HEAP32[((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 400 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = 7;
    HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 400 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = 0;
    HEAP32[(((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($3 + 400 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = HEAP32[(0 + 89244 | 0) >> 2] | 0;
    HEAP32[($3 + 400 | 0) >> 2] = (HEAP32[($3 + 400 | 0) >> 2] | 0) + 1 | 0;
    continue label$23;
   };
  }
  HEAP32[($3 + 396 | 0) >> 2] = 0;
  label$24 : {
   label$25 : while (1) {
    if (!((HEAP32[($3 + 396 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$24
    }
    HEAP32[((86932 + 2316 | 0) + ((HEAP32[($3 + 396 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($3 + 396 | 0) >> 2] = (HEAP32[($3 + 396 | 0) >> 2] | 0) + 1 | 0;
    continue label$25;
   };
  }
  HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 16 | 0) >> 2] = 1;
  $787 = HEAP32[($3 + 748 | 0) >> 2] | 0;
  HEAP32[($787 + 4 | 0) >> 2] = (HEAP32[($787 + 4 | 0) >> 2] | 0) + 1 | 0;
  label$26 : {
   if (!((HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) >= (HEAP32[(HEAP32[($3 + 748 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$26
   }
   HEAP32[((HEAP32[($3 + 748 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  }
  __stack_pointer = $3 + 752 | 0;
  return;
 }
 
 function rlSetMatrixModelview($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9 = 0, $27 = 0, $34 = 0, $41 = 0, $48 = 0, $55 = 0, $62 = 0, $69 = 0, $76 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = 0;
  $27 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 86996 | 0) >> 2] = $27;
  HEAP32[(i64toi32_i32$0 + 87e3 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87052 | 0) >> 2] = $34;
  HEAP32[(i64toi32_i32$1 + 87056 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87044 | 0) >> 2] = $41;
  HEAP32[(i64toi32_i32$0 + 87048 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87036 | 0) >> 2] = $48;
  HEAP32[(i64toi32_i32$1 + 87040 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $55 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87028 | 0) >> 2] = $55;
  HEAP32[(i64toi32_i32$0 + 87032 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87020 | 0) >> 2] = $62;
  HEAP32[(i64toi32_i32$1 + 87024 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87012 | 0) >> 2] = $69;
  HEAP32[(i64toi32_i32$0 + 87016 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $76 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87004 | 0) >> 2] = $76;
  HEAP32[(i64toi32_i32$1 + 87008 | 0) >> 2] = i64toi32_i32$0;
  return;
 }
 
 function rlSetMatrixProjection($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9 = 0, $27 = 0, $34 = 0, $41 = 0, $48 = 0, $55 = 0, $62 = 0, $69 = 0, $76 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9 = 0;
  $27 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87060 | 0) >> 2] = $27;
  HEAP32[(i64toi32_i32$0 + 87064 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87116 | 0) >> 2] = $34;
  HEAP32[(i64toi32_i32$1 + 87120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87108 | 0) >> 2] = $41;
  HEAP32[(i64toi32_i32$0 + 87112 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87100 | 0) >> 2] = $48;
  HEAP32[(i64toi32_i32$1 + 87104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $55 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87092 | 0) >> 2] = $55;
  HEAP32[(i64toi32_i32$0 + 87096 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87084 | 0) >> 2] = $62;
  HEAP32[(i64toi32_i32$1 + 87088 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69 = i64toi32_i32$0;
  i64toi32_i32$0 = $9;
  HEAP32[(i64toi32_i32$0 + 87076 | 0) >> 2] = $69;
  HEAP32[(i64toi32_i32$0 + 87080 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $76 = i64toi32_i32$1;
  i64toi32_i32$1 = $9;
  HEAP32[(i64toi32_i32$1 + 87068 | 0) >> 2] = $76;
  HEAP32[(i64toi32_i32$1 + 87072 | 0) >> 2] = i64toi32_i32$0;
  return;
 }
 
 function rlEnd() {
  var $1 = 0;
  $1 = HEAP32[(0 + 86932 | 0) >> 2] | 0;
  HEAPF32[($1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 20 | 0) >> 2]) + Math_fround(4.999999873689376e-05));
  return;
 }
 
 function rlVertex3f($0, $1, $2) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $5 = 0, $324 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAPF32[($5 + 28 | 0) >> 2] = $0;
  HEAPF32[($5 + 24 | 0) >> 2] = $1;
  HEAPF32[($5 + 20 | 0) >> 2] = $2;
  HEAPF32[($5 + 16 | 0) >> 2] = Math_fround(HEAPF32[($5 + 28 | 0) >> 2]);
  HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(HEAPF32[($5 + 24 | 0) >> 2]);
  HEAPF32[($5 + 8 | 0) >> 2] = Math_fround(HEAPF32[($5 + 20 | 0) >> 2]);
  label$1 : {
   if (!((HEAPU8[(0 + 87188 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF32[($5 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87132 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87124 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(0 + 87128 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 24 | 0) >> 2])))) + Math_fround(HEAPF32[(0 + 87136 | 0) >> 2]));
   HEAPF32[($5 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87148 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87140 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(0 + 87144 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 24 | 0) >> 2])))) + Math_fround(HEAPF32[(0 + 87152 | 0) >> 2]));
   HEAPF32[($5 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87164 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 87156 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 28 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[(0 + 87160 | 0) >> 2]) * Math_fround(HEAPF32[($5 + 24 | 0) >> 2])))) + Math_fround(HEAPF32[(0 + 87168 | 0) >> 2]));
  }
  label$2 : {
   if (!((HEAP32[(0 + 86960 | 0) >> 2] | 0 | 0) > (((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) >> 2] | 0) << 2 | 0) - 4 | 0 | 0) & 1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$4
     }
     if ((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (2 | 0) | 0) {
      break label$4
     }
     rlCheckRenderBatchLimit(3 | 0) | 0;
     break label$3;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$6
      }
      if ((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (3 | 0) | 0) {
       break label$6
      }
      rlCheckRenderBatchLimit(4 | 0) | 0;
      break label$5;
     }
     label$7 : {
      if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
       break label$7
      }
      if ((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (4 | 0) | 0) {
       break label$7
      }
      rlCheckRenderBatchLimit(5 | 0) | 0;
     }
    }
   }
  }
  HEAPF32[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0) + (Math_imul(HEAP32[(0 + 86960 | 0) >> 2] | 0, 3) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5 + 16 | 0) >> 2]);
  HEAPF32[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0) + ((Math_imul(HEAP32[(0 + 86960 | 0) >> 2] | 0, 3) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
  HEAPF32[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0) + ((Math_imul(HEAP32[(0 + 86960 | 0) >> 2] | 0, 3) + 2 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
  HEAPF32[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0) + (((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(0 + 86964 | 0) >> 2]);
  HEAPF32[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0) + ((((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 1 | 0) + 1 | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAPF32[(0 + 86968 | 0) >> 2]);
  HEAP8[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = HEAPU8[(0 + 86984 | 0) >> 0] | 0;
  HEAP8[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 2 | 0) + 1 | 0) | 0) >> 0] = HEAPU8[(0 + 86985 | 0) >> 0] | 0;
  HEAP8[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 2 | 0) + 2 | 0) | 0) >> 0] = HEAPU8[(0 + 86986 | 0) >> 0] | 0;
  HEAP8[((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[(0 + 86960 | 0) >> 2] | 0) << 2 | 0) + 3 | 0) | 0) >> 0] = HEAPU8[(0 + 86987 | 0) >> 0] | 0;
  HEAP32[(0 + 86960 | 0) >> 2] = (HEAP32[(0 + 86960 | 0) >> 2] | 0) + 1 | 0;
  $324 = (HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0;
  HEAP32[($324 + 4 | 0) >> 2] = (HEAP32[($324 + 4 | 0) >> 2] | 0) + 1 | 0;
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function rlVertex2f($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAPF32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  rlVertex3f(Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 8 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 20 | 0) >> 2])));
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function rlTexCoord2f($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAPF32[($4 + 12 | 0) >> 2] = $0;
  HEAPF32[($4 + 8 | 0) >> 2] = $1;
  HEAPF32[(0 + 86964 | 0) >> 2] = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
  HEAPF32[(0 + 86968 | 0) >> 2] = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  return;
 }
 
 function rlNormal3f($0, $1, $2) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAPF32[($5 + 12 | 0) >> 2] = $0;
  HEAPF32[($5 + 8 | 0) >> 2] = $1;
  HEAPF32[($5 + 4 | 0) >> 2] = $2;
  HEAPF32[(0 + 86972 | 0) >> 2] = Math_fround(HEAPF32[($5 + 12 | 0) >> 2]);
  HEAPF32[(0 + 86976 | 0) >> 2] = Math_fround(HEAPF32[($5 + 8 | 0) >> 2]);
  HEAPF32[(0 + 86980 | 0) >> 2] = Math_fround(HEAPF32[($5 + 4 | 0) >> 2]);
  return;
 }
 
 function rlColor4ub($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  HEAP8[($6 + 15 | 0) >> 0] = $0;
  HEAP8[($6 + 14 | 0) >> 0] = $1;
  HEAP8[($6 + 13 | 0) >> 0] = $2;
  HEAP8[($6 + 12 | 0) >> 0] = $3;
  HEAP8[(0 + 86984 | 0) >> 0] = HEAPU8[($6 + 15 | 0) >> 0] | 0;
  HEAP8[(0 + 86985 | 0) >> 0] = HEAPU8[($6 + 14 | 0) >> 0] | 0;
  HEAP8[(0 + 86986 | 0) >> 0] = HEAPU8[($6 + 13 | 0) >> 0] | 0;
  HEAP8[(0 + 86987 | 0) >> 0] = HEAPU8[($6 + 12 | 0) >> 0] | 0;
  return;
 }
 
 function rlSetTexture($0) {
  $0 = $0 | 0;
  var $3 = 0, $110 = 0, $174 = 0, $247 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    if (HEAP32[($3 + 12 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[(0 + 86960 | 0) >> 2] | 0 | 0) >= ((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 40) | 0) >> 2] | 0) << 2 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     rlDrawRenderBatch(HEAP32[(0 + 86932 | 0) >> 2] | 0 | 0);
    }
    break label$1;
   }
   label$4 : {
    if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    label$5 : {
     if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
          break label$9
         }
         $110 = HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0;
         break label$8;
        }
        $110 = (HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (4 | 0) | 0;
       }
       HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $110;
       break label$6;
      }
      label$10 : {
       label$11 : {
        if (!((HEAP32[((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$11
        }
        label$12 : {
         label$13 : {
          if (!((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
           break label$13
          }
          $174 = 1;
          break label$12;
         }
         $174 = 4 - ((HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] | 0 | 0) % (4 | 0) | 0) | 0;
        }
        HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = $174;
        break label$10;
       }
       HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = 0;
      }
     }
     label$14 : {
      if ((rlCheckRenderBatchLimit(HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
       break label$14
      }
      HEAP32[(0 + 86960 | 0) >> 2] = (HEAP32[(0 + 86960 | 0) >> 2] | 0) + (HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2] | 0) | 0;
      $247 = HEAP32[(0 + 86932 | 0) >> 2] | 0;
      HEAP32[($247 + 16 | 0) >> 2] = (HEAP32[($247 + 16 | 0) >> 2] | 0) + 1 | 0;
     }
    }
    label$15 : {
     if (!((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
      break label$15
     }
     rlDrawRenderBatch(HEAP32[(0 + 86932 | 0) >> 2] | 0 | 0);
    }
    HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
    HEAP32[(((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[(0 + 86932 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) - 1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = 0;
   }
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function rlTextureParameters($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $9 = 0, $7 = 0, $82 = Math_fround(0), $61 = 0, $56 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  $7 = 3553;
  glBindTexture($7 | 0, HEAP32[($5 + 28 | 0) >> 2] | 0 | 0);
  glTexParameterf($7 | 0, 34046 | 0, Math_fround(Math_fround(1.0)));
  $9 = HEAP32[($5 + 24 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($9 + -10240 | 0) >>> 0 < 2 >>> 0) {
       break label$4
      }
      label$5 : {
       if (($9 + -10242 | 0) >>> 0 < 2 >>> 0) {
        break label$5
       }
       if (($9 | 0) == (12288 | 0)) {
        break label$3
       }
       break label$2;
      }
      label$6 : {
       label$7 : {
        if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) == (34626 | 0) & 1 | 0)) {
         break label$7
        }
        label$8 : {
         label$9 : {
          if (!((HEAPU8[(0 + 89611 | 0) >> 0] | 0) & 1 | 0)) {
           break label$9
          }
          glTexParameteri(3553 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
          break label$8;
         }
         TraceLog(4 | 0, 74602 | 0, 0 | 0);
        }
        break label$6;
       }
       glTexParameteri(3553 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
      }
      break label$1;
     }
     glTexParameteri(3553 | 0, HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
     break label$1;
    }
    label$10 : {
     label$11 : {
      if (!(Math_fround(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) <= Math_fround(HEAPF32[(0 + 89616 | 0) >> 2]) & 1 | 0)) {
       break label$11
      }
      glTexParameterf(3553 | 0, 34046 | 0, Math_fround(Math_fround(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0)));
      break label$10;
     }
     label$12 : {
      label$13 : {
       if (!(Math_fround(HEAPF32[(0 + 89616 | 0) >> 2]) > Math_fround(0 | 0) & 1 | 0)) {
        break label$13
       }
       $56 = HEAP32[($5 + 28 | 0) >> 2] | 0;
       $82 = Math_fround(HEAPF32[(0 + 89616 | 0) >> 2]);
       label$14 : {
        label$15 : {
         if (!(Math_fround(Math_abs($82)) < Math_fround(2147483648.0))) {
          break label$15
         }
         $61 = ~~$82;
         break label$14;
        }
        $61 = -2147483648;
       }
       HEAP32[($5 + 4 | 0) >> 2] = $61;
       HEAP32[$5 >> 2] = $56;
       TraceLog(4 | 0, 71688 | 0, $5 | 0);
       glTexParameterf(3553 | 0, 34046 | 0, Math_fround(Math_fround(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0)));
       break label$12;
      }
      TraceLog(4 | 0, 70903 | 0, 0 | 0);
     }
    }
    break label$1;
   }
  }
  glBindTexture(3553 | 0, 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function rlClearColor($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $14 = Math_fround(0);
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP8[($6 + 31 | 0) >> 0] = $0;
  HEAP8[($6 + 30 | 0) >> 0] = $1;
  HEAP8[($6 + 29 | 0) >> 0] = $2;
  HEAP8[($6 + 28 | 0) >> 0] = $3;
  $14 = Math_fround(255.0);
  HEAPF32[($6 + 24 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6 + 31 | 0) >> 0] | 0) >>> 0) / $14);
  HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6 + 30 | 0) >> 0] | 0) >>> 0) / $14);
  HEAPF32[($6 + 16 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6 + 29 | 0) >> 0] | 0) >>> 0) / $14);
  HEAPF32[($6 + 12 | 0) >> 2] = Math_fround(Math_fround((HEAPU8[($6 + 28 | 0) >> 0] | 0) >>> 0) / Math_fround(255.0));
  glClearColor(Math_fround(Math_fround(HEAPF32[($6 + 24 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 20 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 16 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2])));
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function rlClearScreenBuffers() {
  glClear(16640 | 0);
  return;
 }
 
 function rlglInit($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $57 = 0, $102 = 0, $120 = 0, $138 = 0, $55 = 0, $10 = 0, $34 = 0, $211 = Math_fround(0), $61 = 0, $66 = 0, $71 = 0, $76 = 0, $81 = 0, $86 = 0, $91 = 0, $271 = 0, $278 = 0, $285 = 0, $324 = 0, $337 = 0, $350 = 0, $363 = 0, $376 = 0, $389 = 0, $402 = 0, $415 = 0, $431 = 0, $438 = 0, $445 = 0, $452 = 0, $459 = 0, $466 = 0, $473 = 0, $480 = 0, $489 = 0, $496 = 0, $503 = 0, $510 = 0, $517 = 0, $524 = 0, $531 = 0, $538 = 0, $547 = 0, $554 = 0, $561 = 0, $568 = 0, $575 = 0, $582 = 0, $589 = 0, $596 = 0;
  $4 = __stack_pointer - 304 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 300 | 0) >> 2] = $0;
  HEAP32[($4 + 296 | 0) >> 2] = $1;
  $55 = 0;
  HEAP32[($4 + 292 | 0) >> 2] = HEAPU8[($55 + 75824 | 0) >> 0] | 0 | ((HEAPU8[($55 + 75825 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($55 + 75826 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($55 + 75827 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $10 = 1;
  HEAP32[(0 + 89244 | 0) >> 2] = rlLoadTexture($4 + 292 | 0 | 0, $10 | 0, $10 | 0, 7 | 0, $10 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 89244 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[$4 >> 2] = HEAP32[(0 + 89244 | 0) >> 2] | 0;
    TraceLog(3 | 0, 66229 | 0, $4 | 0);
    break label$1;
   }
   TraceLog(4 | 0, 70062 | 0, 0 | 0);
  }
  rlLoadShaderDefault();
  HEAP32[(0 + 89280 | 0) >> 2] = HEAP32[(0 + 89272 | 0) >> 2] | 0;
  HEAP32[(0 + 89284 | 0) >> 2] = HEAP32[(0 + 89276 | 0) >> 2] | 0;
  rlLoadRenderBatch($4 + 268 | 0 | 0, 1 | 0, 2048 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 268 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
  $34 = 0;
  $271 = i64toi32_i32$0;
  i64toi32_i32$0 = $34;
  HEAP32[(i64toi32_i32$0 + 86936 | 0) >> 2] = $271;
  HEAP32[(i64toi32_i32$0 + 86940 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 284 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $278 = i64toi32_i32$1;
  i64toi32_i32$1 = $34;
  HEAP32[(i64toi32_i32$1 + 86952 | 0) >> 2] = $278;
  HEAP32[(i64toi32_i32$1 + 86956 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 276 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $285 = i64toi32_i32$0;
  i64toi32_i32$0 = $34;
  HEAP32[(i64toi32_i32$0 + 86944 | 0) >> 2] = $285;
  HEAP32[(i64toi32_i32$0 + 86948 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(0 + 86932 | 0) >> 2] = 86932 + 4 | 0;
  HEAP32[($4 + 264 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4 + 264 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
     break label$3
    }
    $57 = (86932 + 260 | 0) + ((HEAP32[($4 + 264 | 0) >> 2] | 0) << 6 | 0) | 0;
    rlMatrixIdentity($4 + 200 | 0 | 0);
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] | 0;
    $324 = i64toi32_i32$1;
    i64toi32_i32$1 = $57;
    HEAP32[i64toi32_i32$1 >> 2] = $324;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $61 = 56;
    i64toi32_i32$2 = (i64toi32_i32$2 + 200 | 0) + $61 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $337 = i64toi32_i32$0;
    i64toi32_i32$0 = $57 + $61 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $337;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $66 = 48;
    i64toi32_i32$2 = ($4 + 200 | 0) + $66 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $350 = i64toi32_i32$1;
    i64toi32_i32$1 = $57 + $66 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $350;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $71 = 40;
    i64toi32_i32$2 = ($4 + 200 | 0) + $71 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $363 = i64toi32_i32$0;
    i64toi32_i32$0 = $57 + $71 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $363;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $76 = 32;
    i64toi32_i32$2 = ($4 + 200 | 0) + $76 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $376 = i64toi32_i32$1;
    i64toi32_i32$1 = $57 + $76 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $376;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $81 = 24;
    i64toi32_i32$2 = ($4 + 200 | 0) + $81 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $389 = i64toi32_i32$0;
    i64toi32_i32$0 = $57 + $81 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $389;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $86 = 16;
    i64toi32_i32$2 = ($4 + 200 | 0) + $86 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $402 = i64toi32_i32$1;
    i64toi32_i32$1 = $57 + $86 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $402;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $91 = 8;
    i64toi32_i32$2 = ($4 + 200 | 0) + $91 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $415 = i64toi32_i32$0;
    i64toi32_i32$0 = $57 + $91 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $415;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4 + 264 | 0) >> 2] = (HEAP32[($4 + 264 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  rlMatrixIdentity($4 + 136 | 0 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 140 | 0) >> 2] | 0;
  $102 = 0;
  $431 = i64toi32_i32$1;
  i64toi32_i32$1 = $102;
  HEAP32[(i64toi32_i32$1 + 87124 | 0) >> 2] = $431;
  HEAP32[(i64toi32_i32$1 + 87128 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 192 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $438 = i64toi32_i32$0;
  i64toi32_i32$0 = $102;
  HEAP32[(i64toi32_i32$0 + 87180 | 0) >> 2] = $438;
  HEAP32[(i64toi32_i32$0 + 87184 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 184 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $445 = i64toi32_i32$1;
  i64toi32_i32$1 = $102;
  HEAP32[(i64toi32_i32$1 + 87172 | 0) >> 2] = $445;
  HEAP32[(i64toi32_i32$1 + 87176 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 176 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $452 = i64toi32_i32$0;
  i64toi32_i32$0 = $102;
  HEAP32[(i64toi32_i32$0 + 87164 | 0) >> 2] = $452;
  HEAP32[(i64toi32_i32$0 + 87168 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 168 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $459 = i64toi32_i32$1;
  i64toi32_i32$1 = $102;
  HEAP32[(i64toi32_i32$1 + 87156 | 0) >> 2] = $459;
  HEAP32[(i64toi32_i32$1 + 87160 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 160 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $466 = i64toi32_i32$0;
  i64toi32_i32$0 = $102;
  HEAP32[(i64toi32_i32$0 + 87148 | 0) >> 2] = $466;
  HEAP32[(i64toi32_i32$0 + 87152 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 152 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $473 = i64toi32_i32$1;
  i64toi32_i32$1 = $102;
  HEAP32[(i64toi32_i32$1 + 87140 | 0) >> 2] = $473;
  HEAP32[(i64toi32_i32$1 + 87144 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 144 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $480 = i64toi32_i32$0;
  i64toi32_i32$0 = $102;
  HEAP32[(i64toi32_i32$0 + 87132 | 0) >> 2] = $480;
  HEAP32[(i64toi32_i32$0 + 87136 | 0) >> 2] = i64toi32_i32$1;
  rlMatrixIdentity($4 + 72 | 0 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] | 0;
  $120 = 0;
  $489 = i64toi32_i32$1;
  i64toi32_i32$1 = $120;
  HEAP32[(i64toi32_i32$1 + 87060 | 0) >> 2] = $489;
  HEAP32[(i64toi32_i32$1 + 87064 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 128 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $496 = i64toi32_i32$0;
  i64toi32_i32$0 = $120;
  HEAP32[(i64toi32_i32$0 + 87116 | 0) >> 2] = $496;
  HEAP32[(i64toi32_i32$0 + 87120 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 120 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $503 = i64toi32_i32$1;
  i64toi32_i32$1 = $120;
  HEAP32[(i64toi32_i32$1 + 87108 | 0) >> 2] = $503;
  HEAP32[(i64toi32_i32$1 + 87112 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 112 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $510 = i64toi32_i32$0;
  i64toi32_i32$0 = $120;
  HEAP32[(i64toi32_i32$0 + 87100 | 0) >> 2] = $510;
  HEAP32[(i64toi32_i32$0 + 87104 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 104 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $517 = i64toi32_i32$1;
  i64toi32_i32$1 = $120;
  HEAP32[(i64toi32_i32$1 + 87092 | 0) >> 2] = $517;
  HEAP32[(i64toi32_i32$1 + 87096 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 96 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $524 = i64toi32_i32$0;
  i64toi32_i32$0 = $120;
  HEAP32[(i64toi32_i32$0 + 87084 | 0) >> 2] = $524;
  HEAP32[(i64toi32_i32$0 + 87088 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 88 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $531 = i64toi32_i32$1;
  i64toi32_i32$1 = $120;
  HEAP32[(i64toi32_i32$1 + 87076 | 0) >> 2] = $531;
  HEAP32[(i64toi32_i32$1 + 87080 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 80 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $538 = i64toi32_i32$0;
  i64toi32_i32$0 = $120;
  HEAP32[(i64toi32_i32$0 + 87068 | 0) >> 2] = $538;
  HEAP32[(i64toi32_i32$0 + 87072 | 0) >> 2] = i64toi32_i32$1;
  rlMatrixIdentity($4 + 8 | 0 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $138 = 0;
  $547 = i64toi32_i32$1;
  i64toi32_i32$1 = $138;
  HEAP32[(i64toi32_i32$1 + 86996 | 0) >> 2] = $547;
  HEAP32[(i64toi32_i32$1 + 87e3 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 64 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $554 = i64toi32_i32$0;
  i64toi32_i32$0 = $138;
  HEAP32[(i64toi32_i32$0 + 87052 | 0) >> 2] = $554;
  HEAP32[(i64toi32_i32$0 + 87056 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $561 = i64toi32_i32$1;
  i64toi32_i32$1 = $138;
  HEAP32[(i64toi32_i32$1 + 87044 | 0) >> 2] = $561;
  HEAP32[(i64toi32_i32$1 + 87048 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 48 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $568 = i64toi32_i32$0;
  i64toi32_i32$0 = $138;
  HEAP32[(i64toi32_i32$0 + 87036 | 0) >> 2] = $568;
  HEAP32[(i64toi32_i32$0 + 87040 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $575 = i64toi32_i32$1;
  i64toi32_i32$1 = $138;
  HEAP32[(i64toi32_i32$1 + 87028 | 0) >> 2] = $575;
  HEAP32[(i64toi32_i32$1 + 87032 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $582 = i64toi32_i32$0;
  i64toi32_i32$0 = $138;
  HEAP32[(i64toi32_i32$0 + 87020 | 0) >> 2] = $582;
  HEAP32[(i64toi32_i32$0 + 87024 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $589 = i64toi32_i32$1;
  i64toi32_i32$1 = $138;
  HEAP32[(i64toi32_i32$1 + 87012 | 0) >> 2] = $589;
  HEAP32[(i64toi32_i32$1 + 87016 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $596 = i64toi32_i32$0;
  i64toi32_i32$0 = $138;
  HEAP32[(i64toi32_i32$0 + 87004 | 0) >> 2] = $596;
  HEAP32[(i64toi32_i32$0 + 87008 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(0 + 86992 | 0) >> 2] = 86932 + 64 | 0;
  glDepthFunc(515 | 0);
  glDisable(2929 | 0);
  glBlendFunc(770 | 0, 771 | 0);
  glEnable(3042 | 0);
  glCullFace(1029 | 0);
  glFrontFace(2305 | 0);
  glEnable(2884 | 0);
  HEAP32[(0 + 89592 | 0) >> 2] = HEAP32[($4 + 300 | 0) >> 2] | 0;
  HEAP32[(0 + 89596 | 0) >> 2] = HEAP32[($4 + 296 | 0) >> 2] | 0;
  TraceLog(3 | 0, 65653 | 0, 0 | 0);
  $211 = Math_fround(0 | 0);
  glClearColor(Math_fround($211), Math_fround($211), Math_fround($211), Math_fround(Math_fround(1.0)));
  glClearDepthf(Math_fround(Math_fround(1.0)));
  glClear(16640 | 0);
  __stack_pointer = $4 + 304 | 0;
  return;
 }
 
 function rlLoadTexture($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $255 = 0, $256 = 0, $257 = 0, $259 = 0, $269 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 72 | 0) >> 2] = $0;
  HEAP32[($7 + 68 | 0) >> 2] = $1;
  HEAP32[($7 + 64 | 0) >> 2] = $2;
  HEAP32[($7 + 60 | 0) >> 2] = $3;
  HEAP32[($7 + 56 | 0) >> 2] = $4;
  HEAP32[($7 + 52 | 0) >> 2] = 0;
  glBindTexture(3553 | 0, 0 | 0);
  label$1 : {
   label$2 : {
    if ((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (11 | 0) & 1 | 0) {
      break label$3
     }
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0) {
      break label$3
     }
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (13 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (14 | 0) & 1 | 0)) {
      break label$2
     }
    }
    TraceLog(4 | 0, 70659 | 0, 0 | 0);
    HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
    break label$1;
   }
   label$4 : {
    if ((HEAPU8[(0 + 89607 | 0) >> 0] | 0) & 1 | 0) {
     break label$4
    }
    if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (15 | 0) & 1 | 0)) {
     break label$4
    }
    TraceLog(4 | 0, 70854 | 0, 0 | 0);
    HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
    break label$1;
   }
   label$5 : {
    if ((HEAPU8[(0 + 89608 | 0) >> 0] | 0) & 1 | 0) {
     break label$5
    }
    label$6 : {
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0) {
      break label$6
     }
     if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (17 | 0) & 1 | 0)) {
      break label$5
     }
    }
    TraceLog(4 | 0, 70805 | 0, 0 | 0);
    HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
    break label$1;
   }
   label$7 : {
    if ((HEAPU8[(0 + 89609 | 0) >> 0] | 0) & 1 | 0) {
     break label$7
    }
    label$8 : {
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (18 | 0) & 1 | 0) {
      break label$8
     }
     if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (19 | 0) & 1 | 0)) {
      break label$7
     }
    }
    TraceLog(4 | 0, 70707 | 0, 0 | 0);
    HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
    break label$1;
   }
   label$9 : {
    if ((HEAPU8[(0 + 89610 | 0) >> 0] | 0) & 1 | 0) {
     break label$9
    }
    label$10 : {
     if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (20 | 0) & 1 | 0) {
      break label$10
     }
     if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) == (21 | 0) & 1 | 0)) {
      break label$9
     }
    }
    TraceLog(4 | 0, 70756 | 0, 0 | 0);
    HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
    break label$1;
   }
   glPixelStorei(3317 | 0, 1 | 0);
   glGenTextures(1 | 0, $7 + 52 | 0 | 0);
   glBindTexture(3553 | 0, HEAP32[($7 + 52 | 0) >> 2] | 0 | 0);
   HEAP32[($7 + 48 | 0) >> 2] = HEAP32[($7 + 68 | 0) >> 2] | 0;
   HEAP32[($7 + 44 | 0) >> 2] = HEAP32[($7 + 64 | 0) >> 2] | 0;
   HEAP32[($7 + 40 | 0) >> 2] = 0;
   HEAP32[($7 + 36 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($7 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($7 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($7 + 32 | 0) >> 2] = rlGetPixelDataSize(HEAP32[($7 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) | 0;
     rlGetGlTextureFormats(HEAP32[($7 + 60 | 0) >> 2] | 0 | 0, $7 + 28 | 0 | 0, $7 + 24 | 0 | 0, $7 + 20 | 0 | 0);
     label$13 : {
      if (!((HEAP32[($7 + 28 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
       break label$13
      }
      label$14 : {
       label$15 : {
        if (!((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) < (11 | 0) & 1 | 0)) {
         break label$15
        }
        glTexImage2D(3553 | 0, HEAP32[($7 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7 + 44 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7 + 20 | 0) >> 2] | 0 | 0, (HEAP32[($7 + 72 | 0) >> 2] | 0) + (HEAP32[($7 + 40 | 0) >> 2] | 0) | 0 | 0);
        break label$14;
       }
       glCompressedTexImage2D(3553 | 0, HEAP32[($7 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7 + 28 | 0) >> 2] | 0 | 0, HEAP32[($7 + 48 | 0) >> 2] | 0 | 0, HEAP32[($7 + 44 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($7 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($7 + 72 | 0) >> 2] | 0) + (HEAP32[($7 + 40 | 0) >> 2] | 0) | 0 | 0);
      }
     }
     HEAP32[($7 + 48 | 0) >> 2] = (HEAP32[($7 + 48 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
     HEAP32[($7 + 44 | 0) >> 2] = (HEAP32[($7 + 44 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
     HEAP32[($7 + 40 | 0) >> 2] = (HEAP32[($7 + 40 | 0) >> 2] | 0) + (HEAP32[($7 + 32 | 0) >> 2] | 0) | 0;
     label$16 : {
      if (!((HEAP32[($7 + 48 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($7 + 48 | 0) >> 2] = 1;
     }
     label$17 : {
      if (!((HEAP32[($7 + 44 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
       break label$17
      }
      HEAP32[($7 + 44 | 0) >> 2] = 1;
     }
     HEAP32[($7 + 36 | 0) >> 2] = (HEAP32[($7 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   label$18 : {
    label$19 : {
     if (!((HEAPU8[(0 + 89602 | 0) >> 0] | 0) & 1 | 0)) {
      break label$19
     }
     glTexParameteri(3553 | 0, 10242 | 0, 10497 | 0);
     glTexParameteri(3553 | 0, 10243 | 0, 10497 | 0);
     break label$18;
    }
    glTexParameteri(3553 | 0, 10242 | 0, 33071 | 0);
    glTexParameteri(3553 | 0, 10243 | 0, 33071 | 0);
   }
   glTexParameteri(3553 | 0, 10240 | 0, 9728 | 0);
   glTexParameteri(3553 | 0, 10241 | 0, 9728 | 0);
   glBindTexture(3553 | 0, 0 | 0);
   label$20 : {
    label$21 : {
     if (!((HEAP32[($7 + 52 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$21
     }
     $255 = HEAP32[($7 + 52 | 0) >> 2] | 0;
     $256 = HEAP32[($7 + 68 | 0) >> 2] | 0;
     $257 = HEAP32[($7 + 64 | 0) >> 2] | 0;
     $259 = rlGetPixelFormatName(HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($7 + 16 | 0) >> 2] = HEAP32[($7 + 56 | 0) >> 2] | 0;
     HEAP32[($7 + 12 | 0) >> 2] = $259;
     HEAP32[($7 + 8 | 0) >> 2] = $257;
     HEAP32[($7 + 4 | 0) >> 2] = $256;
     HEAP32[$7 >> 2] = $255;
     TraceLog(3 | 0, 73753 | 0, $7 | 0);
     break label$20;
    }
    TraceLog(4 | 0, 70143 | 0, 0 | 0);
   }
   HEAP32[($7 + 76 | 0) >> 2] = HEAP32[($7 + 52 | 0) >> 2] | 0;
  }
  $269 = HEAP32[($7 + 76 | 0) >> 2] | 0;
  __stack_pointer = $7 + 80 | 0;
  return $269 | 0;
 }
 
 function rlLoadShaderDefault() {
  var $2 = 0, $56 = 0, $62 = 0, $68 = 0, $74 = 0, $80 = 0, $86 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[(0 + 89276 | 0) >> 2] = dlcalloc(32 | 0, 4 | 0) | 0;
  HEAP32[($2 + 28 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + ((HEAP32[($2 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
    HEAP32[($2 + 28 | 0) >> 2] = (HEAP32[($2 + 28 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($2 + 24 | 0) >> 2] = 74791;
  HEAP32[($2 + 20 | 0) >> 2] = 75274;
  HEAP32[(0 + 89264 | 0) >> 2] = rlCompileShader(HEAP32[($2 + 24 | 0) >> 2] | 0 | 0, 35633 | 0) | 0;
  HEAP32[(0 + 89268 | 0) >> 2] = rlCompileShader(HEAP32[($2 + 20 | 0) >> 2] | 0 | 0, 35632 | 0) | 0;
  HEAP32[(0 + 89272 | 0) >> 2] = rlLoadShaderProgram(HEAP32[(0 + 89264 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89268 | 0) >> 2] | 0 | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(0 + 89272 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$4
    }
    HEAP32[$2 >> 2] = HEAP32[(0 + 89272 | 0) >> 2] | 0;
    TraceLog(3 | 0, 66127 | 0, $2 | 0);
    $56 = glGetAttribLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 68596 | 0) | 0;
    HEAP32[(HEAP32[(0 + 89276 | 0) >> 2] | 0) >> 2] = $56;
    $62 = glGetAttribLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 70599 | 0) | 0;
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + 4 | 0) >> 2] = $62;
    $68 = glGetAttribLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 68032 | 0) | 0;
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + 20 | 0) >> 2] = $68;
    $74 = glGetUniformLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 68520 | 0) | 0;
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + 24 | 0) >> 2] = $74;
    $80 = glGetUniformLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 69971 | 0) | 0;
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + 48 | 0) >> 2] = $80;
    $86 = glGetUniformLocation(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, 73581 | 0) | 0;
    HEAP32[((HEAP32[(0 + 89276 | 0) >> 2] | 0) + 60 | 0) >> 2] = $86;
    break label$3;
   }
   HEAP32[($2 + 16 | 0) >> 2] = HEAP32[(0 + 89272 | 0) >> 2] | 0;
   TraceLog(4 | 0, 68329 | 0, $2 + 16 | 0 | 0);
  }
  __stack_pointer = $2 + 32 | 0;
  return;
 }
 
 function rlLoadRenderBatch($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $514 = 0, $338 = 0, $382 = 0, $426 = 0, $35 = 0, $48 = 0, $61 = 0, $72 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 44 | 0) >> 2] = $1;
  HEAP32[($5 + 40 | 0) >> 2] = $2;
  i64toi32_i32$0 = 0;
  $514 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[$0 >> 2] = $514;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $514;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $514;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 8 | 0) >> 2] = dlmalloc(Math_imul(HEAP32[($5 + 44 | 0) >> 2] | 0, 40) | 0) | 0;
  HEAP32[($5 + 36 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5 + 36 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) >> 2] = HEAP32[($5 + 40 | 0) >> 2] | 0;
    $35 = dlmalloc((Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 3) << 2 | 0) << 2 | 0 | 0) | 0;
    HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] = $35;
    $48 = dlmalloc((((HEAP32[($5 + 40 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) << 2 | 0 | 0) | 0;
    HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] = $48;
    $61 = dlmalloc((((HEAP32[($5 + 40 | 0) >> 2] | 0) << 2 | 0) << 2 | 0) << 0 | 0 | 0) | 0;
    HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] = $61;
    $72 = dlmalloc(Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 6) << 1 | 0 | 0) | 0;
    HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] = $72;
    HEAP32[($5 + 32 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5 + 32 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 12) | 0) & 1 | 0)) {
       break label$3
      }
      HEAPF32[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[($5 + 32 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(0 | 0);
      HEAP32[($5 + 32 | 0) >> 2] = (HEAP32[($5 + 32 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($5 + 28 | 0) >> 2] = 0;
    label$5 : {
     label$6 : while (1) {
      if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) < ((HEAP32[($5 + 40 | 0) >> 2] | 0) << 3 | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAPF32[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0) + ((HEAP32[($5 + 28 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(0 | 0);
      HEAP32[($5 + 28 | 0) >> 2] = (HEAP32[($5 + 28 | 0) >> 2] | 0) + 1 | 0;
      continue label$6;
     };
    }
    HEAP32[($5 + 24 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) < ((HEAP32[($5 + 40 | 0) >> 2] | 0) << 4 | 0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP8[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0) + (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0) >> 0] = 0;
      HEAP32[($5 + 24 | 0) >> 2] = (HEAP32[($5 + 24 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
    HEAP32[($5 + 20 | 0) >> 2] = 0;
    HEAP32[($5 + 16 | 0) >> 2] = 0;
    label$9 : {
     label$10 : while (1) {
      if (!((HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 6) | 0) & 1 | 0)) {
       break label$9
      }
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = (HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0;
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + (((HEAP32[($5 + 16 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] = ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) + 1 | 0;
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + (((HEAP32[($5 + 16 | 0) >> 2] | 0) + 2 | 0) << 1 | 0) | 0) >> 1] = ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) + 2 | 0;
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + (((HEAP32[($5 + 16 | 0) >> 2] | 0) + 3 | 0) << 1 | 0) | 0) >> 1] = (HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0;
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + (((HEAP32[($5 + 16 | 0) >> 2] | 0) + 4 | 0) << 1 | 0) | 0) >> 1] = ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) + 2 | 0;
      HEAP16[((HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 36 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0) + (((HEAP32[($5 + 16 | 0) >> 2] | 0) + 5 | 0) << 1 | 0) | 0) >> 1] = ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) + 3 | 0;
      HEAP32[($5 + 20 | 0) >> 2] = (HEAP32[($5 + 20 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($5 + 16 | 0) >> 2] = (HEAP32[($5 + 16 | 0) >> 2] | 0) + 6 | 0;
      continue label$10;
     };
    }
    HEAP32[(0 + 86960 | 0) >> 2] = 0;
    HEAP32[($5 + 36 | 0) >> 2] = (HEAP32[($5 + 36 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  TraceLog(3 | 0, 74535 | 0, 0 | 0);
  HEAP32[($5 + 12 | 0) >> 2] = 0;
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$11
    }
    label$13 : {
     if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
      break label$13
     }
     FUNCTION_TABLE[HEAP32[(0 + 89624 | 0) >> 2] | 0 | 0](1, ((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 20 | 0);
     FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] | 0);
    }
    glGenBuffers(1 | 0, ((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0 | 0);
    glBindBuffer(34962 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) >> 2] | 0 | 0);
    glBufferData(34962 | 0, (Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 3) << 2 | 0) << 2 | 0 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0 | 0, 35048 | 0);
    glEnableVertexAttribArray(HEAP32[(HEAP32[(0 + 89284 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $338 = 0;
    glVertexAttribPointer(HEAP32[(HEAP32[(0 + 89284 | 0) >> 2] | 0) >> 2] | 0 | 0, 3 | 0, 5126 | 0, 0 & 255 | 0 | 0, $338 | 0, $338 | 0);
    glGenBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 4 | 0 | 0);
    glBindBuffer(34962 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 28 | 0) >> 2] | 0 | 0);
    glBufferData(34962 | 0, (((HEAP32[($5 + 40 | 0) >> 2] | 0) << 1 | 0) << 2 | 0) << 2 | 0 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0 | 0, 35048 | 0);
    glEnableVertexAttribArray(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
    $382 = 0;
    glVertexAttribPointer(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 2 | 0, 5126 | 0, 0 & 255 | 0 | 0, $382 | 0, $382 | 0);
    glGenBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 8 | 0 | 0);
    glBindBuffer(34962 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 32 | 0) >> 2] | 0 | 0);
    glBufferData(34962 | 0, (((HEAP32[($5 + 40 | 0) >> 2] | 0) << 2 | 0) << 2 | 0) << 0 | 0 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0 | 0, 35048 | 0);
    glEnableVertexAttribArray(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
    $426 = 0;
    glVertexAttribPointer(HEAP32[((HEAP32[(0 + 89284 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0, 4 | 0, 5121 | 0, 1 & 255 | 0 | 0, $426 | 0, $426 | 0);
    glGenBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 12 | 0 | 0);
    glBindBuffer(34963 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 36 | 0) >> 2] | 0 | 0);
    glBufferData(34963 | 0, Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0, 6) << 1 | 0 | 0, HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 12 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0 | 0, 35044 | 0);
    HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$12;
   };
  }
  TraceLog(3 | 0, 74412 | 0, 0 | 0);
  label$14 : {
   if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
    break label$14
   }
   FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](0);
  }
  HEAP32[($0 + 12 | 0) >> 2] = dlmalloc(4096 | 0) | 0;
  HEAP32[($5 + 8 | 0) >> 2] = 0;
  label$15 : {
   label$16 : while (1) {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) < (256 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[((HEAP32[($0 + 12 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = 7;
    HEAP32[(((HEAP32[($0 + 12 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = 0;
    HEAP32[(((HEAP32[($0 + 12 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = 0;
    HEAP32[(((HEAP32[($0 + 12 | 0) >> 2] | 0) + ((HEAP32[($5 + 8 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = HEAP32[(0 + 89244 | 0) >> 2] | 0;
    HEAP32[($5 + 8 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$16;
   };
  }
  HEAP32[$0 >> 2] = HEAP32[($5 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 16 | 0) >> 2] = 1;
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(-1.0);
  __stack_pointer = $5 + 48 | 0;
  return;
 }
 
 function rlGetPixelDataSize($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $9 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  $6 = 0;
  HEAP32[($5 + 16 | 0) >> 2] = $6;
  HEAP32[($5 + 12 | 0) >> 2] = $6;
  $9 = (HEAP32[($5 + 20 | 0) >> 2] | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($9 | 0) {
    case 0:
     HEAP32[($5 + 12 | 0) >> 2] = 8;
     break label$1;
    case 1:
    case 2:
    case 4:
    case 5:
     HEAP32[($5 + 12 | 0) >> 2] = 16;
     break label$1;
    case 6:
     HEAP32[($5 + 12 | 0) >> 2] = 32;
     break label$1;
    case 3:
     HEAP32[($5 + 12 | 0) >> 2] = 24;
     break label$1;
    case 7:
     HEAP32[($5 + 12 | 0) >> 2] = 32;
     break label$1;
    case 8:
     HEAP32[($5 + 12 | 0) >> 2] = 96;
     break label$1;
    case 9:
     HEAP32[($5 + 12 | 0) >> 2] = 128;
     break label$1;
    case 10:
    case 11:
    case 14:
    case 15:
    case 17:
    case 18:
     HEAP32[($5 + 12 | 0) >> 2] = 4;
     break label$1;
    case 12:
    case 13:
    case 16:
    case 19:
     HEAP32[($5 + 12 | 0) >> 2] = 8;
     break label$1;
    case 20:
     HEAP32[($5 + 12 | 0) >> 2] = 2;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  HEAP32[($5 + 16 | 0) >> 2] = (Math_imul(Math_imul(HEAP32[($5 + 28 | 0) >> 2] | 0, HEAP32[($5 + 24 | 0) >> 2] | 0), HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) / (8 | 0) | 0;
  label$13 : {
   if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
    break label$13
   }
   if (!((HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
    break label$13
   }
   label$14 : {
    label$15 : {
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) >= (11 | 0) & 1 | 0)) {
      break label$15
     }
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) < (13 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[($5 + 16 | 0) >> 2] = 8;
     break label$14;
    }
    label$16 : {
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) >= (13 | 0) & 1 | 0)) {
      break label$16
     }
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
      break label$16
     }
     HEAP32[($5 + 16 | 0) >> 2] = 16;
    }
   }
  }
  return HEAP32[($5 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function rlGetGlTextureFormats($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $8 = 0, $13 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  $8 = 0;
  HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = $8;
  HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = $8;
  HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = $8;
  $13 = (HEAP32[($6 + 28 | 0) >> 2] | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($13 | 0) {
    case 0:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6409;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6409;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5121;
     break label$1;
    case 1:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6410;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6410;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5121;
     break label$1;
    case 2:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6407;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6407;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 33635;
     break label$1;
    case 3:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6407;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6407;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5121;
     break label$1;
    case 4:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 32820;
     break label$1;
    case 5:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 32819;
     break label$1;
    case 6:
     HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5121;
     break label$1;
    case 7:
     label$24 : {
      if (!((HEAPU8[(0 + 89605 | 0) >> 0] | 0) & 1 | 0)) {
       break label$24
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6409;
     }
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6409;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5126;
     break label$1;
    case 8:
     label$25 : {
      if (!((HEAPU8[(0 + 89605 | 0) >> 0] | 0) & 1 | 0)) {
       break label$25
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6407;
     }
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6407;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5126;
     break label$1;
    case 9:
     label$26 : {
      if (!((HEAPU8[(0 + 89605 | 0) >> 0] | 0) & 1 | 0)) {
       break label$26
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 6408;
     }
     HEAP32[(HEAP32[($6 + 20 | 0) >> 2] | 0) >> 2] = 6408;
     HEAP32[(HEAP32[($6 + 16 | 0) >> 2] | 0) >> 2] = 5126;
     break label$1;
    case 10:
     label$27 : {
      if (!((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0)) {
       break label$27
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 33776;
     }
     break label$1;
    case 11:
     label$28 : {
      if (!((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0)) {
       break label$28
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 33777;
     }
     break label$1;
    case 12:
     label$29 : {
      if (!((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 33778;
     }
     break label$1;
    case 13:
     label$30 : {
      if (!((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0)) {
       break label$30
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 33779;
     }
     break label$1;
    case 14:
     label$31 : {
      if (!((HEAPU8[(0 + 89607 | 0) >> 0] | 0) & 1 | 0)) {
       break label$31
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 36196;
     }
     break label$1;
    case 15:
     label$32 : {
      if (!((HEAPU8[(0 + 89608 | 0) >> 0] | 0) & 1 | 0)) {
       break label$32
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 37492;
     }
     break label$1;
    case 16:
     label$33 : {
      if (!((HEAPU8[(0 + 89608 | 0) >> 0] | 0) & 1 | 0)) {
       break label$33
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 37496;
     }
     break label$1;
    case 17:
     label$34 : {
      if (!((HEAPU8[(0 + 89609 | 0) >> 0] | 0) & 1 | 0)) {
       break label$34
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 35840;
     }
     break label$1;
    case 18:
     label$35 : {
      if (!((HEAPU8[(0 + 89609 | 0) >> 0] | 0) & 1 | 0)) {
       break label$35
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 35842;
     }
     break label$1;
    case 19:
     label$36 : {
      if (!((HEAPU8[(0 + 89610 | 0) >> 0] | 0) & 1 | 0)) {
       break label$36
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 37808;
     }
     break label$1;
    case 20:
     label$37 : {
      if (!((HEAPU8[(0 + 89610 | 0) >> 0] | 0) & 1 | 0)) {
       break label$37
      }
      HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] = 37815;
     }
     break label$1;
    default:
     break label$2;
    };
   }
   HEAP32[$6 >> 2] = HEAP32[($6 + 28 | 0) >> 2] | 0;
   TraceLog(4 | 0, 74305 | 0, $6 | 0);
  }
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function rlGetPixelFormatName($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  $6 = (HEAP32[($3 + 8 | 0) >> 2] | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($6 | 0) {
    case 0:
     HEAP32[($3 + 12 | 0) >> 2] = 72284;
     break label$1;
    case 1:
     HEAP32[($3 + 12 | 0) >> 2] = 72509;
     break label$1;
    case 2:
     HEAP32[($3 + 12 | 0) >> 2] = 73416;
     break label$1;
    case 3:
     HEAP32[($3 + 12 | 0) >> 2] = 73330;
     break label$1;
    case 4:
     HEAP32[($3 + 12 | 0) >> 2] = 73572;
     break label$1;
    case 5:
     HEAP32[($3 + 12 | 0) >> 2] = 73457;
     break label$1;
    case 6:
     HEAP32[($3 + 12 | 0) >> 2] = 73381;
     break label$1;
    case 7:
     HEAP32[($3 + 12 | 0) >> 2] = 73512;
     break label$1;
    case 8:
     HEAP32[($3 + 12 | 0) >> 2] = 73516;
     break label$1;
    case 9:
     HEAP32[($3 + 12 | 0) >> 2] = 73526;
     break label$1;
    case 10:
     HEAP32[($3 + 12 | 0) >> 2] = 72491;
     break label$1;
    case 11:
     HEAP32[($3 + 12 | 0) >> 2] = 72588;
     break label$1;
    case 12:
     HEAP32[($3 + 12 | 0) >> 2] = 72568;
     break label$1;
    case 13:
     HEAP32[($3 + 12 | 0) >> 2] = 72544;
     break label$1;
    case 14:
     HEAP32[($3 + 12 | 0) >> 2] = 72500;
     break label$1;
    case 15:
     HEAP32[($3 + 12 | 0) >> 2] = 72482;
     break label$1;
    case 16:
     HEAP32[($3 + 12 | 0) >> 2] = 72578;
     break label$1;
    case 17:
     HEAP32[($3 + 12 | 0) >> 2] = 72473;
     break label$1;
    case 18:
     HEAP32[($3 + 12 | 0) >> 2] = 72520;
     break label$1;
    case 19:
     HEAP32[($3 + 12 | 0) >> 2] = 72554;
     break label$1;
    case 20:
     HEAP32[($3 + 12 | 0) >> 2] = 72530;
     break label$1;
    default:
     break label$2;
    };
   }
   HEAP32[($3 + 12 | 0) >> 2] = 72152;
  }
  return HEAP32[($3 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function rlCompileShader($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $24 = 0, $66 = 0, $59 = 0, $78 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 92 | 0) >> 2] = $0;
  HEAP32[($4 + 88 | 0) >> 2] = $1;
  HEAP32[($4 + 84 | 0) >> 2] = 0;
  HEAP32[($4 + 84 | 0) >> 2] = glCreateShader(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0) | 0;
  glShaderSource(HEAP32[($4 + 84 | 0) >> 2] | 0 | 0, 1 | 0, $4 + 92 | 0 | 0, 0 | 0);
  HEAP32[($4 + 80 | 0) >> 2] = 0;
  glCompileShader(HEAP32[($4 + 84 | 0) >> 2] | 0 | 0);
  glGetShaderiv(HEAP32[($4 + 84 | 0) >> 2] | 0 | 0, 35713 | 0, $4 + 80 | 0 | 0);
  label$1 : {
   label$2 : {
    if (HEAP32[($4 + 80 | 0) >> 2] | 0) {
     break label$2
    }
    $24 = (HEAP32[($4 + 88 | 0) >> 2] | 0) + -35632 | 0;
    label$3 : {
     label$4 : {
      switch ($24 | 0) {
      case 1:
       HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
       TraceLog(4 | 0, 70399 | 0, $4 + 16 | 0 | 0);
       break label$3;
      case 0:
       HEAP32[($4 + 32 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
       TraceLog(4 | 0, 70452 | 0, $4 + 32 | 0 | 0);
       break label$3;
      default:
       break label$4;
      };
     }
    }
    HEAP32[($4 + 76 | 0) >> 2] = 0;
    glGetShaderiv(HEAP32[($4 + 84 | 0) >> 2] | 0 | 0, 35716 | 0, $4 + 76 | 0 | 0);
    label$7 : {
     if (!((HEAP32[($4 + 76 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($4 + 72 | 0) >> 2] = 0;
     HEAP32[($4 + 68 | 0) >> 2] = dlcalloc(HEAP32[($4 + 76 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
     glGetShaderInfoLog(HEAP32[($4 + 84 | 0) >> 2] | 0 | 0, HEAP32[($4 + 76 | 0) >> 2] | 0 | 0, $4 + 72 | 0 | 0, HEAP32[($4 + 68 | 0) >> 2] | 0 | 0);
     $59 = HEAP32[($4 + 84 | 0) >> 2] | 0;
     HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 68 | 0) >> 2] | 0;
     HEAP32[$4 >> 2] = $59;
     TraceLog(4 | 0, 67799 | 0, $4 | 0);
     dlfree(HEAP32[($4 + 68 | 0) >> 2] | 0 | 0);
    }
    break label$1;
   }
   $66 = (HEAP32[($4 + 88 | 0) >> 2] | 0) + -35632 | 0;
   label$8 : {
    label$9 : {
     switch ($66 | 0) {
     case 1:
      HEAP32[($4 + 48 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
      TraceLog(3 | 0, 65851 | 0, $4 + 48 | 0 | 0);
      break label$8;
     case 0:
      HEAP32[($4 + 64 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
      TraceLog(3 | 0, 65903 | 0, $4 + 64 | 0 | 0);
      break label$8;
     default:
      break label$9;
     };
    }
   }
  }
  $78 = HEAP32[($4 + 84 | 0) >> 2] | 0;
  __stack_pointer = $4 + 96 | 0;
  return $78 | 0;
 }
 
 function rlLoadShaderProgram($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $65 = 0, $77 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $0;
  HEAP32[($4 + 56 | 0) >> 2] = $1;
  HEAP32[($4 + 52 | 0) >> 2] = 0;
  HEAP32[($4 + 48 | 0) >> 2] = 0;
  HEAP32[($4 + 52 | 0) >> 2] = glCreateProgram() | 0;
  glAttachShader(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, HEAP32[($4 + 60 | 0) >> 2] | 0 | 0);
  glAttachShader(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, HEAP32[($4 + 56 | 0) >> 2] | 0 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 0 | 0, 68596 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 1 | 0, 70599 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 2 | 0, 69022 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 3 | 0, 68032 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 4 | 0, 67168 | 0);
  glBindAttribLocation(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 5 | 0, 73481 | 0);
  glLinkProgram(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0);
  glGetProgramiv(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 35714 | 0, $4 + 48 | 0 | 0);
  label$1 : {
   label$2 : {
    if (HEAP32[($4 + 48 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 52 | 0) >> 2] | 0;
    TraceLog(4 | 0, 68790 | 0, $4 + 16 | 0 | 0);
    HEAP32[($4 + 44 | 0) >> 2] = 0;
    glGetProgramiv(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, 35716 | 0, $4 + 44 | 0 | 0);
    label$3 : {
     if (!((HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4 + 40 | 0) >> 2] = 0;
     HEAP32[($4 + 36 | 0) >> 2] = dlcalloc(HEAP32[($4 + 44 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
     glGetProgramInfoLog(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0, HEAP32[($4 + 44 | 0) >> 2] | 0 | 0, $4 + 40 | 0 | 0, HEAP32[($4 + 36 | 0) >> 2] | 0 | 0);
     $65 = HEAP32[($4 + 52 | 0) >> 2] | 0;
     HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 36 | 0) >> 2] | 0;
     HEAP32[$4 >> 2] = $65;
     TraceLog(4 | 0, 67768 | 0, $4 | 0);
     dlfree(HEAP32[($4 + 36 | 0) >> 2] | 0 | 0);
    }
    glDeleteProgram(HEAP32[($4 + 52 | 0) >> 2] | 0 | 0);
    HEAP32[($4 + 52 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4 + 32 | 0) >> 2] = HEAP32[($4 + 52 | 0) >> 2] | 0;
   TraceLog(3 | 0, 66178 | 0, $4 + 32 | 0 | 0);
  }
  $77 = HEAP32[($4 + 52 | 0) >> 2] | 0;
  __stack_pointer = $4 + 64 | 0;
  return $77 | 0;
 }
 
 function rlglClose() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2 = 0, $36 = 0, $43 = 0, $47 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 86952 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 86956 | 0) >> 2] | 0;
  $36 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $36;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 86944 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 86948 | 0) >> 2] | 0;
  $43 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $43;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 86936 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 86940 | 0) >> 2] | 0;
  $47 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $47;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  rlUnloadRenderBatch(i64toi32_i32$0 + 8 | 0 | 0);
  rlUnloadShaderDefault();
  glDeleteTextures(1 | 0, 86932 + 2312 | 0 | 0);
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = HEAP32[(0 + 89244 | 0) >> 2] | 0;
  TraceLog(3 | 0, 66010 | 0, i64toi32_i32$0 + 32 | 0 | 0);
  __stack_pointer = i64toi32_i32$0 + 48 | 0;
  return;
 }
 
 function rlUnloadRenderBatch($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  glBindBuffer(34962 | 0, 0 | 0);
  glBindBuffer(34963 | 0, 0 | 0);
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[$0 >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] | 0);
     glDisableVertexAttribArray(0 | 0);
     glDisableVertexAttribArray(1 | 0);
     glDisableVertexAttribArray(2 | 0);
     glDisableVertexAttribArray(3 | 0);
     FUNCTION_TABLE[HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0](0);
    }
    glDeleteBuffers(1 | 0, ((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0 | 0);
    glDeleteBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 4 | 0 | 0);
    glDeleteBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 8 | 0 | 0);
    glDeleteBuffers(1 | 0, (((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 24 | 0) + 12 | 0 | 0);
    label$4 : {
     if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
      break label$4
     }
     FUNCTION_TABLE[HEAP32[(0 + 89632 | 0) >> 2] | 0 | 0](1, ((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 20 | 0);
    }
    dlfree(HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] | 0 | 0);
    dlfree(HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] | 0 | 0);
    dlfree(HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0 | 0);
    dlfree(HEAP32[(((HEAP32[($0 + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] | 0 | 0);
    HEAP32[($3 + 12 | 0) >> 2] = (HEAP32[($3 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  dlfree(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
  dlfree(HEAP32[($0 + 12 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function rlUnloadShaderDefault() {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  glUseProgram(0 | 0);
  glDetachShader(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89264 | 0) >> 2] | 0 | 0);
  glDetachShader(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89268 | 0) >> 2] | 0 | 0);
  glDeleteShader(HEAP32[(0 + 89264 | 0) >> 2] | 0 | 0);
  glDeleteShader(HEAP32[(0 + 89268 | 0) >> 2] | 0 | 0);
  glDeleteProgram(HEAP32[(0 + 89272 | 0) >> 2] | 0 | 0);
  dlfree(HEAP32[(0 + 89276 | 0) >> 2] | 0 | 0);
  HEAP32[$2 >> 2] = HEAP32[(0 + 89272 | 0) >> 2] | 0;
  TraceLog(3 | 0, 65957 | 0, $2 | 0);
  __stack_pointer = $2 + 16 | 0;
  return;
 }
 
 function rlLoadExtensions($0) {
  $0 = $0 | 0;
  var $3 = 0, $36 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 108 | 0) >> 2] = $0;
  HEAP32[($3 + 104 | 0) >> 2] = 0;
  HEAP32[($3 + 100 | 0) >> 2] = dlmalloc(2048 | 0) | 0;
  HEAP32[($3 + 96 | 0) >> 2] = glGetString(7939 | 0) | 0;
  HEAP32[($3 + 92 | 0) >> 2] = (strlen(HEAP32[($3 + 96 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
  HEAP32[($3 + 88 | 0) >> 2] = dlcalloc(HEAP32[($3 + 92 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
  strcpy(HEAP32[($3 + 88 | 0) >> 2] | 0 | 0, HEAP32[($3 + 96 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($3 + 88 | 0) >> 2] | 0;
  HEAP32[($3 + 84 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3 + 84 | 0) >> 2] | 0 | 0) < (HEAP32[($3 + 92 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $36 = 24;
    label$3 : {
     if (!((((HEAPU8[((HEAP32[($3 + 88 | 0) >> 2] | 0) + (HEAP32[($3 + 84 | 0) >> 2] | 0) | 0) >> 0] | 0) << $36 | 0) >> $36 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP8[((HEAP32[($3 + 88 | 0) >> 2] | 0) + (HEAP32[($3 + 84 | 0) >> 2] | 0) | 0) >> 0] = 0;
     HEAP32[($3 + 104 | 0) >> 2] = (HEAP32[($3 + 104 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($3 + 88 | 0) >> 2] | 0) + ((HEAP32[($3 + 84 | 0) >> 2] | 0) + 1 | 0) | 0;
    }
    HEAP32[($3 + 84 | 0) >> 2] = (HEAP32[($3 + 84 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($3 + 64 | 0) >> 2] = HEAP32[($3 + 104 | 0) >> 2] | 0;
  TraceLog(3 | 0, 69286 | 0, $3 + 64 | 0 | 0);
  HEAP32[($3 + 80 | 0) >> 2] = 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($3 + 80 | 0) >> 2] | 0 | 0) < (HEAP32[($3 + 104 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$4
    }
    label$6 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67198 | 0) | 0) {
      break label$6
     }
     HEAP32[(0 + 89624 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72102) | 0;
     HEAP32[(0 + 89628 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72081) | 0;
     HEAP32[(0 + 89632 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72123) | 0;
     label$7 : {
      if (!((HEAP32[(0 + 89624 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      if (!((HEAP32[(0 + 89628 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      if (!((HEAP32[(0 + 89632 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP8[(0 + 89600 | 0) >> 0] = 1;
     }
    }
    label$8 : {
     label$9 : {
      if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67306 | 0) | 0) {
       break label$9
      }
      HEAP32[(0 + 89636 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72228) | 0;
      HEAP32[(0 + 89640 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72255) | 0;
      HEAP32[(0 + 89644 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72201) | 0;
      label$10 : {
       if (!((HEAP32[(0 + 89636 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       if (!((HEAP32[(0 + 89640 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       if (!((HEAP32[(0 + 89644 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP8[(0 + 89601 | 0) >> 0] = 1;
      }
      break label$8;
     }
     label$11 : {
      if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71341 | 0) | 0) {
       break label$11
      }
      if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67282 | 0) | 0) {
       break label$11
      }
      HEAP32[(0 + 89636 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72005) | 0;
      HEAP32[(0 + 89640 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](72030) | 0;
      HEAP32[(0 + 89644 | 0) >> 2] = FUNCTION_TABLE[HEAP32[($3 + 108 | 0) >> 2] | 0 | 0](71962) | 0;
      label$12 : {
       if (!((HEAP32[(0 + 89636 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       if (!((HEAP32[(0 + 89640 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       if (!((HEAP32[(0 + 89644 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP8[(0 + 89601 | 0) >> 0] = 1;
      }
     }
    }
    label$13 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67128 | 0) | 0) {
      break label$13
     }
     HEAP8[(0 + 89602 | 0) >> 0] = 1;
    }
    label$14 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67225 | 0) | 0) {
      break label$14
     }
     HEAP8[(0 + 89605 | 0) >> 0] = 1;
    }
    label$15 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 69982 | 0) | 0) {
      break label$15
     }
     HEAP8[(0 + 89603 | 0) >> 0] = 1;
    }
    label$16 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 70003 | 0) | 0) {
      break label$16
     }
     HEAP8[(0 + 89604 | 0) >> 0] = 1;
    }
    label$17 : {
     if (!((HEAPU8[(0 + 89604 | 0) >> 0] | 0) & 1 | 0)) {
      break label$17
     }
     HEAP8[(0 + 89603 | 0) >> 0] = 1;
    }
    label$18 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 73466 | 0) | 0) {
      break label$18
     }
     HEAP32[(0 + 89620 | 0) >> 2] = 24;
    }
    label$19 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 73497 | 0) | 0) {
      break label$19
     }
     HEAP32[(0 + 89620 | 0) >> 2] = 32;
    }
    label$20 : {
     label$21 : {
      if (!(strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71442 | 0) | 0)) {
       break label$21
      }
      if (!(strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71514 | 0) | 0)) {
       break label$21
      }
      if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71474 | 0) | 0) {
       break label$20
      }
     }
     HEAP8[(0 + 89606 | 0) >> 0] = 1;
    }
    label$22 : {
     label$23 : {
      if (!(strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 70026 | 0) | 0)) {
       break label$23
      }
      if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 73539 | 0) | 0) {
       break label$22
      }
     }
     HEAP8[(0 + 89607 | 0) >> 0] = 1;
    }
    label$24 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 65536 | 0) | 0) {
      break label$24
     }
     HEAP8[(0 + 89608 | 0) >> 0] = 1;
    }
    label$25 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71409 | 0) | 0) {
      break label$25
     }
     HEAP8[(0 + 89609 | 0) >> 0] = 1;
    }
    label$26 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 68462 | 0) | 0) {
      break label$26
     }
     HEAP8[(0 + 89610 | 0) >> 0] = 1;
    }
    label$27 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 71600 | 0) | 0) {
      break label$27
     }
     HEAP8[(0 + 89612 | 0) >> 0] = 1;
    }
    label$28 : {
     if (strcmp(HEAP32[((HEAP32[($3 + 100 | 0) >> 2] | 0) + ((HEAP32[($3 + 80 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 68524 | 0) | 0) {
      break label$28
     }
     HEAP8[(0 + 89611 | 0) >> 0] = 1;
    }
    HEAP32[($3 + 80 | 0) >> 2] = (HEAP32[($3 + 80 | 0) >> 2] | 0) + 1 | 0;
    continue label$5;
   };
  }
  dlfree(HEAP32[($3 + 100 | 0) >> 2] | 0 | 0);
  dlfree(HEAP32[($3 + 88 | 0) >> 2] | 0 | 0);
  TraceLog(3 | 0, 73299 | 0, 0 | 0);
  HEAP32[$3 >> 2] = glGetString(7936 | 0) | 0;
  TraceLog(3 | 0, 67944 | 0, $3 | 0);
  HEAP32[($3 + 16 | 0) >> 2] = glGetString(7937 | 0) | 0;
  TraceLog(3 | 0, 67833 | 0, $3 + 16 | 0 | 0);
  HEAP32[($3 + 32 | 0) >> 2] = glGetString(7938 | 0) | 0;
  TraceLog(3 | 0, 67925 | 0, $3 + 32 | 0 | 0);
  HEAP32[($3 + 48 | 0) >> 2] = glGetString(35724 | 0) | 0;
  TraceLog(3 | 0, 67963 | 0, $3 + 48 | 0 | 0);
  glGetFloatv(34047 | 0, (86932 + 2668 | 0) + 16 | 0 | 0);
  label$29 : {
   label$30 : {
    if (!((HEAPU8[(0 + 89600 | 0) >> 0] | 0) & 1 | 0)) {
     break label$30
    }
    TraceLog(3 | 0, 66065 | 0, 0 | 0);
    break label$29;
   }
   TraceLog(4 | 0, 70943 | 0, 0 | 0);
  }
  label$31 : {
   label$32 : {
    if (!((HEAPU8[(0 + 89602 | 0) >> 0] | 0) & 1 | 0)) {
     break label$32
    }
    TraceLog(3 | 0, 71262 | 0, 0 | 0);
    break label$31;
   }
   TraceLog(4 | 0, 73669 | 0, 0 | 0);
  }
  label$33 : {
   if (!((HEAPU8[(0 + 89606 | 0) >> 0] | 0) & 1 | 0)) {
    break label$33
   }
   TraceLog(3 | 0, 71064 | 0, 0 | 0);
  }
  label$34 : {
   if (!((HEAPU8[(0 + 89607 | 0) >> 0] | 0) & 1 | 0)) {
    break label$34
   }
   TraceLog(3 | 0, 71223 | 0, 0 | 0);
  }
  label$35 : {
   if (!((HEAPU8[(0 + 89608 | 0) >> 0] | 0) & 1 | 0)) {
    break label$35
   }
   TraceLog(3 | 0, 71180 | 0, 0 | 0);
  }
  label$36 : {
   if (!((HEAPU8[(0 + 89609 | 0) >> 0] | 0) & 1 | 0)) {
    break label$36
   }
   TraceLog(3 | 0, 71102 | 0, 0 | 0);
  }
  label$37 : {
   if (!((HEAPU8[(0 + 89610 | 0) >> 0] | 0) & 1 | 0)) {
    break label$37
   }
   TraceLog(3 | 0, 71141 | 0, 0 | 0);
  }
  label$38 : {
   if (!((HEAPU8[(0 + 89613 | 0) >> 0] | 0) & 1 | 0)) {
    break label$38
   }
   TraceLog(3 | 0, 71034 | 0, 0 | 0);
  }
  label$39 : {
   if (!((HEAPU8[(0 + 89614 | 0) >> 0] | 0) & 1 | 0)) {
    break label$39
   }
   TraceLog(3 | 0, 70990 | 0, 0 | 0);
  }
  __stack_pointer = $3 + 112 | 0;
  return;
 }
 
 function rlGetVersion() {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  HEAP32[($2 + 12 | 0) >> 2] = 5;
  return HEAP32[($2 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function rlDrawRenderBatchActive() {
  rlDrawRenderBatch(HEAP32[(0 + 86932 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function rlUnloadTexture($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  glDeleteTextures(1 | 0, $3 + 12 | 0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function rlReadScreenPixels($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $15 = 0, $95 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $0;
  HEAP32[($4 + 24 | 0) >> 2] = $1;
  HEAP32[($4 + 20 | 0) >> 2] = dlcalloc(Math_imul(HEAP32[($4 + 28 | 0) >> 2] | 0, HEAP32[($4 + 24 | 0) >> 2] | 0) << 2 | 0 | 0, 1 | 0) | 0;
  $15 = 0;
  glReadPixels($15 | 0, $15 | 0, HEAP32[($4 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0, 6408 | 0, 5121 | 0, HEAP32[($4 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[($4 + 16 | 0) >> 2] = dlmalloc((Math_imul(HEAP32[($4 + 28 | 0) >> 2] | 0, HEAP32[($4 + 24 | 0) >> 2] | 0) << 2 | 0) << 0 | 0 | 0) | 0;
  HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 24 | 0) >> 2] | 0) - 1 | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4 + 8 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) < ((HEAP32[($4 + 28 | 0) >> 2] | 0) << 2 | 0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + ((Math_imul(((HEAP32[($4 + 24 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0, HEAP32[($4 + 28 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) | 0) >> 0] = HEAPU8[((HEAP32[($4 + 20 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($4 + 12 | 0) >> 2] | 0, HEAP32[($4 + 28 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0;
      label$5 : {
       if (((HEAP32[($4 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) % (4 | 0) | 0) {
        break label$5
       }
       HEAP8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + ((Math_imul(((HEAP32[($4 + 24 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0, HEAP32[($4 + 28 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) | 0) >> 0] = 255;
      }
      HEAP32[($4 + 8 | 0) >> 2] = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + -1 | 0;
    continue label$2;
   };
  }
  dlfree(HEAP32[($4 + 20 | 0) >> 2] | 0 | 0);
  $95 = HEAP32[($4 + 16 | 0) >> 2] | 0;
  __stack_pointer = $4 + 32 | 0;
  return $95 | 0;
 }
 
 function MatrixIdentity($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  i64toi32_i32$0 = 0;
  $1 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0 >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($0 + 60 | 0) >> 2] = Math_fround(1.0);
  return;
 }
 
 function MatrixScale($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $21 = 0, $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  HEAPF32[($6 + 12 | 0) >> 2] = $1;
  HEAPF32[($6 + 8 | 0) >> 2] = $2;
  HEAPF32[($6 + 4 | 0) >> 2] = $3;
  i64toi32_i32$0 = 0;
  $21 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[($6 + 12 | 0) >> 2]);
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(HEAPF32[($6 + 8 | 0) >> 2]);
  HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(HEAPF32[($6 + 4 | 0) >> 2]);
  HEAPF32[($0 + 60 | 0) >> 2] = Math_fround(1.0);
  return;
 }
 
 function MatrixToFloatV($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0;
  i64toi32_i32$0 = 0;
  $2 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[$0 >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$1 >> 2]);
  HEAPF32[($0 + 4 | 0) >> 2] = Math_fround(HEAPF32[($1 + 16 | 0) >> 2]);
  HEAPF32[($0 + 8 | 0) >> 2] = Math_fround(HEAPF32[($1 + 32 | 0) >> 2]);
  HEAPF32[($0 + 12 | 0) >> 2] = Math_fround(HEAPF32[($1 + 48 | 0) >> 2]);
  HEAPF32[($0 + 16 | 0) >> 2] = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  HEAPF32[($0 + 20 | 0) >> 2] = Math_fround(HEAPF32[($1 + 20 | 0) >> 2]);
  HEAPF32[($0 + 24 | 0) >> 2] = Math_fround(HEAPF32[($1 + 36 | 0) >> 2]);
  HEAPF32[($0 + 28 | 0) >> 2] = Math_fround(HEAPF32[($1 + 52 | 0) >> 2]);
  HEAPF32[($0 + 32 | 0) >> 2] = Math_fround(HEAPF32[($1 + 8 | 0) >> 2]);
  HEAPF32[($0 + 36 | 0) >> 2] = Math_fround(HEAPF32[($1 + 24 | 0) >> 2]);
  HEAPF32[($0 + 40 | 0) >> 2] = Math_fround(HEAPF32[($1 + 40 | 0) >> 2]);
  HEAPF32[($0 + 44 | 0) >> 2] = Math_fround(HEAPF32[($1 + 56 | 0) >> 2]);
  HEAPF32[($0 + 48 | 0) >> 2] = Math_fround(HEAPF32[($1 + 12 | 0) >> 2]);
  HEAPF32[($0 + 52 | 0) >> 2] = Math_fround(HEAPF32[($1 + 28 | 0) >> 2]);
  HEAPF32[($0 + 56 | 0) >> 2] = Math_fround(HEAPF32[($1 + 44 | 0) >> 2]);
  HEAPF32[($0 + 60 | 0) >> 2] = Math_fround(HEAPF32[($1 + 60 | 0) >> 2]);
  return;
 }
 
 function ProcessGestureEvent($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, $537 = 0, $541 = 0, $573 = 0, $580 = 0, $584 = 0, $603 = 0, $625 = 0, $629 = 0, $633 = 0, $689 = 0, $693 = 0, $822 = 0, $869 = 0, $895 = 0, $901 = 0, $905 = 0, $976 = 0, $986 = 0, $1025 = 0, $1029 = 0, $1044 = 0, $1048 = 0, $1055 = 0, $1065 = 0, $1087 = 0, $1091 = 0, $1111 = 0, $1115 = 0, $1136 = 0, $1140 = 0, $1177 = 0, $1181 = 0, $1218 = 0;
  $3 = __stack_pointer - 176 | 0;
  __stack_pointer = $3;
  HEAP32[(0 + 85068 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(0 + 85068 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!((HEAP32[$0 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[(0 + 85128 | 0) >> 2] = (HEAP32[(0 + 85128 | 0) >> 2] | 0) + 1 | 0;
      label$5 : {
       label$6 : {
        if (HEAP32[(0 + 85056 | 0) >> 2] | 0) {
         break label$6
        }
        if (!((HEAP32[(0 + 85128 | 0) >> 2] | 0 | 0) >= (2 | 0) & 1 | 0)) {
         break label$6
        }
        if (!(+rgGetCurrentTime() - +HEAPF64[(0 + 85072 | 0) >> 3] < 300.0 & 1 | 0)) {
         break label$6
        }
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
        $537 = i64toi32_i32$0;
        i64toi32_i32$0 = $3;
        HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $537;
        HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $0 + 40 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $541 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $541;
        HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
        if (!(Math_fround(rgVector2Distance(i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 + 8 | 0 | 0)) < Math_fround(.029999999329447746) & 1 | 0)) {
         break label$6
        }
        HEAP32[(0 + 85056 | 0) >> 2] = 2;
        HEAP32[(0 + 85128 | 0) >> 2] = 0;
        break label$5;
       }
       HEAP32[(0 + 85128 | 0) >> 2] = 1;
       HEAP32[(0 + 85056 | 0) >> 2] = 1;
      }
      i64toi32_i32$2 = $0 + 40 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $573 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$0 + 85088 | 0) >> 2] = $573;
      HEAP32[(i64toi32_i32$0 + 85092 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $0 + 40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $580 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$1 + 85104 | 0) >> 2] = $580;
      HEAP32[(i64toi32_i32$1 + 85108 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
      $584 = i64toi32_i32$0;
      i64toi32_i32$0 = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$2 + 85080 | 0) >> 2] = $584;
      HEAP32[(i64toi32_i32$2 + 85084 | 0) >> 2] = i64toi32_i32$1;
      HEAPF64[(0 + 85072 | 0) >> 3] = +rgGetCurrentTime();
      HEAP32[(0 + 85064 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
      HEAPF32[($3 + 168 | 0) >> 2] = Math_fround(0 | 0);
      HEAPF32[($3 + 172 | 0) >> 2] = Math_fround(0 | 0);
      i64toi32_i32$2 = $3;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
      $603 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      HEAP32[(i64toi32_i32$1 + 85152 | 0) >> 2] = $603;
      HEAP32[(i64toi32_i32$1 + 85156 | 0) >> 2] = i64toi32_i32$0;
      break label$3;
     }
     label$7 : {
      label$8 : {
       if (HEAP32[$0 >> 2] | 0) {
        break label$8
       }
       label$9 : {
        if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
         break label$9
        }
        i64toi32_i32$2 = $0 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $625 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$0 + 85080 | 0) >> 2] = $625;
        HEAP32[(i64toi32_i32$0 + 85084 | 0) >> 2] = i64toi32_i32$1;
       }
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
       $629 = i64toi32_i32$1;
       i64toi32_i32$1 = $3;
       HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $629;
       HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85080 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85084 | 0) >> 2] | 0;
       $633 = i64toi32_i32$0;
       i64toi32_i32$0 = $3;
       HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $633;
       HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
       HEAPF32[(i64toi32_i32$2 + 85164 | 0) >> 2] = Math_fround(rgVector2Distance(i64toi32_i32$0 + 48 | 0 | 0, i64toi32_i32$0 + 40 | 0 | 0));
       HEAPF32[(0 + 85168 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(i64toi32_i32$2 + 85164 | 0) >> 2]) / Math_fround(+rgGetCurrentTime() - +HEAPF64[(i64toi32_i32$2 + 85184 | 0) >> 3]));
       HEAP8[(0 + 85176 | 0) >> 0] = 0;
       label$10 : {
        label$11 : {
         if (!(Math_fround(HEAPF32[(0 + 85168 | 0) >> 2]) > Math_fround(5.000000237487257e-04) & 1 | 0)) {
          break label$11
         }
         if (!((HEAP32[(0 + 85064 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$11
         }
         i64toi32_i32$2 = 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
         $689 = i64toi32_i32$1;
         i64toi32_i32$1 = $3;
         HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $689;
         HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85080 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85084 | 0) >> 2] | 0;
         $693 = i64toi32_i32$0;
         i64toi32_i32$0 = $3;
         HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $693;
         HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
         HEAPF32[(0 + 85160 | 0) >> 2] = Math_fround(Math_fround(360.0) - Math_fround(rgVector2Angle(i64toi32_i32$0 + 32 | 0 | 0, i64toi32_i32$0 + 24 | 0 | 0)));
         label$12 : {
          label$13 : {
           label$14 : {
            if (Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) < Math_fround(30.0) & 1 | 0) {
             break label$14
            }
            if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) > Math_fround(330.0) & 1 | 0)) {
             break label$13
            }
           }
           HEAP32[(0 + 85056 | 0) >> 2] = 16;
           break label$12;
          }
          label$15 : {
           label$16 : {
            if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) > Math_fround(30.0) & 1 | 0)) {
             break label$16
            }
            if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) < Math_fround(120.0) & 1 | 0)) {
             break label$16
            }
            HEAP32[(0 + 85056 | 0) >> 2] = 64;
            break label$15;
           }
           label$17 : {
            label$18 : {
             if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) > Math_fround(120.0) & 1 | 0)) {
              break label$18
             }
             if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) < Math_fround(210.0) & 1 | 0)) {
              break label$18
             }
             HEAP32[(0 + 85056 | 0) >> 2] = 32;
             break label$17;
            }
            label$19 : {
             label$20 : {
              if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) > Math_fround(210.0) & 1 | 0)) {
               break label$20
              }
              if (!(Math_fround(HEAPF32[(0 + 85160 | 0) >> 2]) < Math_fround(300.0) & 1 | 0)) {
               break label$20
              }
              HEAP32[(0 + 85056 | 0) >> 2] = 128;
              break label$19;
             }
             HEAP32[(0 + 85056 | 0) >> 2] = 0;
            }
           }
          }
         }
         break label$10;
        }
        HEAPF32[(0 + 85164 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[(0 + 85168 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[(0 + 85160 | 0) >> 2] = Math_fround(0 | 0);
        HEAP32[(0 + 85056 | 0) >> 2] = 0;
       }
       HEAPF32[($3 + 160 | 0) >> 2] = Math_fround(0 | 0);
       HEAPF32[($3 + 164 | 0) >> 2] = Math_fround(0 | 0);
       i64toi32_i32$2 = $3;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 160 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 164 | 0) >> 2] | 0;
       $822 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       HEAP32[(i64toi32_i32$1 + 85104 | 0) >> 2] = $822;
       HEAP32[(i64toi32_i32$1 + 85108 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(0 + 85068 | 0) >> 2] = 0;
       break label$7;
      }
      label$21 : {
       if (!((HEAP32[$0 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$21
       }
       label$22 : {
        if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
         break label$22
        }
        HEAPF64[(0 + 85072 | 0) >> 3] = +rgGetCurrentTime();
       }
       label$23 : {
        if ((HEAPU8[(0 + 85176 | 0) >> 0] | 0) & 1 | 0) {
         break label$23
        }
        HEAPF64[(0 + 85184 | 0) >> 3] = +rgGetCurrentTime();
        HEAP8[(0 + 85176 | 0) >> 0] = 1;
       }
       i64toi32_i32$2 = $0 + 40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $869 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$0 + 85112 | 0) >> 2] = $869;
       HEAP32[(i64toi32_i32$0 + 85116 | 0) >> 2] = i64toi32_i32$1;
       label$24 : {
        if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$24
        }
        label$25 : {
         if (!((HEAPU8[(0 + 85136 | 0) >> 0] | 0) & 1 | 0)) {
          break label$25
         }
         i64toi32_i32$2 = $0 + 40 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $895 = i64toi32_i32$1;
         i64toi32_i32$1 = 0;
         HEAP32[(i64toi32_i32$1 + 85088 | 0) >> 2] = $895;
         HEAP32[(i64toi32_i32$1 + 85092 | 0) >> 2] = i64toi32_i32$0;
        }
        HEAP8[(0 + 85136 | 0) >> 0] = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
        $901 = i64toi32_i32$0;
        i64toi32_i32$0 = $3;
        HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $901;
        HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
        $905 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $905;
        HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
        label$26 : {
         if (!(Math_fround(rgVector2Distance(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 + 56 | 0 | 0)) >= Math_fround(.014999999664723873) & 1 | 0)) {
          break label$26
         }
         HEAPF64[(0 + 85072 | 0) >> 3] = +rgGetCurrentTime();
         HEAP32[(0 + 85056 | 0) >> 2] = 8;
        }
       }
       HEAPF32[(0 + 85152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85112 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85104 | 0) >> 2]));
       HEAPF32[(0 + 85156 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85116 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85108 | 0) >> 2]));
      }
     }
    }
    break label$1;
   }
   label$27 : {
    label$28 : {
     if (!((HEAP32[(0 + 85068 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$28
     }
     label$29 : {
      label$30 : {
       if (!((HEAP32[$0 >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$30
       }
       i64toi32_i32$2 = $0 + 40 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $976 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$0 + 85088 | 0) >> 2] = $976;
       HEAP32[(i64toi32_i32$0 + 85092 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = ($0 + 40 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $986 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       HEAP32[(i64toi32_i32$1 + 85096 | 0) >> 2] = $986;
       HEAP32[(i64toi32_i32$1 + 85100 | 0) >> 2] = i64toi32_i32$0;
       HEAPF32[(0 + 85192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85096 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85088 | 0) >> 2]));
       HEAPF32[(0 + 85196 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85100 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85092 | 0) >> 2]));
       HEAP32[(0 + 85056 | 0) >> 2] = 4;
       HEAPF64[(0 + 85144 | 0) >> 3] = +rgGetCurrentTime();
       break label$29;
      }
      label$31 : {
       label$32 : {
        if (!((HEAP32[$0 >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$32
        }
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
        $1025 = i64toi32_i32$0;
        i64toi32_i32$0 = $3;
        HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] = $1025;
        HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85120 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85124 | 0) >> 2] | 0;
        $1029 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $1029;
        HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
        HEAPF32[(0 + 85204 | 0) >> 2] = Math_fround(rgVector2Distance(i64toi32_i32$1 + 128 | 0 | 0, i64toi32_i32$1 + 120 | 0 | 0));
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
        $1044 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] = $1044;
        HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85120 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85124 | 0) >> 2] | 0;
        $1048 = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$1 + 85096 | 0) >> 2] = $1048;
        HEAP32[(i64toi32_i32$1 + 85100 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $0 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1055 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$0 + 85112 | 0) >> 2] = $1055;
        HEAP32[(i64toi32_i32$0 + 85116 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = ($0 + 40 | 0) + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1065 = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        HEAP32[(i64toi32_i32$1 + 85120 | 0) >> 2] = $1065;
        HEAP32[(i64toi32_i32$1 + 85124 | 0) >> 2] = i64toi32_i32$0;
        HEAPF32[(0 + 85192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85120 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85112 | 0) >> 2]));
        HEAPF32[(0 + 85196 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(0 + 85124 | 0) >> 2]) - Math_fround(HEAPF32[(0 + 85116 | 0) >> 2]));
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85088 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85092 | 0) >> 2] | 0;
        $1087 = i64toi32_i32$0;
        i64toi32_i32$0 = $3;
        HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = $1087;
        HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
        $1091 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = $1091;
        HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = i64toi32_i32$0;
        label$33 : {
         label$34 : {
          label$35 : {
           if (Math_fround(rgVector2Distance(i64toi32_i32$1 + 144 | 0 | 0, i64toi32_i32$1 + 136 | 0 | 0)) >= Math_fround(.004999999888241291) & 1 | 0) {
            break label$35
           }
           i64toi32_i32$2 = 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85096 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85100 | 0) >> 2] | 0;
           $1111 = i64toi32_i32$0;
           i64toi32_i32$0 = $3;
           HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] = $1111;
           HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85120 | 0) >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85124 | 0) >> 2] | 0;
           $1115 = i64toi32_i32$1;
           i64toi32_i32$1 = $3;
           HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = $1115;
           HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = i64toi32_i32$0;
           if (!(Math_fround(rgVector2Distance(i64toi32_i32$1 + 112 | 0 | 0, i64toi32_i32$1 + 104 | 0 | 0)) >= Math_fround(.004999999888241291) & 1 | 0)) {
            break label$34
           }
          }
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
          $1136 = i64toi32_i32$0;
          i64toi32_i32$0 = $3;
          HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] = $1136;
          HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85120 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85124 | 0) >> 2] | 0;
          $1140 = i64toi32_i32$1;
          i64toi32_i32$1 = $3;
          HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $1140;
          HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$0;
          label$36 : {
           label$37 : {
            if (!(Math_fround(Math_fround(rgVector2Distance(i64toi32_i32$1 + 96 | 0 | 0, i64toi32_i32$1 + 88 | 0 | 0)) - Math_fround(HEAPF32[(0 + 85204 | 0) >> 2])) < Math_fround(0 | 0) & 1 | 0)) {
             break label$37
            }
            HEAP32[(0 + 85056 | 0) >> 2] = 256;
            break label$36;
           }
           HEAP32[(0 + 85056 | 0) >> 2] = 512;
          }
          break label$33;
         }
         HEAP32[(0 + 85056 | 0) >> 2] = 4;
         HEAPF64[(0 + 85144 | 0) >> 3] = +rgGetCurrentTime();
        }
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85116 | 0) >> 2] | 0;
        $1177 = i64toi32_i32$0;
        i64toi32_i32$0 = $3;
        HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = $1177;
        HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 85120 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 85124 | 0) >> 2] | 0;
        $1181 = i64toi32_i32$1;
        i64toi32_i32$1 = $3;
        HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $1181;
        HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
        HEAPF32[(0 + 85200 | 0) >> 2] = Math_fround(Math_fround(360.0) - Math_fround(rgVector2Angle(i64toi32_i32$1 + 80 | 0 | 0, i64toi32_i32$1 + 72 | 0 | 0)));
        break label$31;
       }
       label$38 : {
        if (HEAP32[$0 >> 2] | 0) {
         break label$38
        }
        HEAPF32[(0 + 85204 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[(0 + 85200 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[($3 + 152 | 0) >> 2] = Math_fround(0 | 0);
        HEAPF32[($3 + 156 | 0) >> 2] = Math_fround(0 | 0);
        i64toi32_i32$2 = $3;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
        $1218 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$0 + 85192 | 0) >> 2] = $1218;
        HEAP32[(i64toi32_i32$0 + 85196 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[(0 + 85068 | 0) >> 2] = 0;
        HEAP32[(0 + 85056 | 0) >> 2] = 0;
       }
      }
     }
     break label$27;
    }
    label$39 : {
     if (!((HEAP32[(0 + 85068 | 0) >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
      break label$39
     }
    }
   }
  }
  __stack_pointer = $3 + 176 | 0;
  return;
 }
 
 function rgGetCurrentTime() {
  var $2 = 0, $8 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAPF64[($2 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($2 + 8 | 0) >> 3] = +GetTime();
  $8 = +HEAPF64[($2 + 8 | 0) >> 3];
  __stack_pointer = $2 + 16 | 0;
  return +$8;
 }
 
 function rgVector2Distance($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = Math_fround(0), $12 = Math_fround(0);
  $4 = __stack_pointer - 16 | 0;
  HEAPF32[($4 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2]) - Math_fround(HEAPF32[$0 >> 2]));
  HEAPF32[($4 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 4 | 0) >> 2]));
  $11 = Math_fround(HEAPF32[($4 + 8 | 0) >> 2]);
  $12 = Math_fround(HEAPF32[($4 + 4 | 0) >> 2]);
  HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(Math_sqrt(+Math_fround(Math_fround($11 * $11) + Math_fround($12 * $12))));
  return Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2]));
 }
 
 function rgVector2Angle($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $25 = Math_fround(0);
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(Math_fround(atan2f(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($0 + 4 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) - Math_fround(HEAPF32[$0 >> 2]))))) * Math_fround(57.2957763671875));
  label$1 : {
   if (!(Math_fround(HEAPF32[($4 + 12 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF32[($4 + 12 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4 + 12 | 0) >> 2]) + Math_fround(360.0));
  }
  $25 = Math_fround(HEAPF32[($4 + 12 | 0) >> 2]);
  __stack_pointer = $4 + 16 | 0;
  return Math_fround($25);
 }
 
 function GetTime() {
  var $2 = 0, $8 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAPF64[($2 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($2 + 8 | 0) >> 3] = +glfwGetTime();
  $8 = +HEAPF64[($2 + 8 | 0) >> 3];
  __stack_pointer = $2 + 16 | 0;
  return +$8;
 }
 
 function UpdateGestures() {
  label$1 : {
   label$2 : {
    if ((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
     break label$2
    }
    if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
     break label$1
    }
   }
   if (!((HEAP32[(0 + 85068 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 85056 | 0) >> 2] = 4;
   HEAPF64[(0 + 85144 | 0) >> 3] = +rgGetCurrentTime();
  }
  label$3 : {
   if (!(+rgGetCurrentTime() - +HEAPF64[(0 + 85072 | 0) >> 3] > 300.0 & 1 | 0)) {
    break label$3
   }
   if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
    break label$3
   }
   if (!((HEAP32[(0 + 85068 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
    break label$3
   }
   HEAP32[(0 + 85056 | 0) >> 2] = 4;
   HEAPF64[(0 + 85144 | 0) >> 3] = +rgGetCurrentTime();
   HEAP8[(0 + 85136 | 0) >> 0] = 1;
  }
  label$4 : {
   label$5 : {
    if ((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (16 | 0) & 1 | 0) {
     break label$5
    }
    if ((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (64 | 0) & 1 | 0) {
     break label$5
    }
    if ((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (32 | 0) & 1 | 0) {
     break label$5
    }
    if (!((HEAP32[(0 + 85056 | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
     break label$4
    }
   }
   HEAP32[(0 + 85056 | 0) >> 2] = 0;
  }
  return;
 }
 
 function msf_gif_begin($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, i64toi32_i32$2 = 0, $128 = 0, $143 = 0, $12 = 0, $25 = 0, $13 = 0, $18 = 0, $26 = 0, $31 = 0, $109 = 0, $130 = 0, $133 = 0, $136 = 0, $189 = 0, $202 = 0, $215 = 0, $224 = 0, $237 = 0, $250 = 0, $43 = 0, $52 = 0, $61 = 0, $64 = 0, $412 = 0, $419 = 0, $423 = 0, $427 = 0, $455 = 0, $465 = 0, $475 = 0, $485 = 0, $140 = 0;
  $5 = __stack_pointer - 80 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 72 | 0) >> 2] = $0;
  HEAP32[($5 + 68 | 0) >> 2] = $1;
  HEAP32[($5 + 64 | 0) >> 2] = $2;
  i64toi32_i32$0 = 0;
  $143 = 0;
  i64toi32_i32$1 = $5 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $143;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $143;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $143;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  $12 = (HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0) + 8 | 0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
  $189 = i64toi32_i32$0;
  i64toi32_i32$0 = $12;
  HEAP32[i64toi32_i32$0 >> 2] = $189;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $13 = 16;
  i64toi32_i32$2 = ($5 + 40 | 0) + $13 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $202 = i64toi32_i32$1;
  i64toi32_i32$1 = $12 + $13 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $202;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $18 = 8;
  i64toi32_i32$2 = ($5 + 40 | 0) + $18 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $215 = i64toi32_i32$0;
  i64toi32_i32$0 = $12 + $18 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $215;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $25 = (HEAP32[($5 + 72 | 0) >> 2] | 0) + 32 | 0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 40 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 44 | 0) >> 2] | 0;
  $224 = i64toi32_i32$1;
  i64toi32_i32$1 = $25;
  HEAP32[i64toi32_i32$1 >> 2] = $224;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $26 = 16;
  i64toi32_i32$2 = ($5 + 40 | 0) + $26 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $237 = i64toi32_i32$0;
  i64toi32_i32$0 = $25 + $26 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $237;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $31 = 8;
  i64toi32_i32$2 = ($5 + 40 | 0) + $31 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $250 = i64toi32_i32$1;
  i64toi32_i32$1 = $25 + $31 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $250;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] = HEAP32[($5 + 68 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] = HEAP32[($5 + 64 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] = 0;
  $43 = dlmalloc(2097152 | 0) | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] = $43;
  $52 = dlmalloc(Math_imul(HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0, HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] = $52;
  $61 = dlmalloc(Math_imul(HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0, HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] = $61;
  $64 = dlmalloc(40 | 0) | 0;
  HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] = $64;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if ((HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break label$2
     }
    }
    msf_free_gif_state(HEAP32[($5 + 72 | 0) >> 2] | 0 | 0);
    HEAP32[($5 + 76 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
   HEAP32[(HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) >> 2] = 0;
   HEAP32[((HEAP32[((HEAP32[($5 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] = 32;
   $109 = 0;
   HEAP8[($5 + 32 | 0) >> 0] = HEAPU8[($109 + 75872 | 0) >> 0] | 0;
   i64toi32_i32$2 = $109;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75864 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75868 | 0) >> 2] | 0;
   $412 = i64toi32_i32$0;
   i64toi32_i32$0 = $5 + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $412;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75856 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75860 | 0) >> 2] | 0;
   $419 = i64toi32_i32$1;
   i64toi32_i32$1 = $5 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $419;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75848 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75852 | 0) >> 2] | 0;
   $423 = i64toi32_i32$0;
   i64toi32_i32$0 = $5;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $423;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75840 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75844 | 0) >> 2] | 0;
   $427 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[i64toi32_i32$1 >> 2] = $427;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP16[(i64toi32_i32$1 + 6 | 0) >> 1] = HEAPU16[(i64toi32_i32$1 + 68 | 0) >> 1] | 0;
   HEAP16[(i64toi32_i32$1 + 8 | 0) >> 1] = HEAPU16[(i64toi32_i32$1 + 64 | 0) >> 1] | 0;
   $128 = (HEAP32[((HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0) + 8 | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $455 = i64toi32_i32$0;
   i64toi32_i32$0 = $128;
   HEAP32[i64toi32_i32$0 >> 2] = $455;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $130 = 24;
   i64toi32_i32$2 = $5 + $130 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $465 = i64toi32_i32$1;
   i64toi32_i32$1 = $128 + $130 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $465;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $133 = 16;
   i64toi32_i32$2 = $5 + $133 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $475 = i64toi32_i32$0;
   i64toi32_i32$0 = $128 + $133 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $475;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $136 = 8;
   i64toi32_i32$2 = $5 + $136 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $485 = i64toi32_i32$1;
   i64toi32_i32$1 = $128 + $136 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $485;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5 + 76 | 0) >> 2] = 1;
  }
  $140 = HEAP32[($5 + 76 | 0) >> 2] | 0;
  __stack_pointer = $5 + 80 | 0;
  return $140 | 0;
 }
 
 function msf_free_gif_state($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  label$1 : {
   if (!((HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   dlfree(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if (!((HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$2
   }
   dlfree(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0);
  }
  label$3 : {
   if (!((HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$3
   }
   dlfree(HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($3 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  label$4 : {
   label$5 : while (1) {
    if (!((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3 + 4 | 0) >> 2] = HEAP32[(HEAP32[($3 + 8 | 0) >> 2] | 0) >> 2] | 0;
    dlfree(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($3 + 8 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
    continue label$5;
   };
  }
  HEAP32[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 60 | 0) >> 2] = 0;
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function msf_gif_frame($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $76 = 0, $112 = 0, $125 = 0, $137 = 0, $83 = 0, $88 = 0, $113 = 0, $118 = 0, $128 = 0, $129 = 0, $132 = 0, $138 = 0, $143 = 0, $148 = 0, $68 = 0, $70 = 0, $72 = 0, $73 = 0, $77 = 0, $82 = 0, $345 = 0, $358 = 0, $362 = 0, $424 = 0, $437 = 0, $441 = 0, $455 = 0, $465 = 0, $475 = 0, $484 = 0, $497 = 0, $510 = 0, $153 = 0;
  $7 = __stack_pointer - 65632 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 65624 | 0) >> 2] = $0;
  HEAP32[($7 + 65620 | 0) >> 2] = $1;
  HEAP32[($7 + 65616 | 0) >> 2] = $2;
  HEAP32[($7 + 65612 | 0) >> 2] = $3;
  HEAP32[($7 + 65608 | 0) >> 2] = $4;
  label$1 : {
   label$2 : {
    if ((HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($7 + 65628 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($7 + 65612 | 0) >> 2] = msf_imax(1 | 0, msf_imin(16 | 0, HEAP32[($7 + 65612 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
   label$3 : {
    if (HEAP32[($7 + 65608 | 0) >> 2] | 0) {
     break label$3
    }
    HEAP32[($7 + 65608 | 0) >> 2] = (HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) << 2 | 0;
   }
   label$4 : {
    if (!((HEAP32[($7 + 65608 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($7 + 65620 | 0) >> 2] = (HEAP32[($7 + 65620 | 0) >> 2] | 0) + (0 - Math_imul(HEAP32[($7 + 65608 | 0) >> 2] | 0, (HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0) - 1 | 0) | 0) | 0;
   }
   msf_cook_frame((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 32 | 0 | 0, HEAP32[($7 + 65620 | 0) >> 2] | 0 | 0, $7 + 64 | 0 | 0, HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0 | 0, HEAP32[($7 + 65608 | 0) >> 2] | 0 | 0, msf_imin(HEAP32[($7 + 65612 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + ((160 | 0) / (msf_imax(1 | 0, HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) | 0 | 0) | 0 | 0);
   $68 = HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
   $70 = HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0;
   $72 = HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
   $73 = HEAP32[($7 + 65616 | 0) >> 2] | 0;
   $76 = (HEAP32[($7 + 65624 | 0) >> 2] | 0) + 32 | 0;
   $77 = HEAP32[($7 + 65624 | 0) >> 2] | 0;
   $82 = HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0;
   $83 = 16;
   i64toi32_i32$2 = $76 + $83 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $345 = i64toi32_i32$0;
   i64toi32_i32$0 = ($7 + 8 | 0) + $83 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $345;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $88 = 8;
   i64toi32_i32$2 = $76 + $88 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $358 = i64toi32_i32$1;
   i64toi32_i32$1 = ($7 + 8 | 0) + $88 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $358;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $76;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $362 = i64toi32_i32$0;
   i64toi32_i32$0 = $7;
   HEAP32[($7 + 8 | 0) >> 2] = $362;
   HEAP32[($7 + 12 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($7 + 60 | 0) >> 2] = msf_compress_frame($68 | 0, $70 | 0, $72 | 0, $73 | 0, $7 + 8 | 0 | 0, $77 | 0, $7 + 64 | 0 | 0, $82 | 0) | 0;
   label$5 : {
    if ((HEAP32[($7 + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    msf_free_gif_state(HEAP32[($7 + 65624 | 0) >> 2] | 0 | 0);
    HEAP32[($7 + 65628 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) >> 2] = HEAP32[($7 + 60 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($7 + 65624 | 0) >> 2] | 0) + 64 | 0) >> 2] = HEAP32[($7 + 60 | 0) >> 2] | 0;
   $112 = (HEAP32[($7 + 65624 | 0) >> 2] | 0) + 8 | 0;
   $113 = 16;
   i64toi32_i32$2 = $112 + $113 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $424 = i64toi32_i32$1;
   i64toi32_i32$1 = ($7 + 32 | 0) + $113 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $424;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $118 = 8;
   i64toi32_i32$2 = $112 + $118 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $437 = i64toi32_i32$0;
   i64toi32_i32$0 = ($7 + 32 | 0) + $118 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $437;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $112;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $441 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[($7 + 32 | 0) >> 2] = $441;
   HEAP32[($7 + 36 | 0) >> 2] = i64toi32_i32$0;
   $125 = (HEAP32[($7 + 65624 | 0) >> 2] | 0) + 8 | 0;
   $128 = (HEAP32[($7 + 65624 | 0) >> 2] | 0) + 32 | 0;
   i64toi32_i32$2 = $128;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $455 = i64toi32_i32$0;
   i64toi32_i32$0 = $125;
   HEAP32[i64toi32_i32$0 >> 2] = $455;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $129 = 16;
   i64toi32_i32$2 = i64toi32_i32$2 + $129 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $465 = i64toi32_i32$1;
   i64toi32_i32$1 = $125 + $129 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $465;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $132 = 8;
   i64toi32_i32$2 = $128 + $132 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $475 = i64toi32_i32$0;
   i64toi32_i32$0 = $125 + $132 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $475;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $137 = (HEAP32[($7 + 65624 | 0) >> 2] | 0) + 32 | 0;
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 36 | 0) >> 2] | 0;
   $484 = i64toi32_i32$1;
   i64toi32_i32$1 = $137;
   HEAP32[i64toi32_i32$1 >> 2] = $484;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $138 = 16;
   i64toi32_i32$2 = ($7 + 32 | 0) + $138 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $497 = i64toi32_i32$0;
   i64toi32_i32$0 = $137 + $138 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $497;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $143 = 8;
   i64toi32_i32$2 = ($7 + 32 | 0) + $143 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $510 = i64toi32_i32$1;
   i64toi32_i32$1 = $137 + $143 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $510;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $148 = HEAP32[($7 + 65624 | 0) >> 2] | 0;
   HEAP32[($148 + 80 | 0) >> 2] = (HEAP32[($148 + 80 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($7 + 65628 | 0) >> 2] = 1;
  }
  $153 = HEAP32[($7 + 65628 | 0) >> 2] | 0;
  __stack_pointer = $7 + 65632 | 0;
  return $153 | 0;
 }
 
 function msf_imin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $13 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $13 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  return $13 | 0;
 }
 
 function msf_imax($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $13 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    break label$1;
   }
   $13 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  }
  return $13 | 0;
 }
 
 function msf_cook_frame($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $9 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $348 = Math_fround(0), i64toi32_i32$2 = 0, $45 = 0, $26 = 0, $52 = 0, $55 = 0, $351 = Math_fround(0), $334 = 0, $352 = Math_fround(0), $69 = 0, $358 = Math_fround(0), $76 = 0, $364 = Math_fround(0), $83 = 0, $171 = 0, $196 = 0, $220 = 0, $302 = 0, $305 = 0, $335 = 0, $340 = 0, $214 = 0, $229 = 0, $1145 = 0, $1158 = 0, $1171 = 0;
  $9 = __stack_pointer - 160 | 0;
  __stack_pointer = $9;
  HEAP32[($9 + 156 | 0) >> 2] = $0;
  HEAP32[($9 + 152 | 0) >> 2] = $1;
  HEAP32[($9 + 148 | 0) >> 2] = $2;
  HEAP32[($9 + 144 | 0) >> 2] = $3;
  HEAP32[($9 + 140 | 0) >> 2] = $4;
  HEAP32[($9 + 136 | 0) >> 2] = $5;
  HEAP32[($9 + 132 | 0) >> 2] = $6;
  HEAP32[($9 + 128 | 0) >> 2] = HEAP32[(0 + 89652 | 0) >> 2] | 0 ? 76064 : 75904;
  HEAP32[($9 + 124 | 0) >> 2] = 75984;
  HEAP32[($9 + 120 | 0) >> 2] = HEAP32[(0 + 89652 | 0) >> 2] | 0 ? 75904 : 76064;
  HEAP32[($9 + 116 | 0) >> 2] = HEAP32[(HEAP32[($9 + 156 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($9 + 112 | 0) >> 2] = 0;
  label$1 : while (1) {
   $26 = 2;
   HEAP32[($9 + 108 | 0) >> 2] = HEAP32[((HEAP32[($9 + 128 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << $26 | 0) | 0) >> 2] | 0;
   HEAP32[($9 + 104 | 0) >> 2] = HEAP32[((HEAP32[($9 + 124 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << $26 | 0) | 0) >> 2] | 0;
   HEAP32[($9 + 100 | 0) >> 2] = HEAP32[((HEAP32[($9 + 120 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << $26 | 0) | 0) >> 2] | 0;
   $45 = 1;
   HEAP32[($9 + 96 | 0) >> 2] = ($45 << (((HEAP32[($9 + 108 | 0) >> 2] | 0) + (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) + (HEAP32[($9 + 100 | 0) >> 2] | 0) | 0) | 0) + $45 | 0;
   __memset(HEAP32[($9 + 148 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($9 + 96 | 0) >> 2] | 0 | 0) | 0;
   $52 = 8;
   $55 = -1;
   HEAP32[($9 + 92 | 0) >> 2] = ($45 << ($52 - (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) | 0) + $55 | 0;
   HEAP32[($9 + 88 | 0) >> 2] = ($45 << ($52 - (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) | 0) + $55 | 0;
   HEAP32[($9 + 84 | 0) >> 2] = ($45 << ($52 - (HEAP32[($9 + 100 | 0) >> 2] | 0) | 0) | 0) + $55 | 0;
   $348 = Math_fround(255.0);
   $351 = Math_fround(257.0);
   $352 = Math_fround(Math_fround(Math_fround($348 - Math_fround(HEAP32[($9 + 92 | 0) >> 2] | 0 | 0)) / $348) * $351);
   label$2 : {
    label$3 : {
     if (!(Math_fround(Math_abs($352)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $69 = ~~$352;
     break label$2;
    }
    $69 = -2147483648;
   }
   HEAP16[($9 + 82 | 0) >> 1] = $69;
   $358 = Math_fround(Math_fround(Math_fround($348 - Math_fround(HEAP32[($9 + 88 | 0) >> 2] | 0 | 0)) / $348) * $351);
   label$4 : {
    label$5 : {
     if (!(Math_fround(Math_abs($358)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $76 = ~~$358;
     break label$4;
    }
    $76 = -2147483648;
   }
   HEAP16[($9 + 80 | 0) >> 1] = $76;
   $364 = Math_fround(Math_fround(Math_fround($348 - Math_fround(HEAP32[($9 + 84 | 0) >> 2] | 0 | 0)) / $348) * $351);
   label$6 : {
    label$7 : {
     if (!(Math_fround(Math_abs($364)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $83 = ~~$364;
     break label$6;
    }
    $83 = -2147483648;
   }
   HEAP16[($9 + 78 | 0) >> 1] = $83;
   HEAP32[($9 + 72 | 0) >> 2] = ((1 << (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) - 1 | 0) << (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0;
   HEAP32[($9 + 68 | 0) >> 2] = (((1 << (HEAP32[($9 + 100 | 0) >> 2] | 0) | 0) - 1 | 0) << (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) << (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0;
   HEAP32[($9 + 64 | 0) >> 2] = 0;
   label$8 : {
    label$9 : while (1) {
     if (!((HEAP32[($9 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($9 + 140 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[($9 + 60 | 0) >> 2] = 0;
     label$10 : {
      label$11 : while (1) {
       if (!((HEAP32[($9 + 60 | 0) >> 2] | 0 | 0) < (HEAP32[($9 + 144 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($9 + 56 | 0) >> 2] = (HEAP32[($9 + 152 | 0) >> 2] | 0) + (Math_imul(HEAP32[($9 + 64 | 0) >> 2] | 0, HEAP32[($9 + 136 | 0) >> 2] | 0) + ((HEAP32[($9 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) | 0;
       label$12 : {
        label$13 : {
         if (!(((HEAPU8[((HEAP32[($9 + 56 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0) & 255 | 0 | 0) < (HEAP32[(0 + 89648 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$13
         }
         HEAP32[((HEAP32[($9 + 116 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9 + 64 | 0) >> 2] | 0, HEAP32[($9 + 144 | 0) >> 2] | 0) + (HEAP32[($9 + 60 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = (HEAP32[($9 + 96 | 0) >> 2] | 0) - 1 | 0;
         break label$12;
        }
        HEAP32[($9 + 52 | 0) >> 2] = (HEAP32[($9 + 60 | 0) >> 2] | 0) & 3 | 0;
        HEAP32[($9 + 48 | 0) >> 2] = (HEAP32[($9 + 64 | 0) >> 2] | 0) & 3 | 0;
        HEAP32[($9 + 44 | 0) >> 2] = HEAP32[(76144 + ((((HEAP32[($9 + 48 | 0) >> 2] | 0) << 2 | 0) + (HEAP32[($9 + 52 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
        $171 = 16;
        $196 = 16;
        $214 = ((msf_imin(65535 | 0, Math_imul((HEAPU8[((HEAP32[($9 + 56 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0, ((HEAPU16[($9 + 78 | 0) >> 1] | 0) << $171 | 0) >> $171 | 0) + ((HEAP32[($9 + 44 | 0) >> 2] | 0) >> (HEAP32[($9 + 100 | 0) >> 2] | 0) | 0) | 0 | 0) | 0) >> (((16 - (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) - (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) - (HEAP32[($9 + 100 | 0) >> 2] | 0) | 0) | 0) & (HEAP32[($9 + 68 | 0) >> 2] | 0) | 0 | (((msf_imin(65535 | 0, Math_imul((HEAPU8[((HEAP32[($9 + 56 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0, ((HEAPU16[($9 + 80 | 0) >> 1] | 0) << $196 | 0) >> $196 | 0) + ((HEAP32[($9 + 44 | 0) >> 2] | 0) >> (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) | 0 | 0) | 0) >> ((16 - (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) - (HEAP32[($9 + 104 | 0) >> 2] | 0) | 0) | 0) & (HEAP32[($9 + 72 | 0) >> 2] | 0) | 0) | 0;
        $220 = 16;
        $229 = msf_imin(65535 | 0, Math_imul((HEAPU8[(HEAP32[($9 + 56 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0, ((HEAPU16[($9 + 82 | 0) >> 1] | 0) << $220 | 0) >> $220 | 0) + ((HEAP32[($9 + 44 | 0) >> 2] | 0) >> (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) | 0 | 0) | 0;
        HEAP32[((HEAP32[($9 + 116 | 0) >> 2] | 0) + ((Math_imul(HEAP32[($9 + 64 | 0) >> 2] | 0, HEAP32[($9 + 144 | 0) >> 2] | 0) + (HEAP32[($9 + 60 | 0) >> 2] | 0) | 0) << 2 | 0) | 0) >> 2] = $214 | ($229 >> (16 - (HEAP32[($9 + 108 | 0) >> 2] | 0) | 0) | 0) | 0;
       }
       HEAP32[($9 + 60 | 0) >> 2] = (HEAP32[($9 + 60 | 0) >> 2] | 0) + 1 | 0;
       continue label$11;
      };
     }
     HEAP32[($9 + 64 | 0) >> 2] = (HEAP32[($9 + 64 | 0) >> 2] | 0) + 1 | 0;
     continue label$9;
    };
   }
   HEAP32[($9 + 112 | 0) >> 2] = 0;
   HEAP32[($9 + 40 | 0) >> 2] = 0;
   label$14 : {
    label$15 : while (1) {
     if (!((HEAP32[($9 + 40 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($9 + 144 | 0) >> 2] | 0, HEAP32[($9 + 140 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$14
     }
     HEAP8[((HEAP32[($9 + 148 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($9 + 116 | 0) >> 2] | 0) + ((HEAP32[($9 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) >> 0] = 1;
     HEAP32[($9 + 40 | 0) >> 2] = (HEAP32[($9 + 40 | 0) >> 2] | 0) + 1 | 0;
     continue label$15;
    };
   }
   HEAP32[($9 + 36 | 0) >> 2] = 0;
   label$16 : {
    label$17 : while (1) {
     if (!((HEAP32[($9 + 36 | 0) >> 2] | 0 | 0) < ((HEAP32[($9 + 96 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$16
     }
     HEAP32[($9 + 112 | 0) >> 2] = (HEAP32[($9 + 112 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($9 + 148 | 0) >> 2] | 0) + (HEAP32[($9 + 36 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
     HEAP32[($9 + 36 | 0) >> 2] = (HEAP32[($9 + 36 | 0) >> 2] | 0) + 1 | 0;
     continue label$17;
    };
   }
   $302 = 0;
   label$18 : {
    if (!((HEAP32[($9 + 112 | 0) >> 2] | 0 | 0) >= (256 | 0) & 1 | 0)) {
     break label$18
    }
    $305 = (HEAP32[($9 + 132 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($9 + 132 | 0) >> 2] = $305;
    $302 = ($305 | 0) != (0 | 0);
   }
   if ($302 & 1 | 0) {
    continue label$1
   }
   break label$1;
  };
  HEAP32[($9 + 12 | 0) >> 2] = HEAP32[($9 + 116 | 0) >> 2] | 0;
  HEAP32[($9 + 16 | 0) >> 2] = HEAP32[($9 + 132 | 0) >> 2] | 0;
  HEAP32[($9 + 20 | 0) >> 2] = HEAP32[($9 + 112 | 0) >> 2] | 0;
  HEAP32[($9 + 24 | 0) >> 2] = HEAP32[((HEAP32[($9 + 128 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP32[($9 + 28 | 0) >> 2] = HEAP32[((HEAP32[($9 + 124 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  HEAP32[($9 + 32 | 0) >> 2] = HEAP32[((HEAP32[($9 + 120 | 0) >> 2] | 0) + ((HEAP32[($9 + 132 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  $334 = HEAP32[($9 + 156 | 0) >> 2] | 0;
  i64toi32_i32$2 = $9;
  i64toi32_i32$0 = HEAP32[($9 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($9 + 16 | 0) >> 2] | 0;
  $1145 = i64toi32_i32$0;
  i64toi32_i32$0 = $334;
  HEAP32[i64toi32_i32$0 >> 2] = $1145;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $335 = 16;
  i64toi32_i32$2 = ($9 + 12 | 0) + $335 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1158 = i64toi32_i32$1;
  i64toi32_i32$1 = $334 + $335 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $1158;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $340 = 8;
  i64toi32_i32$2 = ($9 + 12 | 0) + $340 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1171 = i64toi32_i32$0;
  i64toi32_i32$0 = $334 + $340 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1171;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $9 + 160 | 0;
  return;
 }
 
 function msf_compress_frame($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $10 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $255 = 0, $274 = 0, $256 = 0, $261 = 0, $293 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $340 = 0, $344 = 0, $348 = 0, $43 = 0, $44 = 0, $45 = 0, $352 = 0, $371 = 0, $407 = 0, $447 = 0, $474 = 0, $581 = 0, $1172 = 0, $1185 = 0, $1189 = 0, $1265 = 0, $1269 = 0, $1354 = 0, $1374 = 0, $370 = 0, $609 = 0;
  $10 = __stack_pointer - 66528 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 66520 | 0) >> 2] = $0;
  HEAP32[($10 + 66516 | 0) >> 2] = $1;
  HEAP32[($10 + 66512 | 0) >> 2] = $2;
  HEAP32[($10 + 66508 | 0) >> 2] = $3;
  HEAP32[($10 + 66504 | 0) >> 2] = $5;
  HEAP32[($10 + 66500 | 0) >> 2] = $6;
  HEAP32[($10 + 66496 | 0) >> 2] = $7;
  HEAP32[($10 + 66492 | 0) >> 2] = ((Math_imul(Math_imul(HEAP32[($10 + 66516 | 0) >> 2] | 0, HEAP32[($10 + 66512 | 0) >> 2] | 0), 3) | 0) / (2 | 0) | 0) + 808 | 0;
  HEAP32[($10 + 66488 | 0) >> 2] = dlmalloc(HEAP32[($10 + 66492 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($10 + 66488 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($10 + 66524 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($10 + 66484 | 0) >> 2] = (HEAP32[($10 + 66488 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($10 + 66472 | 0) >> 2] = HEAP32[($10 + 66496 | 0) >> 2] | 0;
   HEAP32[($10 + 66476 | 0) >> 2] = 0;
   HEAP32[($10 + 66480 | 0) >> 2] = 0;
   HEAP32[($10 + 66468 | 0) >> 2] = ((HEAP32[($4 + 12 | 0) >> 2] | 0) + (HEAP32[($4 + 16 | 0) >> 2] | 0) | 0) + (HEAP32[($4 + 20 | 0) >> 2] | 0) | 0;
   HEAP32[($10 + 66464 | 0) >> 2] = (1 << (HEAP32[($10 + 66468 | 0) >> 2] | 0) | 0) + 1 | 0;
   __memset($10 + 144 | 0 | 0, 0 | 0, 768 | 0) | 0;
   HEAP32[($10 + 140 | 0) >> 2] = 1;
   HEAP8[(($10 + 912 | 0) + ((HEAP32[($10 + 66464 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 0;
   HEAP32[($10 + 136 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($10 + 136 | 0) >> 2] | 0 | 0) < ((HEAP32[($10 + 66464 | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      if (!(((HEAPU8[((HEAP32[($10 + 66500 | 0) >> 2] | 0) + (HEAP32[($10 + 136 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP8[(($10 + 912 | 0) + (HEAP32[($10 + 136 | 0) >> 2] | 0) | 0) >> 0] = HEAP32[($10 + 140 | 0) >> 2] | 0;
      HEAP32[($10 + 132 | 0) >> 2] = (1 << (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0) - 1 | 0;
      HEAP32[($10 + 128 | 0) >> 2] = (1 << (HEAP32[($4 + 16 | 0) >> 2] | 0) | 0) - 1 | 0;
      HEAP32[($10 + 124 | 0) >> 2] = (HEAP32[($10 + 136 | 0) >> 2] | 0) & (HEAP32[($10 + 132 | 0) >> 2] | 0) | 0;
      HEAP32[($10 + 120 | 0) >> 2] = ((HEAP32[($10 + 136 | 0) >> 2] | 0) >> (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0) & (HEAP32[($10 + 128 | 0) >> 2] | 0) | 0;
      HEAP32[($10 + 116 | 0) >> 2] = (HEAP32[($10 + 136 | 0) >> 2] | 0) >> ((HEAP32[($4 + 12 | 0) >> 2] | 0) + (HEAP32[($4 + 16 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($10 + 124 | 0) >> 2] = (HEAP32[($10 + 124 | 0) >> 2] | 0) << (8 - (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($10 + 120 | 0) >> 2] = (HEAP32[($10 + 120 | 0) >> 2] | 0) << (8 - (HEAP32[($4 + 16 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($10 + 116 | 0) >> 2] = (HEAP32[($10 + 116 | 0) >> 2] | 0) << (8 - (HEAP32[($4 + 20 | 0) >> 2] | 0) | 0) | 0;
      HEAP8[(($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) >> 0] = HEAP32[($10 + 124 | 0) >> 2] | 0 | ((HEAP32[($10 + 124 | 0) >> 2] | 0) >> (HEAP32[($4 + 12 | 0) >> 2] | 0) | 0) | 0 | ((HEAP32[($10 + 124 | 0) >> 2] | 0) >> ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 1 | 0) | 0) | 0 | ((HEAP32[($10 + 124 | 0) >> 2] | 0) >> Math_imul(HEAP32[($4 + 12 | 0) >> 2] | 0, 3) | 0) | 0;
      HEAP8[((($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) + 1 | 0) >> 0] = HEAP32[($10 + 120 | 0) >> 2] | 0 | ((HEAP32[($10 + 120 | 0) >> 2] | 0) >> (HEAP32[($4 + 16 | 0) >> 2] | 0) | 0) | 0 | ((HEAP32[($10 + 120 | 0) >> 2] | 0) >> ((HEAP32[($4 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) | 0 | ((HEAP32[($10 + 120 | 0) >> 2] | 0) >> Math_imul(HEAP32[($4 + 16 | 0) >> 2] | 0, 3) | 0) | 0;
      HEAP8[((($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) + 2 | 0) >> 0] = HEAP32[($10 + 116 | 0) >> 2] | 0 | ((HEAP32[($10 + 116 | 0) >> 2] | 0) >> (HEAP32[($4 + 20 | 0) >> 2] | 0) | 0) | 0 | ((HEAP32[($10 + 116 | 0) >> 2] | 0) >> ((HEAP32[($4 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) | 0 | ((HEAP32[($10 + 116 | 0) >> 2] | 0) >> Math_imul(HEAP32[($4 + 20 | 0) >> 2] | 0, 3) | 0) | 0;
      label$6 : {
       if (!(HEAP32[(0 + 89652 | 0) >> 2] | 0)) {
        break label$6
       }
       HEAP8[($10 + 115 | 0) >> 0] = HEAPU8[(($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) >> 0] | 0;
       HEAP8[(($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) >> 0] = HEAPU8[((($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) + 2 | 0) >> 0] | 0;
       HEAP8[((($10 + 144 | 0) + Math_imul(HEAP32[($10 + 140 | 0) >> 2] | 0, 3) | 0) + 2 | 0) >> 0] = HEAPU8[($10 + 115 | 0) >> 0] | 0;
      }
      HEAP32[($10 + 140 | 0) >> 2] = (HEAP32[($10 + 140 | 0) >> 2] | 0) + 1 | 0;
     }
     HEAP32[($10 + 136 | 0) >> 2] = (HEAP32[($10 + 136 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($10 + 108 | 0) >> 2] = (HEAPU8[((HEAP32[($10 + 66500 | 0) >> 2] | 0) + ((HEAP32[($10 + 66464 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) & 255 | 0;
   HEAP32[($10 + 104 | 0) >> 2] = msf_imax(2 | 0, msf_bit_log((HEAP32[($10 + 140 | 0) >> 2] | 0) - 1 | 0 | 0) | 0 | 0) | 0;
   HEAP32[($10 + 100 | 0) >> 2] = 1 << (HEAP32[($10 + 104 | 0) >> 2] | 0) | 0;
   $255 = (HEAP32[($10 + 66504 | 0) >> 2] | 0) + 8 | 0;
   $256 = 16;
   i64toi32_i32$2 = $255 + $256 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1172 = i64toi32_i32$0;
   i64toi32_i32$0 = ($10 + 72 | 0) + $256 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1172;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $261 = 8;
   i64toi32_i32$2 = $255 + $261 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1185 = i64toi32_i32$1;
   i64toi32_i32$1 = ($10 + 72 | 0) + $261 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1185;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $255;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1189 = i64toi32_i32$0;
   i64toi32_i32$0 = $10;
   HEAP32[($10 + 72 | 0) >> 2] = $1189;
   HEAP32[($10 + 76 | 0) >> 2] = i64toi32_i32$1;
   $274 = 0;
   label$7 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($10 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $274 = 0;
    if (!((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($10 + 88 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $274 = (HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($10 + 92 | 0) >> 2] | 0 | 0);
   }
   HEAP32[($10 + 68 | 0) >> 2] = $274 & 1 | 0;
   $293 = 0;
   label$8 : {
    if (!(HEAP32[($10 + 68 | 0) >> 2] | 0)) {
     break label$8
    }
    $293 = (HEAP32[($10 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0;
   }
   HEAP32[($10 + 64 | 0) >> 2] = $293 & 1 | 0;
   $35 = 0;
   $36 = HEAPU8[($35 + 76223 | 0) >> 0] | 0 | ((HEAPU8[($35 + 76224 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($35 + 76225 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($35 + 76226 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($10 + 47 | 0) >> 0] = $36;
   HEAP8[($10 + 48 | 0) >> 0] = $36 >>> 8 | 0;
   HEAP8[($10 + 49 | 0) >> 0] = $36 >>> 16 | 0;
   HEAP8[($10 + 50 | 0) >> 0] = $36 >>> 24 | 0;
   i64toi32_i32$2 = $35;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76216 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 76220 | 0) >> 2] | 0;
   $1265 = i64toi32_i32$1;
   i64toi32_i32$1 = $10;
   HEAP32[($10 + 40 | 0) >> 2] = $1265;
   HEAP32[($10 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 76208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 76212 | 0) >> 2] | 0;
   $1269 = i64toi32_i32$0;
   i64toi32_i32$0 = $10;
   HEAP32[($10 + 32 | 0) >> 2] = $1269;
   HEAP32[($10 + 36 | 0) >> 2] = i64toi32_i32$1;
   label$9 : {
    if (!(HEAP32[($10 + 108 | 0) >> 2] | 0)) {
     break label$9
    }
    if (!((HEAP32[((HEAP32[($10 + 66504 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break label$9
    }
    HEAP8[((HEAP32[((HEAP32[($10 + 66504 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0) + 11 | 0) >> 0] = 9;
   }
   HEAP16[(($10 + 32 | 0) + 4 | 0) >> 1] = HEAPU16[($10 + 66508 | 0) >> 1] | 0;
   $39 = ($10 + 32 | 0) + 13 | 0;
   $40 = HEAPU16[($10 + 66516 | 0) >> 1] | 0;
   HEAP8[$39 >> 0] = $40;
   HEAP8[($39 + 1 | 0) >> 0] = $40 >>> 8 | 0;
   $41 = ($10 + 32 | 0) + 15 | 0;
   $42 = HEAPU16[($10 + 66512 | 0) >> 1] | 0;
   HEAP8[$41 >> 0] = $42;
   HEAP8[($41 + 1 | 0) >> 0] = $42 >>> 8 | 0;
   $340 = 24;
   HEAP8[($10 + 49 | 0) >> 0] = ((HEAPU8[($10 + 49 | 0) >> 0] | 0) << $340 | 0) >> $340 | 0 | ((HEAP32[($10 + 104 | 0) >> 2] | 0) - 1 | 0) | 0;
   $344 = HEAP32[($10 + 66484 | 0) >> 2] | 0;
   i64toi32_i32$2 = $10 + 32 | 0;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $1354 = i64toi32_i32$1;
   i64toi32_i32$1 = $344;
   $37 = $1354;
   HEAP8[i64toi32_i32$1 >> 0] = $37;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $37 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $37 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $37 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   $348 = 16;
   $43 = i64toi32_i32$2 + $348 | 0;
   $44 = i64toi32_i32$1 + $348 | 0;
   $45 = HEAPU8[$43 >> 0] | 0 | ((HEAPU8[($43 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
   HEAP8[$44 >> 0] = $45;
   HEAP8[($44 + 1 | 0) >> 0] = $45 >>> 8 | 0;
   $352 = 8;
   i64toi32_i32$2 = i64toi32_i32$2 + $352 | 0;
   i64toi32_i32$0 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $1374 = i64toi32_i32$0;
   i64toi32_i32$0 = $344 + $352 | 0;
   $38 = $1374;
   HEAP8[i64toi32_i32$0 >> 0] = $38;
   HEAP8[(i64toi32_i32$0 + 1 | 0) >> 0] = $38 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 2 | 0) >> 0] = $38 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 3 | 0) >> 0] = $38 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 4 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   HEAP32[($10 + 66484 | 0) >> 2] = (HEAP32[($10 + 66484 | 0) >> 2] | 0) + 18 | 0;
   __memcpy(HEAP32[($10 + 66484 | 0) >> 2] | 0 | 0, $10 + 144 | 0 | 0, Math_imul(HEAP32[($10 + 100 | 0) >> 2] | 0, 3) | 0) | 0;
   HEAP32[($10 + 66484 | 0) >> 2] = (HEAP32[($10 + 66484 | 0) >> 2] | 0) + Math_imul(HEAP32[($10 + 100 | 0) >> 2] | 0, 3) | 0;
   $370 = HEAP32[($10 + 104 | 0) >> 2] | 0;
   $371 = HEAP32[($10 + 66484 | 0) >> 2] | 0;
   HEAP32[($10 + 66484 | 0) >> 2] = $371 + 1 | 0;
   HEAP8[$371 >> 0] = $370;
   __memset(HEAP32[($10 + 66484 | 0) >> 2] | 0 | 0, 0 | 0, 260 | 0) | 0;
   HEAP8[(HEAP32[($10 + 66484 | 0) >> 2] | 0) >> 0] = 255;
   HEAP32[($10 + 28 | 0) >> 2] = 8;
   msf_lzw_reset($10 + 66472 | 0 | 0, HEAP32[($10 + 100 | 0) >> 2] | 0 | 0, HEAP32[($10 + 140 | 0) >> 2] | 0 | 0);
   msf_put_code($10 + 66484 | 0 | 0, $10 + 28 | 0 | 0, msf_bit_log((HEAP32[($10 + 66476 | 0) >> 2] | 0) - 1 | 0 | 0) | 0 | 0, HEAP32[($10 + 100 | 0) >> 2] | 0 | 0);
   label$10 : {
    label$11 : {
     if (!(HEAP32[($10 + 64 | 0) >> 2] | 0)) {
      break label$11
     }
     if (!((HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($10 + 72 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$11
     }
     $407 = 0;
     break label$10;
    }
    $407 = (HEAPU8[(($10 + 912 | 0) + (HEAP32[(HEAP32[$4 >> 2] | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
   }
   HEAP32[($10 + 24 | 0) >> 2] = $407;
   HEAP32[($10 + 20 | 0) >> 2] = 1;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($10 + 20 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 66516 | 0) >> 2] | 0, HEAP32[($10 + 66512 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$12
     }
     label$14 : {
      label$15 : {
       if (!(HEAP32[($10 + 64 | 0) >> 2] | 0)) {
        break label$15
       }
       if (!((HEAP32[((HEAP32[$4 >> 2] | 0) + ((HEAP32[($10 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($10 + 72 | 0) >> 2] | 0) + ((HEAP32[($10 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       $447 = 0;
       break label$14;
      }
      $447 = (HEAPU8[(($10 + 912 | 0) + (HEAP32[((HEAP32[$4 >> 2] | 0) + ((HEAP32[($10 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0;
     }
     HEAP32[($10 + 16 | 0) >> 2] = $447;
     $474 = 16;
     HEAP32[($10 + 12 | 0) >> 2] = ((HEAPU16[(((HEAP32[($10 + 66472 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10 + 24 | 0) >> 2] | 0, HEAP32[($10 + 66480 | 0) >> 2] | 0) << 1 | 0) | 0) + ((HEAP32[($10 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) << $474 | 0) >> $474 | 0;
     label$16 : {
      label$17 : {
       if (!((HEAP32[($10 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
        break label$17
       }
       HEAP32[($10 + 8 | 0) >> 2] = msf_bit_log((HEAP32[($10 + 66476 | 0) >> 2] | 0) - 1 | 0 | 0) | 0;
       msf_put_code($10 + 66484 | 0 | 0, $10 + 28 | 0 | 0, HEAP32[($10 + 8 | 0) >> 2] | 0 | 0, HEAP32[($10 + 24 | 0) >> 2] | 0 | 0);
       label$18 : {
        label$19 : {
         if (!((HEAP32[($10 + 66476 | 0) >> 2] | 0 | 0) > (4095 | 0) & 1 | 0)) {
          break label$19
         }
         msf_put_code($10 + 66484 | 0 | 0, $10 + 28 | 0 | 0, HEAP32[($10 + 8 | 0) >> 2] | 0 | 0, HEAP32[($10 + 100 | 0) >> 2] | 0 | 0);
         msf_lzw_reset($10 + 66472 | 0 | 0, HEAP32[($10 + 100 | 0) >> 2] | 0 | 0, HEAP32[($10 + 140 | 0) >> 2] | 0 | 0);
         break label$18;
        }
        HEAP16[(((HEAP32[($10 + 66472 | 0) >> 2] | 0) + (Math_imul(HEAP32[($10 + 24 | 0) >> 2] | 0, HEAP32[($10 + 66480 | 0) >> 2] | 0) << 1 | 0) | 0) + ((HEAP32[($10 + 16 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = HEAP32[($10 + 66476 | 0) >> 2] | 0;
        HEAP32[($10 + 66476 | 0) >> 2] = (HEAP32[($10 + 66476 | 0) >> 2] | 0) + 1 | 0;
       }
       HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 16 | 0) >> 2] | 0;
       break label$16;
      }
      HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 12 | 0) >> 2] | 0;
     }
     HEAP32[($10 + 20 | 0) >> 2] = (HEAP32[($10 + 20 | 0) >> 2] | 0) + 1 | 0;
     continue label$13;
    };
   }
   msf_put_code($10 + 66484 | 0 | 0, $10 + 28 | 0 | 0, msf_imin(12 | 0, msf_bit_log((HEAP32[($10 + 66476 | 0) >> 2] | 0) - 1 | 0 | 0) | 0 | 0) | 0 | 0, HEAP32[($10 + 24 | 0) >> 2] | 0 | 0);
   msf_put_code($10 + 66484 | 0 | 0, $10 + 28 | 0 | 0, msf_imin(12 | 0, msf_bit_log(HEAP32[($10 + 66476 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, (HEAP32[($10 + 100 | 0) >> 2] | 0) + 1 | 0 | 0);
   label$20 : {
    if (!((HEAP32[($10 + 28 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0)) {
     break label$20
    }
    HEAP32[($10 + 4 | 0) >> 2] = ((HEAP32[($10 + 28 | 0) >> 2] | 0) + 7 | 0) >>> 3 | 0;
    HEAP8[(HEAP32[($10 + 66484 | 0) >> 2] | 0) >> 0] = (HEAP32[($10 + 4 | 0) >> 2] | 0) - 1 | 0;
    HEAP32[($10 + 66484 | 0) >> 2] = (HEAP32[($10 + 66484 | 0) >> 2] | 0) + (HEAP32[($10 + 4 | 0) >> 2] | 0) | 0;
   }
   $581 = HEAP32[($10 + 66484 | 0) >> 2] | 0;
   HEAP32[($10 + 66484 | 0) >> 2] = $581 + 1 | 0;
   HEAP8[$581 >> 0] = 0;
   HEAP32[(HEAP32[($10 + 66488 | 0) >> 2] | 0) >> 2] = 0;
   HEAP32[((HEAP32[($10 + 66488 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[($10 + 66484 | 0) >> 2] | 0) - ((HEAP32[($10 + 66488 | 0) >> 2] | 0) + 8 | 0) | 0;
   HEAP32[$10 >> 2] = dlrealloc(HEAP32[($10 + 66488 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($10 + 66488 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
   label$21 : {
    if ((HEAP32[$10 >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$21
    }
    dlfree(HEAP32[($10 + 66488 | 0) >> 2] | 0 | 0);
    HEAP32[($10 + 66524 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($10 + 66524 | 0) >> 2] = HEAP32[$10 >> 2] | 0;
  }
  $609 = HEAP32[($10 + 66524 | 0) >> 2] | 0;
  __stack_pointer = $10 + 66528 | 0;
  return $609 | 0;
 }
 
 function msf_bit_log($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  return 32 - Math_clz32(HEAP32[($3 + 12 | 0) >> 2] | 0) | 0 | 0;
 }
 
 function msf_lzw_reset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  __memset(HEAP32[(HEAP32[($5 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0, 255 | 0, ((HEAP32[($5 + 4 | 0) >> 2] | 0) << 12 | 0) << 1 | 0 | 0) | 0;
  HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 2 | 0;
  HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function msf_put_code($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $23 = 0, $38 = 0, $53 = 0, $59 = 0, $70 = 0, $74 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 28 | 0) >> 2] = $0;
  HEAP32[($6 + 24 | 0) >> 2] = $1;
  HEAP32[($6 + 20 | 0) >> 2] = $2;
  HEAP32[($6 + 16 | 0) >> 2] = $3;
  HEAP32[($6 + 12 | 0) >> 2] = (HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] | 0) >>> 3 | 0;
  HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] | 0) & 7 | 0;
  $23 = (HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6 + 12 | 0) >> 2] | 0) + 0 | 0) | 0;
  HEAP8[$23 >> 0] = (HEAPU8[$23 >> 0] | 0) & 255 | 0 | ((HEAP32[($6 + 16 | 0) >> 2] | 0) << (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0) | 0;
  $38 = (HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6 + 12 | 0) >> 2] | 0) + 1 | 0) | 0;
  HEAP8[$38 >> 0] = (HEAPU8[$38 >> 0] | 0) & 255 | 0 | ((HEAP32[($6 + 16 | 0) >> 2] | 0) >>> (8 - (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0) | 0) | 0;
  $53 = (HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[($6 + 12 | 0) >> 2] | 0) + 2 | 0) | 0;
  HEAP8[$53 >> 0] = (HEAPU8[$53 >> 0] | 0) & 255 | 0 | ((HEAP32[($6 + 16 | 0) >> 2] | 0) >>> (16 - (HEAP32[($6 + 8 | 0) >> 2] | 0) | 0) | 0) | 0;
  $59 = HEAP32[($6 + 24 | 0) >> 2] | 0;
  HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + (HEAP32[($6 + 20 | 0) >> 2] | 0) | 0;
  label$1 : {
   if (!((HEAP32[(HEAP32[($6 + 24 | 0) >> 2] | 0) >> 2] | 0) >>> 0 >= 2048 >>> 0 & 1 | 0)) {
    break label$1
   }
   $70 = HEAP32[($6 + 24 | 0) >> 2] | 0;
   HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) - 2040 | 0;
   $74 = HEAP32[($6 + 28 | 0) >> 2] | 0;
   HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + 256 | 0;
   HEAP8[((HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0) >> 0] | 0;
   HEAP8[((HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0) >> 0] = HEAPU8[(HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 0] | 0;
   HEAP8[(HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) >> 0] = 255;
   __memset((HEAP32[(HEAP32[($6 + 28 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0 | 0, 0 | 0, 256 | 0) | 0;
  }
  __stack_pointer = $6 + 32 | 0;
  return;
 }
 
 function msf_gif_end($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $74 = 0, $62 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 28 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if ((HEAP32[((HEAP32[($4 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $74 = 0;
    i64toi32_i32$1 = $0;
    HEAP32[$0 >> 2] = $74;
    HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $74;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   HEAP32[($4 + 24 | 0) >> 2] = 1;
   HEAP32[($4 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($4 + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4 + 24 | 0) >> 2] = (HEAP32[($4 + 24 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
     HEAP32[($4 + 20 | 0) >> 2] = HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] | 0;
     continue label$4;
    };
   }
   HEAP32[($4 + 16 | 0) >> 2] = dlmalloc(HEAP32[($4 + 24 | 0) >> 2] | 0 | 0) | 0;
   label$5 : {
    if (!((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($4 + 12 | 0) >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
    HEAP32[($4 + 8 | 0) >> 2] = HEAP32[((HEAP32[($4 + 28 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      __memcpy(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 8 | 0 | 0, HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
      HEAP32[($4 + 8 | 0) >> 2] = HEAP32[(HEAP32[($4 + 8 | 0) >> 2] | 0) >> 2] | 0;
      continue label$7;
     };
    }
    $62 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    HEAP32[($4 + 12 | 0) >> 2] = $62 + 1 | 0;
    HEAP8[$62 >> 0] = 59;
   }
   msf_free_gif_state(HEAP32[($4 + 28 | 0) >> 2] | 0 | 0);
   HEAP32[$0 >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 24 | 0) >> 2] | 0;
   HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($4 + 24 | 0) >> 2] | 0;
   HEAP32[($0 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4 + 28 | 0) >> 2] | 0) + 76 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 32 | 0;
  return;
 }
 
 function msf_gif_free($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!((HEAP32[$0 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   dlfree(HEAP32[$0 >> 2] | 0 | 0);
  }
  return;
 }
 
 function InitWindow($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $132 = 0, $112 = 0, $44 = 0, $99 = 0, $100 = 0, $113 = 0, $119 = 0, $124 = 0, $319 = 0, $405 = 0, $409 = 0, $447 = 0, $451 = 0, $511 = 0, $515 = 0, $531 = 0, $535 = 0;
  $5 = __stack_pointer - 304 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 300 | 0) >> 2] = $0;
  HEAP32[($5 + 296 | 0) >> 2] = $1;
  HEAP32[($5 + 292 | 0) >> 2] = $2;
  HEAP32[($5 + 48 | 0) >> 2] = 67051;
  TraceLog(3 | 0, 67745 | 0, $5 + 48 | 0 | 0);
  TraceLog(3 | 0, 73273 | 0, 0 | 0);
  TraceLog(3 | 0, 73595 | 0, 0 | 0);
  TraceLog(3 | 0, 73632 | 0, 0 | 0);
  TraceLog(3 | 0, 73954 | 0, 0 | 0);
  TraceLog(3 | 0, 73882 | 0, 0 | 0);
  TraceLog(3 | 0, 74026 | 0, 0 | 0);
  TraceLog(3 | 0, 73918 | 0, 0 | 0);
  TraceLog(3 | 0, 73990 | 0, 0 | 0);
  label$1 : {
   if (!((HEAP32[($5 + 292 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   $44 = 24;
   if (!(((HEAPU8[(HEAP32[($5 + 292 | 0) >> 2] | 0) >> 0] | 0) << $44 | 0) >> $44 | 0)) {
    break label$1
   }
   HEAP32[(0 + 89660 | 0) >> 2] = HEAP32[($5 + 292 | 0) >> 2] | 0;
  }
  __memset(89800 | 0, 0 | 0, 2004 | 0) | 0;
  HEAP32[(0 + 89800 | 0) >> 2] = 256;
  HEAPF32[($5 + 284 | 0) >> 2] = Math_fround(1.0);
  HEAPF32[($5 + 288 | 0) >> 2] = Math_fround(1.0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 284 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 288 | 0) >> 2] | 0;
  $319 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 90972 | 0) >> 2] = $319;
  HEAP32[(i64toi32_i32$0 + 90976 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(0 + 90996 | 0) >> 2] = 1;
  HEAP32[(0 + 91152 | 0) >> 2] = 0;
  HEAP8[(0 + 89668 | 0) >> 0] = (InitGraphicsDevice(HEAP32[($5 + 300 | 0) >> 2] | 0 | 0, HEAP32[($5 + 296 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
  label$2 : {
   label$3 : {
    if ((HEAPU8[(0 + 89668 | 0) >> 0] | 0) & 1 | 0) {
     break label$3
    }
    TraceLog(6 | 0, 70540 | 0, 0 | 0);
    break label$2;
   }
   SetWindowPosition(((GetMonitorWidth(GetCurrentMonitor() | 0 | 0) | 0 | 0) / (2 | 0) | 0) - ((HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 1 | 0) | 0 | 0, ((GetMonitorHeight(GetCurrentMonitor() | 0 | 0) | 0 | 0) / (2 | 0) | 0) - ((HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 1 | 0) | 0 | 0);
   InitTimer();
   i64toi32_i32$1 = __time(0 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   srand(i64toi32_i32$1 | 0);
   HEAP32[(0 + 89796 | 0) >> 2] = GetWorkingDirectory() | 0;
   LoadFontDefault();
   GetFontDefault($5 + 224 | 0 | 0);
   $99 = (HEAP32[($5 + 256 | 0) >> 2] | 0) + 1520 | 0;
   $100 = 8;
   i64toi32_i32$2 = $99 + $100 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $405 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5 + 264 | 0) + $100 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $405;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $99;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $409 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 264 | 0) >> 2] = $409;
   HEAP32[($5 + 268 | 0) >> 2] = i64toi32_i32$0;
   GetFontDefault($5 + 160 | 0 | 0);
   $112 = ($5 + 160 | 0) + 12 | 0;
   $113 = 16;
   HEAP32[(($5 + 200 | 0) + $113 | 0) >> 2] = HEAP32[($112 + $113 | 0) >> 2] | 0;
   $119 = 8;
   i64toi32_i32$2 = $112 + $119 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $447 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5 + 200 | 0) + $119 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $447;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $112;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $451 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 200 | 0) >> 2] = $451;
   HEAP32[($5 + 204 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($5 + 144 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 264 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[($5 + 148 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 268 | 0) >> 2]) + Math_fround(1.0));
   HEAPF32[($5 + 152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 272 | 0) >> 2]) - Math_fround(2.0));
   HEAPF32[($5 + 156 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 276 | 0) >> 2]) - Math_fround(2.0));
   $124 = 16;
   HEAP32[(($5 + 24 | 0) + $124 | 0) >> 2] = HEAP32[(($5 + 200 | 0) + $124 | 0) >> 2] | 0;
   $132 = 8;
   i64toi32_i32$2 = ($5 + 200 | 0) + $132 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $511 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5 + 24 | 0) + $132 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $511;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = HEAP32[($5 + 200 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 204 | 0) >> 2] | 0;
   $515 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 24 | 0) >> 2] = $515;
   HEAP32[($5 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = ($5 + 144 | 0) + $132 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $531 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5 + 8 | 0) + $132 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $531;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5;
   i64toi32_i32$1 = HEAP32[($5 + 144 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5 + 148 | 0) >> 2] | 0;
   $535 = i64toi32_i32$1;
   i64toi32_i32$1 = $5;
   HEAP32[($5 + 8 | 0) >> 2] = $535;
   HEAP32[($5 + 12 | 0) >> 2] = i64toi32_i32$0;
   SetShapesTexture($5 + 24 | 0 | 0, $5 + 8 | 0 | 0);
   label$4 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 8192 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$4
    }
    GetFontDefault($5 + 104 | 0 | 0);
    rlTextureParameters(HEAP32[($5 + 116 | 0) >> 2] | 0 | 0, 10241 | 0, 9729 | 0);
    GetFontDefault($5 + 64 | 0 | 0);
    rlTextureParameters(HEAP32[($5 + 76 | 0) >> 2] | 0 | 0, 10240 | 0, 9729 | 0);
   }
   emscripten_set_fullscreenchange_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 12 | 0, 2 | 0) | 0;
   emscripten_set_click_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 13 | 0, 2 | 0) | 0;
   emscripten_set_touchstart_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 14 | 0, 2 | 0) | 0;
   emscripten_set_touchend_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 14 | 0, 2 | 0) | 0;
   emscripten_set_touchmove_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 14 | 0, 2 | 0) | 0;
   emscripten_set_touchcancel_callback_on_thread(67731 | 0, 0 | 0, 1 | 0, 14 | 0, 2 | 0) | 0;
   emscripten_set_gamepadconnected_callback_on_thread(0 | 0, 1 | 0, 15 | 0, 2 | 0) | 0;
   emscripten_set_gamepaddisconnected_callback_on_thread(0 | 0, 1 | 0, 15 | 0, 2 | 0) | 0;
  }
  __stack_pointer = $5 + 304 | 0;
  return;
 }
 
 function InitGraphicsDevice($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12 = 0, $373 = 0, $394 = 0, $397 = 0, $573 = 0, $580 = 0, $587 = 0, $594 = 0, $601 = 0, $608 = 0, $615 = 0, $622 = 0, $348 = 0, $360 = 0, $362 = 0, $381 = 0, $383 = 0, $484 = 0, $490 = 0, $498 = 0, $506 = 0, $537 = 0;
  $4 = __stack_pointer - 176 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 168 | 0) >> 2] = $0;
  HEAP32[($4 + 164 | 0) >> 2] = $1;
  HEAP32[(0 + 89692 | 0) >> 2] = HEAP32[($4 + 168 | 0) >> 2] | 0;
  HEAP32[(0 + 89696 | 0) >> 2] = HEAP32[($4 + 164 | 0) >> 2] | 0;
  MatrixIdentity($4 + 100 | 0 | 0);
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[($4 + 100 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 104 | 0) >> 2] | 0;
  $12 = 0;
  $573 = i64toi32_i32$0;
  i64toi32_i32$0 = $12;
  HEAP32[(i64toi32_i32$0 + 89724 | 0) >> 2] = $573;
  HEAP32[(i64toi32_i32$0 + 89728 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 156 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $580 = i64toi32_i32$1;
  i64toi32_i32$1 = $12;
  HEAP32[(i64toi32_i32$1 + 89780 | 0) >> 2] = $580;
  HEAP32[(i64toi32_i32$1 + 89784 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 148 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $587 = i64toi32_i32$0;
  i64toi32_i32$0 = $12;
  HEAP32[(i64toi32_i32$0 + 89772 | 0) >> 2] = $587;
  HEAP32[(i64toi32_i32$0 + 89776 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 140 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $594 = i64toi32_i32$1;
  i64toi32_i32$1 = $12;
  HEAP32[(i64toi32_i32$1 + 89764 | 0) >> 2] = $594;
  HEAP32[(i64toi32_i32$1 + 89768 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 132 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $601 = i64toi32_i32$0;
  i64toi32_i32$0 = $12;
  HEAP32[(i64toi32_i32$0 + 89756 | 0) >> 2] = $601;
  HEAP32[(i64toi32_i32$0 + 89760 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 124 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $608 = i64toi32_i32$1;
  i64toi32_i32$1 = $12;
  HEAP32[(i64toi32_i32$1 + 89748 | 0) >> 2] = $608;
  HEAP32[(i64toi32_i32$1 + 89752 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4 + 116 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $615 = i64toi32_i32$0;
  i64toi32_i32$0 = $12;
  HEAP32[(i64toi32_i32$0 + 89740 | 0) >> 2] = $615;
  HEAP32[(i64toi32_i32$0 + 89744 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4 + 108 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $622 = i64toi32_i32$1;
  i64toi32_i32$1 = $12;
  HEAP32[(i64toi32_i32$1 + 89732 | 0) >> 2] = $622;
  HEAP32[(i64toi32_i32$1 + 89736 | 0) >> 2] = i64toi32_i32$0;
  glfwSetErrorCallback(16 | 0) | 0;
  label$1 : {
   label$2 : {
    if (glfwInit() | 0) {
     break label$2
    }
    TraceLog(4 | 0, 71742 | 0, 0 | 0);
    HEAP8[($4 + 175 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   glfwDefaultWindowHints();
   label$3 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 2 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$3
    }
    HEAP8[(0 + 89669 | 0) >> 0] = 1;
   }
   label$4 : {
    label$5 : {
     if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 128 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$5
     }
     glfwWindowHint(131076 | 0, 0 | 0);
     break label$4;
    }
    glfwWindowHint(131076 | 0, 1 | 0);
   }
   label$6 : {
    label$7 : {
     if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 8 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$7
     }
     glfwWindowHint(131077 | 0, 0 | 0);
     break label$6;
    }
    glfwWindowHint(131077 | 0, 1 | 0);
   }
   label$8 : {
    label$9 : {
     if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 4 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$9
     }
     glfwWindowHint(131075 | 0, 1 | 0);
     break label$8;
    }
    glfwWindowHint(131075 | 0, 0 | 0);
   }
   label$10 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 512 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$10
    }
    HEAP32[(0 + 89664 | 0) >> 2] = (HEAP32[(0 + 89664 | 0) >> 2] | 0) & -513 | 0;
   }
   label$11 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 1024 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$11
    }
    HEAP32[(0 + 89664 | 0) >> 2] = (HEAP32[(0 + 89664 | 0) >> 2] | 0) & -1025 | 0;
   }
   label$12 : {
    label$13 : {
     if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 2048 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$13
     }
     glfwWindowHint(131073 | 0, 0 | 0);
     break label$12;
    }
    glfwWindowHint(131073 | 0, 1 | 0);
   }
   label$14 : {
    label$15 : {
     if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 4096 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$15
     }
     glfwWindowHint(131079 | 0, 1 | 0);
     break label$14;
    }
    glfwWindowHint(131079 | 0, 0 | 0);
   }
   label$16 : {
    if (!((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 32 | 0)) {
     break label$16
    }
    TraceLog(3 | 0, 73423 | 0, 0 | 0);
    glfwWindowHint(135181 | 0, 4 | 0);
   }
   label$17 : {
    label$18 : {
     if (!((rlGetVersion() | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$18
     }
     glfwWindowHint(139266 | 0, 2 | 0);
     glfwWindowHint(139267 | 0, 1 | 0);
     break label$17;
    }
    label$19 : {
     label$20 : {
      if (!((rlGetVersion() | 0 | 0) == (3 | 0) & 1 | 0)) {
       break label$20
      }
      glfwWindowHint(139266 | 0, 3 | 0);
      glfwWindowHint(139267 | 0, 3 | 0);
      glfwWindowHint(139272 | 0, 204801 | 0);
      glfwWindowHint(139270 | 0, 0 | 0);
      break label$19;
     }
     label$21 : {
      label$22 : {
       if (!((rlGetVersion() | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$22
       }
       glfwWindowHint(139266 | 0, 4 | 0);
       glfwWindowHint(139267 | 0, 3 | 0);
       glfwWindowHint(139272 | 0, 204801 | 0);
       glfwWindowHint(139270 | 0, 0 | 0);
       break label$21;
      }
      label$23 : {
       if (!((rlGetVersion() | 0 | 0) == (5 | 0) & 1 | 0)) {
        break label$23
       }
       glfwWindowHint(139266 | 0, 2 | 0);
       glfwWindowHint(139267 | 0, 0 | 0);
       glfwWindowHint(139265 | 0, 196610 | 0);
       glfwWindowHint(139275 | 0, 221185 | 0);
      }
     }
    }
   }
   HEAP32[(0 + 89684 | 0) >> 2] = HEAP32[(0 + 89692 | 0) >> 2] | 0;
   HEAP32[(0 + 89688 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
   label$24 : {
    label$25 : {
     if (!((HEAPU8[(0 + 89669 | 0) >> 0] | 0) & 1 | 0)) {
      break label$25
     }
     label$26 : {
      label$27 : {
       if (!((HEAP32[(0 + 89696 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 89688 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       if (!((HEAP32[(0 + 89692 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 89684 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[(0 + 89676 | 0) >> 2] = (HEAP32[(0 + 89684 | 0) >> 2] | 0) >>> 2 | 0;
       HEAP32[(0 + 89680 | 0) >> 2] = (HEAP32[(0 + 89688 | 0) >> 2] | 0) >>> 2 | 0;
       break label$26;
      }
      HEAP32[(0 + 89676 | 0) >> 2] = ((HEAP32[(0 + 89684 | 0) >> 2] | 0) >>> 1 | 0) - ((HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 1 | 0) | 0;
      HEAP32[(0 + 89680 | 0) >> 2] = ((HEAP32[(0 + 89688 | 0) >> 2] | 0) >>> 1 | 0) - ((HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 1 | 0) | 0;
     }
     label$28 : {
      if (!((HEAP32[(0 + 89676 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$28
      }
      HEAP32[(0 + 89676 | 0) >> 2] = 0;
     }
     label$29 : {
      if (!((HEAP32[(0 + 89680 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$29
      }
      HEAP32[(0 + 89680 | 0) >> 2] = 0;
     }
     HEAP32[($4 + 96 | 0) >> 2] = 0;
     HEAP32[($4 + 92 | 0) >> 2] = glfwGetVideoModes(glfwGetPrimaryMonitor() | 0 | 0, $4 + 96 | 0 | 0) | 0;
     HEAP32[($4 + 88 | 0) >> 2] = 0;
     label$30 : {
      label$31 : while (1) {
       if (!((HEAP32[($4 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 96 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$30
       }
       label$32 : {
        if (!((HEAP32[((HEAP32[($4 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 88 | 0) >> 2] | 0, 24) | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
         break label$32
        }
        label$33 : {
         if (!((HEAP32[(((HEAP32[($4 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 88 | 0) >> 2] | 0, 24) | 0) + 4 | 0) >> 2] | 0) >>> 0 >= (HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$33
         }
         HEAP32[(0 + 89684 | 0) >> 2] = HEAP32[((HEAP32[($4 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 88 | 0) >> 2] | 0, 24) | 0) >> 2] | 0;
         HEAP32[(0 + 89688 | 0) >> 2] = HEAP32[(((HEAP32[($4 + 92 | 0) >> 2] | 0) + Math_imul(HEAP32[($4 + 88 | 0) >> 2] | 0, 24) | 0) + 4 | 0) >> 2] | 0;
         break label$30;
        }
       }
       HEAP32[($4 + 88 | 0) >> 2] = (HEAP32[($4 + 88 | 0) >> 2] | 0) + 1 | 0;
       continue label$31;
      };
     }
     $348 = HEAP32[(0 + 89684 | 0) >> 2] | 0;
     HEAP32[($4 + 68 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
     HEAP32[($4 + 64 | 0) >> 2] = $348;
     TraceLog(4 | 0, 69184 | 0, $4 + 64 | 0 | 0);
     SetupFramebuffer(HEAP32[(0 + 89684 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89688 | 0) >> 2] | 0 | 0);
     $360 = HEAP32[(0 + 89684 | 0) >> 2] | 0;
     $362 = HEAP32[(0 + 89688 | 0) >> 2] | 0;
     label$34 : {
      label$35 : {
       if (!((HEAP32[(0 + 89660 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$35
       }
       $373 = HEAP32[(0 + 89660 | 0) >> 2] | 0;
       break label$34;
      }
      $373 = 74789;
     }
     HEAP32[(0 + 89656 | 0) >> 2] = glfwCreateWindow($360 | 0, $362 | 0, $373 | 0, glfwGetPrimaryMonitor() | 0 | 0, 0 | 0) | 0;
     break label$24;
    }
    $381 = HEAP32[(0 + 89692 | 0) >> 2] | 0;
    $383 = HEAP32[(0 + 89696 | 0) >> 2] | 0;
    label$36 : {
     label$37 : {
      if (!((HEAP32[(0 + 89660 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$37
      }
      $394 = HEAP32[(0 + 89660 | 0) >> 2] | 0;
      break label$36;
     }
     $394 = 74789;
    }
    $397 = 0;
    HEAP32[(0 + 89656 | 0) >> 2] = glfwCreateWindow($381 | 0, $383 | 0, $394 | 0, $397 | 0, $397 | 0) | 0;
    label$38 : {
     if (!((HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$38
     }
     HEAP32[(0 + 89708 | 0) >> 2] = HEAP32[(0 + 89692 | 0) >> 2] | 0;
     HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
    }
   }
   label$39 : {
    if ((HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$39
    }
    glfwTerminate();
    TraceLog(4 | 0, 66398 | 0, 0 | 0);
    HEAP8[($4 + 175 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   glfwSetWindowSizeCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 17 | 0) | 0;
   glfwSetWindowIconifyCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 18 | 0) | 0;
   glfwSetWindowFocusCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 19 | 0) | 0;
   glfwSetDropCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 20 | 0) | 0;
   glfwSetKeyCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 21 | 0) | 0;
   glfwSetCharCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 22 | 0) | 0;
   glfwSetMouseButtonCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 23 | 0) | 0;
   glfwSetCursorPosCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 24 | 0) | 0;
   glfwSetScrollCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 25 | 0) | 0;
   glfwSetCursorEnterCallback(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 26 | 0) | 0;
   glfwMakeContextCurrent(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0);
   label$40 : {
    if (!((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 64 | 0)) {
     break label$40
    }
    glfwSwapInterval(1 | 0);
    TraceLog(3 | 0, 72437 | 0, 0 | 0);
   }
   HEAP32[($4 + 84 | 0) >> 2] = HEAP32[(0 + 89692 | 0) >> 2] | 0;
   HEAP32[($4 + 80 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
   HEAP32[(0 + 89708 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
   HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[($4 + 80 | 0) >> 2] | 0;
   HEAP32[(0 + 89700 | 0) >> 2] = HEAP32[($4 + 84 | 0) >> 2] | 0;
   HEAP32[(0 + 89704 | 0) >> 2] = HEAP32[($4 + 80 | 0) >> 2] | 0;
   TraceLog(3 | 0, 65705 | 0, 0 | 0);
   $484 = HEAP32[(0 + 89684 | 0) >> 2] | 0;
   HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
   HEAP32[$4 >> 2] = $484;
   TraceLog(3 | 0, 69156 | 0, $4 | 0);
   $490 = HEAP32[(0 + 89692 | 0) >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
   HEAP32[($4 + 16 | 0) >> 2] = $490;
   TraceLog(3 | 0, 69258 | 0, $4 + 16 | 0 | 0);
   $498 = HEAP32[(0 + 89708 | 0) >> 2] | 0;
   HEAP32[($4 + 36 | 0) >> 2] = HEAP32[(0 + 89712 | 0) >> 2] | 0;
   HEAP32[($4 + 32 | 0) >> 2] = $498;
   TraceLog(3 | 0, 69230 | 0, $4 + 32 | 0 | 0);
   $506 = HEAP32[(0 + 89716 | 0) >> 2] | 0;
   HEAP32[($4 + 52 | 0) >> 2] = HEAP32[(0 + 89720 | 0) >> 2] | 0;
   HEAP32[($4 + 48 | 0) >> 2] = $506;
   TraceLog(3 | 0, 69321 | 0, $4 + 48 | 0 | 0);
   rlLoadExtensions(27 | 0);
   rlglInit(HEAP32[(0 + 89700 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89704 | 0) >> 2] | 0 | 0);
   SetupViewport(HEAP32[(0 + 89700 | 0) >> 2] | 0 | 0, HEAP32[(0 + 89704 | 0) >> 2] | 0 | 0);
   label$41 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 512 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$41
    }
    MinimizeWindow();
   }
   HEAP8[($4 + 175 | 0) >> 0] = 1 & 1 | 0;
  }
  $537 = (HEAPU8[($4 + 175 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $4 + 176 | 0;
  return $537 | 0;
 }
 
 function GetCurrentMonitor() {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  return HEAP32[($2 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function GetMonitorWidth($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 0 | 0;
 }
 
 function GetMonitorHeight($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
  return 0 | 0;
 }
 
 function SetWindowPosition($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  return;
 }
 
 function InitTimer() {
  HEAPF64[(0 + 91816 | 0) >> 3] = +GetTime();
  return;
 }
 
 function GetWorkingDirectory() {
  var $2 = 0, $9 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  __memset(91968 | 0, 0 | 0, 4096 | 0) | 0;
  HEAP32[($2 + 12 | 0) >> 2] = getcwd(91968 | 0, 4095 | 0) | 0;
  $9 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  __stack_pointer = $2 + 16 | 0;
  return $9 | 0;
 }
 
 function EmscriptenFullscreenChangeCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return 1 | 0;
 }
 
 function EmscriptenMouseCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  return 1 | 0;
 }
 
 function EmscriptenTouchCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $39 = 0, i64toi32_i32$2 = 0, $28 = 0, $38 = 0, $49 = 0, $50 = 0, $52 = 0, $70 = 0, $78 = 0, $147 = 0, $354 = 0, $204 = Math_fround(0), $209 = Math_fround(0), $604 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 252 | 0) >> 2] = $0;
  HEAP32[($5 + 248 | 0) >> 2] = $1;
  HEAP32[($5 + 244 | 0) >> 2] = $2;
  HEAP32[(0 + 91036 | 0) >> 2] = HEAP32[((HEAP32[($5 + 248 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAPF64[($5 + 232 | 0) >> 3] = +(0 | 0);
  HEAPF64[($5 + 224 | 0) >> 3] = +(0 | 0);
  emscripten_get_element_css_size(67731 | 0, $5 + 232 | 0 | 0, $5 + 224 | 0 | 0) | 0;
  HEAP32[($5 + 220 | 0) >> 2] = 0;
  label$1 : while (1) {
   $28 = 0;
   label$2 : {
    if (!((HEAP32[($5 + 220 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 91036 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $28 = (HEAP32[($5 + 220 | 0) >> 2] | 0 | 0) < (8 | 0);
   }
   label$3 : {
    if (!($28 & 1 | 0)) {
     break label$3
    }
    $38 = HEAP32[($5 + 220 | 0) >> 2] | 0;
    $39 = 52;
    HEAP32[(($38 << 2 | 0) + 91040 | 0) >> 2] = HEAP32[(((HEAP32[($5 + 248 | 0) >> 2] | 0) + Math_imul($38, $39) | 0) + 28 | 0) >> 2] | 0;
    $49 = HEAP32[($5 + 220 | 0) >> 2] | 0;
    $50 = 3;
    $52 = 91072;
    HEAPF32[($5 + 212 | 0) >> 2] = Math_fround(HEAP32[(((HEAP32[($5 + 248 | 0) >> 2] | 0) + Math_imul($49, $39) | 0) + 64 | 0) >> 2] | 0 | 0);
    HEAPF32[($5 + 216 | 0) >> 2] = Math_fround(HEAP32[(((HEAP32[($5 + 248 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 220 | 0) >> 2] | 0, $39) | 0) + 68 | 0) >> 2] | 0 | 0);
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[($5 + 212 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5 + 216 | 0) >> 2] | 0;
    $354 = i64toi32_i32$0;
    i64toi32_i32$0 = ($49 << $50 | 0) + $52 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $354;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $204 = Math_fround(GetScreenWidth() | 0 | 0);
    $70 = ((HEAP32[($5 + 220 | 0) >> 2] | 0) << $50 | 0) + $52 | 0;
    HEAPF32[$70 >> 2] = Math_fround(Math_fround(HEAPF32[$70 >> 2]) * Math_fround($204 / Math_fround(+HEAPF64[($5 + 232 | 0) >> 3])));
    $209 = Math_fround(GetScreenHeight() | 0 | 0);
    $78 = (89656 + 1416 | 0) + ((HEAP32[($5 + 220 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAPF32[($78 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($78 + 4 | 0) >> 2]) * Math_fround($209 / Math_fround(+HEAPF64[($5 + 224 | 0) >> 3])));
    label$4 : {
     label$5 : {
      if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (22 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP8[((HEAP32[($5 + 220 | 0) >> 2] | 0) + 91136 | 0) >> 0] = 1;
      break label$4;
     }
     label$6 : {
      if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (23 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP8[((HEAP32[($5 + 220 | 0) >> 2] | 0) + 91136 | 0) >> 0] = 0;
     }
    }
    HEAP32[($5 + 220 | 0) >> 2] = (HEAP32[($5 + 220 | 0) >> 2] | 0) + 1 | 0;
    continue label$1;
   }
   break label$1;
  };
  __memset($5 + 108 | 0 | 0, 0 | 0, 104 | 0) | 0;
  HEAP32[($5 + 112 | 0) >> 2] = HEAP32[(0 + 91036 | 0) >> 2] | 0;
  label$7 : {
   label$8 : {
    if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (22 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($5 + 108 | 0) >> 2] = 1;
    break label$7;
   }
   label$9 : {
    label$10 : {
     if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (23 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[($5 + 108 | 0) >> 2] = 0;
     break label$9;
    }
    label$11 : {
     label$12 : {
      if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (24 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($5 + 108 | 0) >> 2] = 2;
      break label$11;
     }
     label$13 : {
      if (!((HEAP32[($5 + 252 | 0) >> 2] | 0 | 0) == (25 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($5 + 108 | 0) >> 2] = 3;
     }
    }
   }
  }
  HEAP32[($5 + 104 | 0) >> 2] = 0;
  label$14 : while (1) {
   $147 = 0;
   label$15 : {
    if (!((HEAP32[($5 + 104 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 112 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$15
    }
    $147 = (HEAP32[($5 + 104 | 0) >> 2] | 0 | 0) < (8 | 0);
   }
   label$16 : {
    if (!($147 & 1 | 0)) {
     break label$16
    }
    HEAP32[((($5 + 108 | 0) + 8 | 0) + ((HEAP32[($5 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((89656 + 1384 | 0) + ((HEAP32[($5 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    i64toi32_i32$2 = (89656 + 1416 | 0) + ((HEAP32[($5 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $604 = i64toi32_i32$1;
    i64toi32_i32$1 = (($5 + 108 | 0) + 40 | 0) + ((HEAP32[($5 + 104 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $604;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5 + 104 | 0) >> 2] = (HEAP32[($5 + 104 | 0) >> 2] | 0) + 1 | 0;
    continue label$14;
   }
   break label$14;
  };
  __memcpy($5 | 0, $5 + 108 | 0 | 0, 104 | 0) | 0;
  ProcessGestureEvent($5 | 0);
  __stack_pointer = $5 + 256 | 0;
  return 1 | 0;
 }
 
 function EmscriptenGamepadCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $26 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 1296 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!((HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 1300 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[((HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 1300 | 0) >> 2] | 0) + 91160 | 0) >> 0] = 1;
    $26 = (89656 + 1508 | 0) + ((HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 1300 | 0) >> 2] | 0) << 6 | 0) | 0;
    HEAP32[$5 >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 1304 | 0;
    sprintf($26 | 0, 67979 | 0, $5 | 0) | 0;
    break label$1;
   }
   HEAP8[((HEAP32[((HEAP32[($5 + 8 | 0) >> 2] | 0) + 1300 | 0) >> 2] | 0) + 91160 | 0) >> 0] = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return 1 | 0;
 }
 
 function ErrorCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = $5;
  TraceLog(4 | 0, 67852 | 0, $4 | 0);
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SetupFramebuffer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $23 = 0, $83 = 0, $150 = 0, $39 = 0, $158 = 0, $243 = 0.0, $45 = 0, $247 = 0.0, $62 = 0, $77 = 0, $251 = 0.0, $164 = 0, $255 = 0.0, $181 = 0, $24 = 0, $25 = 0, $26 = 0, $476 = 0, $483 = 0, $490 = 0, $497 = 0, $504 = 0, $511 = 0, $518 = 0, $525 = 0, $105 = 0, $129 = 0, $131 = 0, $133 = 0;
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 140 | 0) >> 2] = $0;
  HEAP32[($4 + 136 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 0 > (HEAP32[(0 + 89684 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 0 > (HEAP32[(0 + 89688 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
    }
    $23 = 0;
    $24 = HEAP32[($23 + 89692 | 0) >> 2] | 0;
    $25 = HEAP32[($23 + 89696 | 0) >> 2] | 0;
    $26 = HEAP32[($23 + 89684 | 0) >> 2] | 0;
    HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($23 + 89688 | 0) >> 2] | 0;
    HEAP32[($4 + 24 | 0) >> 2] = $26;
    HEAP32[($4 + 20 | 0) >> 2] = $25;
    HEAP32[($4 + 16 | 0) >> 2] = $24;
    TraceLog(4 | 0, 74218 | 0, $4 + 16 | 0 | 0);
    HEAPF32[($4 + 132 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($23 + 89684 | 0) >> 2] | 0) >>> 0) / Math_fround((HEAP32[($23 + 89692 | 0) >> 2] | 0) >>> 0));
    HEAPF32[($4 + 128 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($23 + 89688 | 0) >> 2] | 0) >>> 0) / Math_fround((HEAP32[($23 + 89696 | 0) >> 2] | 0) >>> 0));
    label$4 : {
     label$5 : {
      if (!(Math_fround(HEAPF32[($4 + 132 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 128 | 0) >> 2]) & 1 | 0)) {
       break label$5
      }
      $39 = 0;
      HEAP32[($39 + 89708 | 0) >> 2] = HEAP32[($39 + 89684 | 0) >> 2] | 0;
      $243 = +round(+(+Math_fround(Math_fround((HEAP32[($39 + 89696 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($4 + 132 | 0) >> 2]))));
      label$6 : {
       label$7 : {
        if (!(Math_abs($243) < 2147483648.0)) {
         break label$7
        }
        $45 = ~~$243;
        break label$6;
       }
       $45 = -2147483648;
      }
      HEAP32[(0 + 89712 | 0) >> 2] = $45;
      HEAP32[(0 + 89716 | 0) >> 2] = 0;
      HEAP32[(0 + 89720 | 0) >> 2] = (HEAP32[(0 + 89688 | 0) >> 2] | 0) - (HEAP32[(0 + 89712 | 0) >> 2] | 0) | 0;
      break label$4;
     }
     $247 = +round(+(+Math_fround(Math_fround((HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($4 + 128 | 0) >> 2]))));
     label$8 : {
      label$9 : {
       if (!(Math_abs($247) < 2147483648.0)) {
        break label$9
       }
       $62 = ~~$247;
       break label$8;
      }
      $62 = -2147483648;
     }
     HEAP32[(0 + 89708 | 0) >> 2] = $62;
     HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
     HEAP32[(0 + 89716 | 0) >> 2] = (HEAP32[(0 + 89684 | 0) >> 2] | 0) - (HEAP32[(0 + 89708 | 0) >> 2] | 0) | 0;
     HEAP32[(0 + 89720 | 0) >> 2] = 0;
    }
    $77 = 0;
    HEAPF32[($4 + 124 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($77 + 89708 | 0) >> 2] | 0) >>> 0) / Math_fround((HEAP32[($77 + 89692 | 0) >> 2] | 0) >>> 0));
    MatrixScale($4 + 60 | 0 | 0, Math_fround(Math_fround(HEAPF32[($4 + 124 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($4 + 124 | 0) >> 2])), Math_fround(Math_fround(1.0)));
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = HEAP32[($4 + 60 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 64 | 0) >> 2] | 0;
    $83 = 0;
    $476 = i64toi32_i32$0;
    i64toi32_i32$0 = $83;
    HEAP32[(i64toi32_i32$0 + 89724 | 0) >> 2] = $476;
    HEAP32[(i64toi32_i32$0 + 89728 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4 + 116 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $483 = i64toi32_i32$1;
    i64toi32_i32$1 = $83;
    HEAP32[(i64toi32_i32$1 + 89780 | 0) >> 2] = $483;
    HEAP32[(i64toi32_i32$1 + 89784 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4 + 108 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $490 = i64toi32_i32$0;
    i64toi32_i32$0 = $83;
    HEAP32[(i64toi32_i32$0 + 89772 | 0) >> 2] = $490;
    HEAP32[(i64toi32_i32$0 + 89776 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4 + 100 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $497 = i64toi32_i32$1;
    i64toi32_i32$1 = $83;
    HEAP32[(i64toi32_i32$1 + 89764 | 0) >> 2] = $497;
    HEAP32[(i64toi32_i32$1 + 89768 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4 + 92 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $504 = i64toi32_i32$0;
    i64toi32_i32$0 = $83;
    HEAP32[(i64toi32_i32$0 + 89756 | 0) >> 2] = $504;
    HEAP32[(i64toi32_i32$0 + 89760 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4 + 84 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $511 = i64toi32_i32$1;
    i64toi32_i32$1 = $83;
    HEAP32[(i64toi32_i32$1 + 89748 | 0) >> 2] = $511;
    HEAP32[(i64toi32_i32$1 + 89752 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $4 + 76 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $518 = i64toi32_i32$0;
    i64toi32_i32$0 = $83;
    HEAP32[(i64toi32_i32$0 + 89740 | 0) >> 2] = $518;
    HEAP32[(i64toi32_i32$0 + 89744 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4 + 68 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $525 = i64toi32_i32$1;
    i64toi32_i32$1 = $83;
    HEAP32[(i64toi32_i32$1 + 89732 | 0) >> 2] = $525;
    HEAP32[(i64toi32_i32$1 + 89736 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(0 + 89708 | 0) >> 2] = HEAP32[(0 + 89684 | 0) >> 2] | 0;
    HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
    $105 = HEAP32[(0 + 89708 | 0) >> 2] | 0;
    HEAP32[($4 + 4 | 0) >> 2] = HEAP32[(0 + 89712 | 0) >> 2] | 0;
    HEAP32[$4 >> 2] = $105;
    TraceLog(4 | 0, 74062 | 0, $4 | 0);
    break label$1;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      if ((HEAP32[(0 + 89692 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 89684 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
       break label$12
      }
      if (!((HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 89688 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$11
      }
     }
     $129 = HEAP32[(0 + 89692 | 0) >> 2] | 0;
     $131 = HEAP32[(0 + 89696 | 0) >> 2] | 0;
     $133 = HEAP32[(0 + 89684 | 0) >> 2] | 0;
     HEAP32[($4 + 44 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
     HEAP32[($4 + 40 | 0) >> 2] = $133;
     HEAP32[($4 + 36 | 0) >> 2] = $131;
     HEAP32[($4 + 32 | 0) >> 2] = $129;
     TraceLog(3 | 0, 74135 | 0, $4 + 32 | 0 | 0);
     label$13 : {
      label$14 : {
       if (!(HEAP32[(0 + 89692 | 0) >> 2] | 0)) {
        break label$14
       }
       if (HEAP32[(0 + 89696 | 0) >> 2] | 0) {
        break label$13
       }
      }
      HEAP32[(0 + 89692 | 0) >> 2] = HEAP32[(0 + 89684 | 0) >> 2] | 0;
      HEAP32[(0 + 89696 | 0) >> 2] = HEAP32[(0 + 89688 | 0) >> 2] | 0;
     }
     $150 = 0;
     HEAPF32[($4 + 56 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($150 + 89684 | 0) >> 2] | 0) >>> 0) / Math_fround((HEAP32[($150 + 89688 | 0) >> 2] | 0) >>> 0));
     HEAPF32[($4 + 52 | 0) >> 2] = Math_fround(Math_fround((HEAP32[($150 + 89692 | 0) >> 2] | 0) >>> 0) / Math_fround((HEAP32[($150 + 89696 | 0) >> 2] | 0) >>> 0));
     label$15 : {
      label$16 : {
       if (!(Math_fround(HEAPF32[($4 + 56 | 0) >> 2]) <= Math_fround(HEAPF32[($4 + 52 | 0) >> 2]) & 1 | 0)) {
        break label$16
       }
       $158 = 0;
       HEAP32[($158 + 89708 | 0) >> 2] = HEAP32[($158 + 89692 | 0) >> 2] | 0;
       $251 = +round(+(+Math_fround(Math_fround((HEAP32[($158 + 89692 | 0) >> 2] | 0) >>> 0) / Math_fround(HEAPF32[($4 + 56 | 0) >> 2]))));
       label$17 : {
        label$18 : {
         if (!(Math_abs($251) < 2147483648.0)) {
          break label$18
         }
         $164 = ~~$251;
         break label$17;
        }
        $164 = -2147483648;
       }
       HEAP32[(0 + 89712 | 0) >> 2] = $164;
       HEAP32[(0 + 89716 | 0) >> 2] = 0;
       HEAP32[(0 + 89720 | 0) >> 2] = (HEAP32[(0 + 89712 | 0) >> 2] | 0) - (HEAP32[(0 + 89696 | 0) >> 2] | 0) | 0;
       break label$15;
      }
      $255 = +round(+(+Math_fround(Math_fround((HEAP32[(0 + 89696 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($4 + 56 | 0) >> 2]))));
      label$19 : {
       label$20 : {
        if (!(Math_abs($255) < 2147483648.0)) {
         break label$20
        }
        $181 = ~~$255;
        break label$19;
       }
       $181 = -2147483648;
      }
      HEAP32[(0 + 89708 | 0) >> 2] = $181;
      HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
      HEAP32[(0 + 89716 | 0) >> 2] = (HEAP32[(0 + 89708 | 0) >> 2] | 0) - (HEAP32[(0 + 89692 | 0) >> 2] | 0) | 0;
      HEAP32[(0 + 89720 | 0) >> 2] = 0;
     }
     break label$10;
    }
    HEAP32[(0 + 89708 | 0) >> 2] = HEAP32[(0 + 89692 | 0) >> 2] | 0;
    HEAP32[(0 + 89712 | 0) >> 2] = HEAP32[(0 + 89696 | 0) >> 2] | 0;
    HEAP32[(0 + 89716 | 0) >> 2] = 0;
    HEAP32[(0 + 89720 | 0) >> 2] = 0;
   }
  }
  __stack_pointer = $4 + 144 | 0;
  return;
 }
 
 function WindowSizeCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $57 = Math_fround(0), $62 = Math_fround(0), $35 = 0, $45 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  SetupViewport(HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5 + 20 | 0) >> 2] | 0 | 0);
  HEAP32[(0 + 89700 | 0) >> 2] = HEAP32[($5 + 24 | 0) >> 2] | 0;
  HEAP32[(0 + 89704 | 0) >> 2] = HEAP32[($5 + 20 | 0) >> 2] | 0;
  HEAP8[(0 + 89671 | 0) >> 0] = 1;
  label$1 : {
   label$2 : {
    if (!((IsWindowFullscreen() | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(((HEAP32[(0 + 89664 | 0) >> 2] | 0) & 8192 | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$3
    }
    GetWindowScaleDPI($5 + 12 | 0 | 0);
    $57 = Math_fround(Math_fround(HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[($5 + 12 | 0) >> 2]));
    label$4 : {
     label$5 : {
      if (!($57 < Math_fround(4294967296.0) & $57 >= Math_fround(0.0) | 0)) {
       break label$5
      }
      $35 = ~~$57 >>> 0;
      break label$4;
     }
     $35 = 0;
    }
    HEAP32[(0 + 89692 | 0) >> 2] = $35;
    $62 = Math_fround(Math_fround(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[($5 + 16 | 0) >> 2]));
    label$6 : {
     label$7 : {
      if (!($62 < Math_fround(4294967296.0) & $62 >= Math_fround(0.0) | 0)) {
       break label$7
      }
      $45 = ~~$62 >>> 0;
      break label$6;
     }
     $45 = 0;
    }
    HEAP32[(0 + 89696 | 0) >> 2] = $45;
    break label$1;
   }
   HEAP32[(0 + 89692 | 0) >> 2] = HEAP32[($5 + 24 | 0) >> 2] | 0;
   HEAP32[(0 + 89696 | 0) >> 2] = HEAP32[($5 + 20 | 0) >> 2] | 0;
  }
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function WindowIconifyCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($4 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[(0 + 89664 | 0) >> 2] = HEAP32[(0 + 89664 | 0) >> 2] | 0 | 512 | 0;
    break label$1;
   }
   HEAP32[(0 + 89664 | 0) >> 2] = (HEAP32[(0 + 89664 | 0) >> 2] | 0) & -513 | 0;
  }
  return;
 }
 
 function WindowFocusCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($4 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[(0 + 89664 | 0) >> 2] = (HEAP32[(0 + 89664 | 0) >> 2] | 0) & -2049 | 0;
    break label$1;
   }
   HEAP32[(0 + 89664 | 0) >> 2] = HEAP32[(0 + 89664 | 0) >> 2] | 0 | 2048 | 0;
  }
  return;
 }
 
 function WindowDropCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $64 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  label$1 : {
   if (!((HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[(0 + 89792 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$2
    }
    HEAP32[($5 + 16 | 0) >> 2] = 0;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($5 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 89792 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$3
      }
      dlfree(HEAP32[((HEAP32[(0 + 89788 | 0) >> 2] | 0) + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
      HEAP32[($5 + 16 | 0) >> 2] = (HEAP32[($5 + 16 | 0) >> 2] | 0) + 1 | 0;
      continue label$4;
     };
    }
    dlfree(HEAP32[(0 + 89788 | 0) >> 2] | 0 | 0);
    HEAP32[(0 + 89792 | 0) >> 2] = 0;
    HEAP32[(0 + 89788 | 0) >> 2] = 0;
   }
   HEAP32[(0 + 89792 | 0) >> 2] = HEAP32[($5 + 24 | 0) >> 2] | 0;
   HEAP32[(0 + 89788 | 0) >> 2] = dlcalloc(HEAP32[(0 + 89792 | 0) >> 2] | 0 | 0, 4 | 0) | 0;
   HEAP32[($5 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5 + 12 | 0) >> 2] | 0) >>> 0 < (HEAP32[(0 + 89792 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$5
     }
     $64 = dlcalloc(4096 | 0, 1 | 0) | 0;
     HEAP32[((HEAP32[(0 + 89788 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $64;
     strcpy(HEAP32[((HEAP32[(0 + 89788 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($5 + 20 | 0) >> 2] | 0) + ((HEAP32[($5 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
  }
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function KeyCallback($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, i64toi32_i32$0 = 0, $141 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $108 = 0, $191 = Math_fround(0), $148 = 0, $196 = Math_fround(0), $155 = 0, $101 = 0, $401 = 0, $405 = 0, $124 = 0, $150 = 0;
  $7 = __stack_pointer - 160 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 156 | 0) >> 2] = $0;
  HEAP32[($7 + 152 | 0) >> 2] = $1;
  HEAP32[($7 + 148 | 0) >> 2] = $2;
  HEAP32[($7 + 144 | 0) >> 2] = $3;
  HEAP32[($7 + 140 | 0) >> 2] = $4;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($7 + 152 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[($7 + 144 | 0) >> 2] | 0) {
      break label$4
     }
     HEAP8[((HEAP32[($7 + 152 | 0) >> 2] | 0) + 89804 | 0) >> 0] = 0;
     break label$3;
    }
    HEAP8[((HEAP32[($7 + 152 | 0) >> 2] | 0) + 89804 | 0) >> 0] = 1;
   }
   label$5 : {
    if (!((HEAP32[(0 + 90892 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$5
    }
    if (!((HEAP32[($7 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[(((89656 + 144 | 0) + 1028 | 0) + ((HEAP32[(0 + 90892 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($7 + 152 | 0) >> 2] | 0;
    HEAP32[(0 + 90892 | 0) >> 2] = (HEAP32[(0 + 90892 | 0) >> 2] | 0) + 1 | 0;
   }
   label$6 : {
    if (!((HEAP32[($7 + 152 | 0) >> 2] | 0 | 0) == (HEAP32[(0 + 89800 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    if (!((HEAP32[($7 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$6
    }
    glfwSetWindowShouldClose(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0, 1 | 0);
   }
   if (!((HEAP32[($7 + 152 | 0) >> 2] | 0 | 0) == (301 | 0) & 1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($7 + 144 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   label$7 : {
    label$8 : {
     if (!((HEAP32[($7 + 140 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$8
     }
     label$9 : {
      label$10 : {
       if (!((HEAPU8[(0 + 91864 | 0) >> 0] | 0) & 1 | 0)) {
        break label$10
       }
       HEAP8[(0 + 91864 | 0) >> 0] = 0;
       msf_gif_end($7 + 124 | 0 | 0, 91868 | 0);
       $101 = HEAP32[(0 + 89796 | 0) >> 2] | 0;
       HEAP32[($7 + 4 | 0) >> 2] = HEAP32[(0 + 96064 | 0) >> 2] | 0;
       HEAP32[$7 >> 2] = $101;
       SaveFileData(TextFormat(69698 | 0, $7 | 0) | 0 | 0, HEAP32[($7 + 124 | 0) >> 2] | 0 | 0, HEAP32[($7 + 128 | 0) >> 2] | 0 | 0) | 0;
       $108 = 8;
       i64toi32_i32$2 = ($7 + 124 | 0) + $108 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $401 = i64toi32_i32$0;
       i64toi32_i32$0 = ($7 + 16 | 0) + $108 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $401;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $7;
       i64toi32_i32$1 = HEAP32[($7 + 124 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($7 + 128 | 0) >> 2] | 0;
       $405 = i64toi32_i32$1;
       i64toi32_i32$1 = $7;
       HEAP32[($7 + 16 | 0) >> 2] = $405;
       HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
       msf_gif_free($7 + 16 | 0 | 0);
       HEAP32[($7 + 32 | 0) >> 2] = (HEAP32[(0 + 96064 | 0) >> 2] | 0) - 1 | 0;
       $124 = TextFormat(69701 | 0, $7 + 32 | 0 | 0) | 0;
       HEAP32[($7 + 48 | 0) >> 2] = (HEAP32[(0 + 96064 | 0) >> 2] | 0) - 1 | 0;
       HEAP32[($7 + 68 | 0) >> 2] = TextFormat(69701 | 0, $7 + 48 | 0 | 0) | 0;
       HEAP32[($7 + 64 | 0) >> 2] = $124;
       emscripten_run_script(TextFormat(74665 | 0, $7 + 64 | 0 | 0) | 0 | 0);
       TraceLog(3 | 0, 69625 | 0, 0 | 0);
       break label$9;
      }
      $141 = 0;
      HEAP8[($141 + 91864 | 0) >> 0] = 1;
      HEAP32[($141 + 91952 | 0) >> 2] = $141;
      GetWindowScaleDPI($7 + 116 | 0 | 0);
      $191 = Math_fround(Math_fround((HEAP32[($141 + 89708 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($7 + 116 | 0) >> 2]));
      label$11 : {
       label$12 : {
        if (!(Math_fround(Math_abs($191)) < Math_fround(2147483648.0))) {
         break label$12
        }
        $148 = ~~$191;
        break label$11;
       }
       $148 = -2147483648;
      }
      $150 = $148;
      $196 = Math_fround(Math_fround((HEAP32[($141 + 89712 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($7 + 120 | 0) >> 2]));
      label$13 : {
       label$14 : {
        if (!(Math_fround(Math_abs($196)) < Math_fround(2147483648.0))) {
         break label$14
        }
        $155 = ~~$196;
        break label$13;
       }
       $155 = -2147483648;
      }
      msf_gif_begin(91868 | 0, $150 | 0, $155 | 0) | 0;
      HEAP32[(0 + 96064 | 0) >> 2] = (HEAP32[(0 + 96064 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($7 + 80 | 0) >> 2] = HEAP32[(0 + 96064 | 0) >> 2] | 0;
      HEAP32[($7 + 96 | 0) >> 2] = TextFormat(69701 | 0, $7 + 80 | 0 | 0) | 0;
      TraceLog(3 | 0, 67884 | 0, $7 + 96 | 0 | 0);
     }
     break label$7;
    }
    HEAP32[($7 + 112 | 0) >> 2] = HEAP32[(0 + 96064 | 0) >> 2] | 0;
    TakeScreenshot(TextFormat(69525 | 0, $7 + 112 | 0 | 0) | 0 | 0);
    HEAP32[(0 + 96064 | 0) >> 2] = (HEAP32[(0 + 96064 | 0) >> 2] | 0) + 1 | 0;
   }
  }
  __stack_pointer = $7 + 160 | 0;
  return;
 }
 
 function CharCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   if (!((HEAP32[(0 + 90960 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(((89656 + 144 | 0) + 1096 | 0) + ((HEAP32[(0 + 90960 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
   HEAP32[(0 + 90960 | 0) >> 2] = (HEAP32[(0 + 90960 | 0) >> 2] | 0) + 1 | 0;
  }
  return;
 }
 
 function MouseButtonCallback($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, $15 = 0, $26 = 0, $32 = 0, $37 = 0, i64toi32_i32$1 = 0, $186 = 0, $69 = Math_fround(0), $72 = Math_fround(0);
  $6 = __stack_pointer - 240 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 236 | 0) >> 2] = $0;
  HEAP32[($6 + 232 | 0) >> 2] = $1;
  HEAP32[($6 + 228 | 0) >> 2] = $2;
  HEAP32[($6 + 224 | 0) >> 2] = $3;
  HEAP8[((HEAP32[($6 + 232 | 0) >> 2] | 0) + 91002 | 0) >> 0] = HEAP32[($6 + 228 | 0) >> 2] | 0;
  __memset($6 + 120 | 0 | 0, 0 | 0, 104 | 0) | 0;
  $15 = 24;
  label$1 : {
   label$2 : {
    if (!((((HEAPU8[((HEAP32[($6 + 232 | 0) >> 2] | 0) + 91002 | 0) >> 0] | 0) << $15 | 0) >> $15 | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    $26 = 24;
    if (((HEAPU8[((HEAP32[($6 + 232 | 0) >> 2] | 0) + 91010 | 0) >> 0] | 0) << $26 | 0) >> $26 | 0) {
     break label$2
    }
    HEAP32[($6 + 120 | 0) >> 2] = 1;
    break label$1;
   }
   $32 = 24;
   label$3 : {
    if (((HEAPU8[((HEAP32[($6 + 232 | 0) >> 2] | 0) + 91002 | 0) >> 0] | 0) << $32 | 0) >> $32 | 0) {
     break label$3
    }
    $37 = 24;
    if (!((((HEAPU8[((HEAP32[($6 + 232 | 0) >> 2] | 0) + 91010 | 0) >> 0] | 0) << $37 | 0) >> $37 | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($6 + 120 | 0) >> 2] = 0;
   }
  }
  HEAP32[($6 + 128 | 0) >> 2] = 0;
  HEAP32[($6 + 124 | 0) >> 2] = 1;
  GetMousePosition($6 + 112 | 0 | 0);
  i64toi32_i32$0 = HEAP32[($6 + 112 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($6 + 116 | 0) >> 2] | 0;
  $186 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6 + 120 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $186;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $69 = Math_fround(GetScreenWidth() | 0 | 0);
  HEAPF32[($6 + 160 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 160 | 0) >> 2]) / $69);
  $72 = Math_fround(GetScreenHeight() | 0 | 0);
  HEAPF32[($6 + 164 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 164 | 0) >> 2]) / $72);
  __memcpy($6 + 8 | 0 | 0, $6 + 120 | 0 | 0, 104 | 0) | 0;
  ProcessGestureEvent($6 + 8 | 0 | 0);
  __stack_pointer = $6 + 240 | 0;
  return;
 }
 
 function MouseCursorPosCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $71 = 0, $95 = 0, $37 = Math_fround(0), $40 = Math_fround(0);
  $5 = __stack_pointer - 240 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 236 | 0) >> 2] = $0;
  HEAPF64[($5 + 224 | 0) >> 3] = $1;
  HEAPF64[($5 + 216 | 0) >> 3] = $2;
  HEAPF32[(0 + 90980 | 0) >> 2] = Math_fround(+HEAPF64[($5 + 224 | 0) >> 3]);
  HEAPF32[(0 + 90984 | 0) >> 2] = Math_fround(+HEAPF64[($5 + 216 | 0) >> 3]);
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 90980 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 90984 | 0) >> 2] | 0;
  $71 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$2 + 91072 | 0) >> 2] = $71;
  HEAP32[(i64toi32_i32$2 + 91076 | 0) >> 2] = i64toi32_i32$1;
  __memset($5 + 112 | 0 | 0, 0 | 0, 104 | 0) | 0;
  HEAP32[($5 + 112 | 0) >> 2] = 2;
  HEAP32[($5 + 120 | 0) >> 2] = 0;
  HEAP32[($5 + 116 | 0) >> 2] = 1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 91072 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 91076 | 0) >> 2] | 0;
  $95 = i64toi32_i32$1;
  i64toi32_i32$1 = ($5 + 112 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $95;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $37 = Math_fround(GetScreenWidth() | 0 | 0);
  HEAPF32[($5 + 152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 152 | 0) >> 2]) / $37);
  $40 = Math_fround(GetScreenHeight() | 0 | 0);
  HEAPF32[($5 + 156 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5 + 156 | 0) >> 2]) / $40);
  __memcpy($5 + 8 | 0 | 0, $5 + 112 | 0 | 0, 104 | 0) | 0;
  ProcessGestureEvent($5 + 8 | 0 | 0);
  __stack_pointer = $5 + 240 | 0;
  return;
 }
 
 function MouseScrollCallback($0, $1, $2) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = +$2;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $37 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAPF64[($5 + 16 | 0) >> 3] = $1;
  HEAPF64[($5 + 8 | 0) >> 3] = $2;
  HEAPF32[$5 >> 2] = Math_fround(+HEAPF64[($5 + 16 | 0) >> 3]);
  HEAPF32[($5 + 4 | 0) >> 2] = Math_fround(+HEAPF64[($5 + 8 | 0) >> 3]);
  i64toi32_i32$0 = HEAP32[$5 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 4 | 0) >> 2] | 0;
  $37 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 91020 | 0) >> 2] = $37;
  HEAP32[(i64toi32_i32$0 + 91024 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function CursorEnterCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[(0 + 91001 | 0) >> 0] = 1;
    break label$1;
   }
   HEAP8[(0 + 91001 | 0) >> 0] = 0;
  }
  return;
 }
 
 function SetupViewport($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $6 = 0, $4 = 0, $24 = 0.0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $6 = 0;
  HEAP32[($6 + 89708 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[($6 + 89712 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  $9 = 2;
  rlViewport((HEAP32[($6 + 89716 | 0) >> 2] | 0 | 0) / ($9 | 0) | 0 | 0, (HEAP32[($6 + 89720 | 0) >> 2] | 0 | 0) / ($9 | 0) | 0 | 0, HEAP32[($6 + 89708 | 0) >> 2] | 0 | 0, HEAP32[($6 + 89712 | 0) >> 2] | 0 | 0);
  rlMatrixMode(5889 | 0);
  rlLoadIdentity();
  $24 = +(0 | 0);
  rlOrtho(+$24, +(+((HEAP32[($6 + 89708 | 0) >> 2] | 0) >>> 0)), +(+((HEAP32[($6 + 89712 | 0) >> 2] | 0) >>> 0)), +$24, +$24, +(1.0));
  rlMatrixMode(5888 | 0);
  rlLoadIdentity();
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function MinimizeWindow() {
  
 }
 
 function GetScreenWidth() {
  return HEAP32[(0 + 89692 | 0) >> 2] | 0 | 0;
 }
 
 function GetScreenHeight() {
  return HEAP32[(0 + 89696 | 0) >> 2] | 0 | 0;
 }
 
 function CloseWindow() {
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11 = 0, $59 = 0, $63 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (!((HEAPU8[(0 + 91864 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   msf_gif_end($2 + 16 | 0 | 0, 91868 | 0);
   $11 = 8;
   i64toi32_i32$2 = ($2 + 16 | 0) + $11 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $59 = i64toi32_i32$0;
   i64toi32_i32$0 = $2 + $11 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $59;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   $63 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[$2 >> 2] = $63;
   HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
   msf_gif_free($2 | 0);
   HEAP8[(0 + 91864 | 0) >> 0] = 0;
  }
  UnloadFontDefault();
  rlglClose();
  glfwDestroyWindow(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0);
  glfwTerminate();
  HEAP8[(0 + 89668 | 0) >> 0] = 0;
  TraceLog(3 | 0, 65824 | 0, 0 | 0);
  __stack_pointer = $2 + 32 | 0;
  return;
 }
 
 function IsWindowFullscreen() {
  return (HEAPU8[(0 + 89669 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function GetWindowScaleDPI($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75876 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75880 | 0) >> 2] | 0;
  $6 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $6;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function ClearBackground($0) {
  $0 = $0 | 0;
  rlClearColor((HEAPU8[$0 >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($0 + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($0 + 2 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($0 + 3 | 0) >> 0] | 0) & 255 | 0 | 0);
  rlClearScreenBuffers();
  return;
 }
 
 function BeginDrawing() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $77 = 0, $84 = 0, $91 = 0, $98 = 0, $105 = 0, $112 = 0, $119 = 0, $123 = 0;
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  HEAPF64[(0 + 91808 | 0) >> 3] = +GetTime();
  HEAPF64[(0 + 91824 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3] - +HEAPF64[(0 + 91816 | 0) >> 3];
  HEAPF64[(0 + 91816 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3];
  rlLoadIdentity();
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89780 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89784 | 0) >> 2] | 0;
  $77 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $77;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89772 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89776 | 0) >> 2] | 0;
  $84 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $84;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89764 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89768 | 0) >> 2] | 0;
  $91 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $91;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89756 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89760 | 0) >> 2] | 0;
  $98 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $98;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89748 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89752 | 0) >> 2] | 0;
  $105 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $105;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89740 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89744 | 0) >> 2] | 0;
  $112 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $112;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89732 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89736 | 0) >> 2] | 0;
  $119 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $119;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 89724 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 89728 | 0) >> 2] | 0;
  $123 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[i64toi32_i32$1 >> 2] = $123;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  MatrixToFloatV(i64toi32_i32$1 + 64 | 0 | 0, i64toi32_i32$1 | 0);
  rlMultMatrixf(i64toi32_i32$1 + 64 | 0 | 0);
  __stack_pointer = i64toi32_i32$1 + 128 | 0;
  return;
 }
 
 function EndDrawing() {
  var $2 = 0, $18 = 0, $118 = Math_fround(0), $23 = 0, $123 = Math_fround(0), $30 = 0, $128 = Math_fround(0), $39 = 0, $25 = 0, $34 = 0, $63 = 0, $75 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  rlDrawRenderBatchActive();
  label$1 : {
   if (!((HEAPU8[(0 + 91864 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 91952 | 0) >> 2] = (HEAP32[(0 + 91952 | 0) >> 2] | 0) + 1 | 0;
   label$2 : {
    if ((HEAP32[(0 + 91952 | 0) >> 2] | 0 | 0) % (10 | 0) | 0) {
     break label$2
    }
    GetWindowScaleDPI($2 + 40 | 0 | 0);
    $18 = 0;
    $118 = Math_fround(Math_fround((HEAP32[($18 + 89708 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2]));
    label$3 : {
     label$4 : {
      if (!(Math_fround(Math_abs($118)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $23 = ~~$118;
      break label$3;
     }
     $23 = -2147483648;
    }
    $25 = $23;
    $123 = Math_fround(Math_fround((HEAP32[($18 + 89712 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($2 + 44 | 0) >> 2]));
    label$5 : {
     label$6 : {
      if (!(Math_fround(Math_abs($123)) < Math_fround(2147483648.0))) {
       break label$6
      }
      $30 = ~~$123;
      break label$5;
     }
     $30 = -2147483648;
    }
    HEAP32[($2 + 36 | 0) >> 2] = rlReadScreenPixels($25 | 0, $30 | 0) | 0;
    $34 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    $128 = Math_fround(Math_fround((HEAP32[($18 + 89708 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($2 + 40 | 0) >> 2]));
    label$7 : {
     label$8 : {
      if (!(Math_fround(Math_abs($128)) < Math_fround(2147483648.0))) {
       break label$8
      }
      $39 = ~~$128;
      break label$7;
     }
     $39 = -2147483648;
    }
    msf_gif_frame(91868 | 0, $34 | 0, 10 | 0, 16 | 0, $39 << 2 | 0 | 0) | 0;
    dlfree(HEAP32[($2 + 36 | 0) >> 2] | 0 | 0);
   }
   label$9 : {
    if (!((((HEAP32[(0 + 91952 | 0) >> 2] | 0 | 0) / (15 | 0) | 0 | 0) % (2 | 0) | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$9
    }
    $63 = (HEAP32[(0 + 89696 | 0) >> 2] | 0) - 20 | 0;
    HEAP8[($2 + 32 | 0) >> 0] = 190;
    HEAP8[($2 + 33 | 0) >> 0] = 33;
    HEAP8[($2 + 34 | 0) >> 0] = 55;
    HEAP8[($2 + 35 | 0) >> 0] = 255;
    HEAP32[($2 + 8 | 0) >> 2] = HEAPU8[($2 + 32 | 0) >> 0] | 0 | ((HEAPU8[($2 + 33 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 34 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 35 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    DrawCircle(30 | 0, $63 | 0, Math_fround(Math_fround(10.0)), $2 + 8 | 0 | 0);
    $75 = (HEAP32[(0 + 89696 | 0) >> 2] | 0) - 25 | 0;
    HEAP8[($2 + 28 | 0) >> 0] = 230;
    HEAP8[($2 + 29 | 0) >> 0] = 41;
    HEAP8[($2 + 30 | 0) >> 0] = 55;
    HEAP8[($2 + 31 | 0) >> 0] = 255;
    HEAP32[($2 + 12 | 0) >> 2] = HEAPU8[($2 + 28 | 0) >> 0] | 0 | ((HEAPU8[($2 + 29 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($2 + 30 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($2 + 31 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    DrawText(72183 | 0, 50 | 0, $75 | 0, 10 | 0, $2 + 12 | 0 | 0);
   }
   rlDrawRenderBatchActive();
  }
  SwapScreenBuffer();
  HEAPF64[(0 + 91808 | 0) >> 3] = +GetTime();
  HEAPF64[(0 + 91832 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3] - +HEAPF64[(0 + 91816 | 0) >> 3];
  HEAPF64[(0 + 91816 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3];
  HEAPF64[(0 + 91840 | 0) >> 3] = +HEAPF64[(0 + 91824 | 0) >> 3] + +HEAPF64[(0 + 91832 | 0) >> 3];
  label$10 : {
   if (!(+HEAPF64[(0 + 91840 | 0) >> 3] < +HEAPF64[(0 + 91848 | 0) >> 3] & 1 | 0)) {
    break label$10
   }
   WaitTime(+(+HEAPF64[(0 + 91848 | 0) >> 3] - +HEAPF64[(0 + 91840 | 0) >> 3]));
   HEAPF64[(0 + 91808 | 0) >> 3] = +GetTime();
   HEAPF64[($2 + 16 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3] - +HEAPF64[(0 + 91816 | 0) >> 3];
   HEAPF64[(0 + 91816 | 0) >> 3] = +HEAPF64[(0 + 91808 | 0) >> 3];
   HEAPF64[(0 + 91840 | 0) >> 3] = +HEAPF64[(0 + 91840 | 0) >> 3] + +HEAPF64[($2 + 16 | 0) >> 3];
  }
  PollInputEvents();
  HEAP32[(0 + 91856 | 0) >> 2] = (HEAP32[(0 + 91856 | 0) >> 2] | 0) + 1 | 0;
  __stack_pointer = $2 + 48 | 0;
  return;
 }
 
 function SwapScreenBuffer() {
  glfwSwapBuffers(HEAP32[(0 + 89656 | 0) >> 2] | 0 | 0);
  return;
 }
 
 function WaitTime($0) {
  $0 = +$0;
  var $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0.0, $51 = 0, $39 = 0.0, $13 = 0, $14 = 0, $53 = 0, $53$hi = 0, $46 = 0.0, $11 = 0, $17 = 0, $141 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  HEAPF64[($3 + 56 | 0) >> 3] = $0;
  HEAPF64[($3 + 48 | 0) >> 3] = +GetTime() + +HEAPF64[($3 + 56 | 0) >> 3];
  HEAPF64[($3 + 40 | 0) >> 3] = -+HEAPF64[($3 + 56 | 0) >> 3] * .05 + +HEAPF64[($3 + 56 | 0) >> 3];
  i64toi32_i32$0 = 0;
  $51 = 0;
  i64toi32_i32$1 = $3 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $51;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 24 | 0) >> 2] = $51;
  HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
  $39 = +HEAPF64[($3 + 40 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($39) < 9223372036854775808.0)) {
     break label$2
    }
    i64toi32_i32$2 = $39;
    if (Math_abs(i64toi32_i32$2) >= 1.0) {
     if (i64toi32_i32$2 > 0.0) {
      $13 = ~~Math_min(Math_floor(i64toi32_i32$2 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $13 = ~~Math_ceil((i64toi32_i32$2 - +(~~i64toi32_i32$2 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $14 = $13;
    } else {
     $14 = 0
    }
    i64toi32_i32$0 = $14;
    $53 = ~~i64toi32_i32$2 >>> 0;
    $53$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = -2147483648;
   $53 = 0;
   $53$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $53;
  HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
  $46 = (+HEAPF64[($3 + 40 | 0) >> 3] - (+(i64toi32_i32$0 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0))) * 1.0e9;
  label$3 : {
   label$4 : {
    if (!(Math_abs($46) < 2147483648.0)) {
     break label$4
    }
    $11 = ~~$46;
    break label$3;
   }
   $11 = -2147483648;
  }
  HEAP32[($3 + 12 | 0) >> 2] = $11;
  i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3 + 20 | 0) >> 2] | 0;
  $141 = i64toi32_i32$1;
  i64toi32_i32$1 = $3;
  HEAP32[($3 + 24 | 0) >> 2] = $141;
  HEAP32[($3 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3 + 32 | 0) >> 2] = HEAP32[($3 + 12 | 0) >> 2] | 0;
  label$5 : {
   label$6 : while (1) {
    $17 = $3 + 24 | 0;
    if (!((nanosleep($17 | 0, $17 | 0) | 0 | 0) == (-1 | 0) & 1 | 0)) {
     break label$5
    }
    continue label$6;
   };
  }
  label$7 : {
   label$8 : while (1) {
    if (!(+GetTime() < +HEAPF64[($3 + 48 | 0) >> 3] & 1 | 0)) {
     break label$7
    }
    continue label$8;
   };
  }
  __stack_pointer = $3 + 64 | 0;
  return;
 }
 
 function PollInputEvents() {
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $72 = 0, $126 = 0, $136 = 0, $211 = 0, $330 = 0, $342 = 0, $346 = 0;
  $2 = __stack_pointer - 1488 | 0;
  __stack_pointer = $2;
  UpdateGestures();
  HEAP32[(0 + 90892 | 0) >> 2] = 0;
  HEAP32[(0 + 90960 | 0) >> 2] = 0;
  HEAP32[(0 + 91152 | 0) >> 2] = 0;
  HEAP32[(0 + 91156 | 0) >> 2] = 0;
  HEAP32[($2 + 1484 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2 + 1484 | 0) >> 2] | 0 | 0) < (512 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP8[((HEAP32[($2 + 1484 | 0) >> 2] | 0) + 90316 | 0) >> 0] = HEAPU8[((HEAP32[($2 + 1484 | 0) >> 2] | 0) + 89804 | 0) >> 0] | 0;
    HEAP32[($2 + 1484 | 0) >> 2] = (HEAP32[($2 + 1484 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($2 + 1480 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($2 + 1480 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[((HEAP32[($2 + 1480 | 0) >> 2] | 0) + 91010 | 0) >> 0] = HEAPU8[((HEAP32[($2 + 1480 | 0) >> 2] | 0) + 91002 | 0) >> 0] | 0;
    HEAP32[($2 + 1480 | 0) >> 2] = (HEAP32[($2 + 1480 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 91020 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 91024 | 0) >> 2] | 0;
  $330 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$0 + 91028 | 0) >> 2] = $330;
  HEAP32[(i64toi32_i32$0 + 91032 | 0) >> 2] = i64toi32_i32$1;
  HEAPF32[($2 + 1472 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($2 + 1476 | 0) >> 2] = Math_fround(0 | 0);
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 1472 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 1476 | 0) >> 2] | 0;
  $342 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 91020 | 0) >> 2] = $342;
  HEAP32[(i64toi32_i32$1 + 91024 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 90980 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 90984 | 0) >> 2] | 0;
  $346 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$0 + 90988 | 0) >> 2] = $346;
  HEAP32[(i64toi32_i32$0 + 90992 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 1468 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($2 + 1468 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP8[((HEAP32[($2 + 1468 | 0) >> 2] | 0) + 91144 | 0) >> 0] = HEAPU8[((HEAP32[($2 + 1468 | 0) >> 2] | 0) + 91136 | 0) >> 0] | 0;
    HEAP32[($2 + 1468 | 0) >> 2] = (HEAP32[($2 + 1468 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  HEAP8[(0 + 89671 | 0) >> 0] = 0;
  HEAP32[($2 + 1464 | 0) >> 2] = 0;
  label$7 : {
   if (emscripten_sample_gamepad_data() | 0) {
    break label$7
   }
   HEAP32[($2 + 1464 | 0) >> 2] = emscripten_get_num_gamepads() | 0;
  }
  HEAP32[($2 + 1460 | 0) >> 2] = 0;
  label$8 : while (1) {
   $72 = 0;
   label$9 : {
    if (!((HEAP32[($2 + 1460 | 0) >> 2] | 0 | 0) < (HEAP32[($2 + 1464 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$9
    }
    $72 = (HEAP32[($2 + 1460 | 0) >> 2] | 0 | 0) < (4 | 0);
   }
   label$10 : {
    if (!($72 & 1 | 0)) {
     break label$10
    }
    HEAP32[($2 + 1456 | 0) >> 2] = 0;
    label$11 : {
     label$12 : while (1) {
      if (!((HEAP32[($2 + 1456 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP8[(((89656 + 1892 | 0) + ((HEAP32[($2 + 1460 | 0) >> 2] | 0) << 5 | 0) | 0) + (HEAP32[($2 + 1456 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[(((89656 + 1764 | 0) + ((HEAP32[($2 + 1460 | 0) >> 2] | 0) << 5 | 0) | 0) + (HEAP32[($2 + 1456 | 0) >> 2] | 0) | 0) >> 0] | 0;
      HEAP32[($2 + 1456 | 0) >> 2] = (HEAP32[($2 + 1456 | 0) >> 2] | 0) + 1 | 0;
      continue label$12;
     };
    }
    HEAP32[($2 + 20 | 0) >> 2] = emscripten_get_gamepad_status(HEAP32[($2 + 1460 | 0) >> 2] | 0 | 0, $2 + 24 | 0 | 0) | 0;
    label$13 : {
     if (HEAP32[($2 + 20 | 0) >> 2] | 0) {
      break label$13
     }
     HEAP32[($2 + 16 | 0) >> 2] = 0;
     label$14 : while (1) {
      $126 = 0;
      label$15 : {
       if (!((HEAP32[($2 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($2 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       $126 = (HEAP32[($2 + 16 | 0) >> 2] | 0 | 0) < (32 | 0);
      }
      label$16 : {
       if (!($126 & 1 | 0)) {
        break label$16
       }
       HEAP32[($2 + 12 | 0) >> 2] = -1;
       $136 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       label$17 : {
        label$18 : {
         switch ($136 | 0) {
         case 0:
          HEAP32[($2 + 12 | 0) >> 2] = 7;
          break label$17;
         case 1:
          HEAP32[($2 + 12 | 0) >> 2] = 6;
          break label$17;
         case 2:
          HEAP32[($2 + 12 | 0) >> 2] = 8;
          break label$17;
         case 3:
          HEAP32[($2 + 12 | 0) >> 2] = 5;
          break label$17;
         case 4:
          HEAP32[($2 + 12 | 0) >> 2] = 9;
          break label$17;
         case 5:
          HEAP32[($2 + 12 | 0) >> 2] = 11;
          break label$17;
         case 6:
          HEAP32[($2 + 12 | 0) >> 2] = 10;
          break label$17;
         case 7:
          HEAP32[($2 + 12 | 0) >> 2] = 12;
          break label$17;
         case 8:
          HEAP32[($2 + 12 | 0) >> 2] = 13;
          break label$17;
         case 9:
          HEAP32[($2 + 12 | 0) >> 2] = 15;
          break label$17;
         case 10:
          HEAP32[($2 + 12 | 0) >> 2] = 16;
          break label$17;
         case 11:
          HEAP32[($2 + 12 | 0) >> 2] = 17;
          break label$17;
         case 12:
          HEAP32[($2 + 12 | 0) >> 2] = 1;
          break label$17;
         case 13:
          HEAP32[($2 + 12 | 0) >> 2] = 3;
          break label$17;
         case 14:
          HEAP32[($2 + 12 | 0) >> 2] = 4;
          break label$17;
         case 15:
          HEAP32[($2 + 12 | 0) >> 2] = 2;
          break label$17;
         default:
          break label$18;
         };
        }
       }
       label$35 : {
        if (!((HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
         break label$35
        }
        label$36 : {
         label$37 : {
          if (!((HEAP32[((($2 + 24 | 0) + 1040 | 0) + ((HEAP32[($2 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$37
          }
          HEAP8[(((89656 + 1764 | 0) + ((HEAP32[($2 + 1460 | 0) >> 2] | 0) << 5 | 0) | 0) + (HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) >> 0] = 1;
          HEAP32[(0 + 91152 | 0) >> 2] = HEAP32[($2 + 12 | 0) >> 2] | 0;
          break label$36;
         }
         HEAP8[(((89656 + 1764 | 0) + ((HEAP32[($2 + 1460 | 0) >> 2] | 0) << 5 | 0) | 0) + (HEAP32[($2 + 12 | 0) >> 2] | 0) | 0) >> 0] = 0;
        }
       }
       HEAP32[($2 + 16 | 0) >> 2] = (HEAP32[($2 + 16 | 0) >> 2] | 0) + 1 | 0;
       continue label$14;
      }
      break label$14;
     };
     HEAP32[($2 + 8 | 0) >> 2] = 0;
     label$38 : while (1) {
      $211 = 0;
      label$39 : {
       if (!((HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$39
       }
       $211 = (HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) < (8 | 0);
      }
      label$40 : {
       if (!($211 & 1 | 0)) {
        break label$40
       }
       HEAPF32[(((89656 + 2020 | 0) + ((HEAP32[($2 + 1460 | 0) >> 2] | 0) << 5 | 0) | 0) + ((HEAP32[($2 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(+HEAPF64[((($2 + 24 | 0) + ((HEAP32[($2 + 8 | 0) >> 2] | 0) << 3 | 0) | 0) + 16 | 0) >> 3]);
       HEAP32[($2 + 8 | 0) >> 2] = (HEAP32[($2 + 8 | 0) >> 2] | 0) + 1 | 0;
       continue label$38;
      }
      break label$38;
     };
     HEAP32[(0 + 91156 | 0) >> 2] = HEAP32[($2 + 32 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 1460 | 0) >> 2] = (HEAP32[($2 + 1460 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   }
   break label$8;
  };
  __stack_pointer = $2 + 1488 | 0;
  return;
 }
 
 function TakeScreenshot($0) {
  $0 = $0 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $18 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $107 = Math_fround(0), $23 = 0, $112 = Math_fround(0), $30 = 0, $117 = Math_fround(0), $39 = 0, $122 = Math_fround(0), $46 = 0, $66 = 0, $74 = 0, $25 = 0, $59 = 0, $321 = 0, $325 = 0, $87 = 0;
  $3 = __stack_pointer - 2160 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 2156 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    if (!((strchr(HEAP32[($3 + 2156 | 0) >> 2] | 0 | 0, 39 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    TraceLog(4 | 0, 68107 | 0, 0 | 0);
    break label$1;
   }
   GetWindowScaleDPI($3 + 2148 | 0 | 0);
   $18 = 0;
   $107 = Math_fround(Math_fround((HEAP32[($18 + 89708 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($3 + 2148 | 0) >> 2]));
   label$3 : {
    label$4 : {
     if (!(Math_fround(Math_abs($107)) < Math_fround(2147483648.0))) {
      break label$4
     }
     $23 = ~~$107;
     break label$3;
    }
    $23 = -2147483648;
   }
   $25 = $23;
   $112 = Math_fround(Math_fround((HEAP32[($18 + 89712 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($3 + 2152 | 0) >> 2]));
   label$5 : {
    label$6 : {
     if (!(Math_fround(Math_abs($112)) < Math_fround(2147483648.0))) {
      break label$6
     }
     $30 = ~~$112;
     break label$5;
    }
    $30 = -2147483648;
   }
   HEAP32[($3 + 2144 | 0) >> 2] = rlReadScreenPixels($25 | 0, $30 | 0) | 0;
   HEAP32[($3 + 2124 | 0) >> 2] = HEAP32[($3 + 2144 | 0) >> 2] | 0;
   $117 = Math_fround(Math_fround((HEAP32[($18 + 89708 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($3 + 2148 | 0) >> 2]));
   label$7 : {
    label$8 : {
     if (!(Math_fround(Math_abs($117)) < Math_fround(2147483648.0))) {
      break label$8
     }
     $39 = ~~$117;
     break label$7;
    }
    $39 = -2147483648;
   }
   HEAP32[($3 + 2128 | 0) >> 2] = $39;
   $122 = Math_fround(Math_fround((HEAP32[($18 + 89712 | 0) >> 2] | 0) >>> 0) * Math_fround(HEAPF32[($3 + 2152 | 0) >> 2]));
   label$9 : {
    label$10 : {
     if (!(Math_fround(Math_abs($122)) < Math_fround(2147483648.0))) {
      break label$10
     }
     $46 = ~~$122;
     break label$9;
    }
    $46 = -2147483648;
   }
   HEAP32[($3 + 2132 | 0) >> 2] = $46;
   HEAP32[($3 + 2136 | 0) >> 2] = 1;
   HEAP32[($3 + 2140 | 0) >> 2] = 7;
   __memset($3 + 64 | 0 | 0, 0 | 0, 2048 | 0) | 0;
   $59 = HEAP32[(0 + 89796 | 0) >> 2] | 0;
   HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 2156 | 0) >> 2] | 0;
   HEAP32[$3 >> 2] = $59;
   strcpy($3 + 64 | 0 | 0, TextFormat(67739 | 0, $3 | 0) | 0 | 0) | 0;
   $66 = 16;
   HEAP32[(($3 + 8 | 0) + $66 | 0) >> 2] = HEAP32[(($3 + 2124 | 0) + $66 | 0) >> 2] | 0;
   $74 = 8;
   i64toi32_i32$2 = ($3 + 2124 | 0) + $74 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $321 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3 + 8 | 0) + $74 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $321;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = HEAP32[($3 + 2124 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3 + 2128 | 0) >> 2] | 0;
   $325 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   HEAP32[($3 + 8 | 0) >> 2] = $325;
   HEAP32[($3 + 12 | 0) >> 2] = i64toi32_i32$0;
   ExportImage($3 + 8 | 0 | 0, $3 + 64 | 0 | 0) | 0;
   dlfree(HEAP32[($3 + 2144 | 0) >> 2] | 0 | 0);
   $87 = GetFileName($3 + 64 | 0 | 0) | 0;
   HEAP32[($3 + 36 | 0) >> 2] = GetFileName($3 + 64 | 0 | 0) | 0;
   HEAP32[($3 + 32 | 0) >> 2] = $87;
   emscripten_run_script(TextFormat(74665 | 0, $3 + 32 | 0 | 0) | 0 | 0);
   HEAP32[($3 + 48 | 0) >> 2] = $3 + 64 | 0;
   TraceLog(3 | 0, 65610 | 0, $3 + 48 | 0 | 0);
  }
  __stack_pointer = $3 + 2160 | 0;
  return;
 }
 
 function GetFileName($0) {
  $0 = $0 | 0;
  var $3 = 0, $26 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP32[($3 + 4 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3 + 4 | 0) >> 2] = strprbrk(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, 73590 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($3 + 12 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) + 1 | 0;
  }
  $26 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $26 | 0;
 }
 
 function strprbrk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $16 = 0, $19 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    HEAP32[($4 + 12 | 0) >> 2] = strpbrk(HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    $16 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    HEAP32[($4 + 12 | 0) >> 2] = $16 + 1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $16;
    continue label$2;
   };
  }
  $19 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $19 | 0;
 }
 
 function IsFileExtension($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $21 = 0, i64toi32_i32$0 = 0, $62 = 0, $59 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 60 | 0) >> 2] = $0;
  HEAP32[($4 + 56 | 0) >> 2] = $1;
  HEAP8[($4 + 55 | 0) >> 0] = 0;
  HEAP32[($4 + 48 | 0) >> 2] = GetFileExtension(HEAP32[($4 + 60 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($4 + 48 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($4 + 44 | 0) >> 2] = 0;
   $21 = 24;
   HEAP32[($4 + 40 | 0) >> 2] = TextSplit(HEAP32[($4 + 56 | 0) >> 2] | 0 | 0, (59 << $21 | 0) >> $21 | 0 | 0, $4 + 44 | 0 | 0) | 0;
   HEAP8[($4 + 32 | 0) >> 0] = 0;
   i64toi32_i32$0 = 0;
   $62 = 0;
   HEAP32[($4 + 24 | 0) >> 2] = $62;
   HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4 + 16 | 0) >> 2] = $62;
   HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
   strncpy($4 + 16 | 0 | 0, TextToLower(HEAP32[($4 + 48 | 0) >> 2] | 0 | 0) | 0 | 0, 16 | 0) | 0;
   HEAP32[($4 + 12 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      if (strcmp($4 + 16 | 0 | 0, TextToLower(HEAP32[((HEAP32[($4 + 40 | 0) >> 2] | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      HEAP8[($4 + 55 | 0) >> 0] = 1;
      break label$2;
     }
     HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  $59 = (HEAPU8[($4 + 55 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $4 + 64 | 0;
  return $59 | 0;
 }
 
 function GetFileExtension($0) {
  $0 = $0 | 0;
  var $3 = 0, $23 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 8 | 0) >> 2] = $0;
  HEAP32[($3 + 4 | 0) >> 2] = strrchr(HEAP32[($3 + 8 | 0) >> 2] | 0 | 0, 46 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($3 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3 + 12 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
  }
  $23 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  __stack_pointer = $3 + 16 | 0;
  return $23 | 0;
 }
 
 function IsMouseButtonDown($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0, $19 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[($3 + 11 | 0) >> 0] = 0;
  $7 = 24;
  label$1 : {
   if (!((((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91002 | 0) >> 0] | 0) << $7 | 0) >> $7 | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP8[($3 + 11 | 0) >> 0] = 1;
  }
  $19 = 24;
  label$2 : {
   if (!((((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91136 | 0) >> 0] | 0) << $19 | 0) >> $19 | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP8[($3 + 11 | 0) >> 0] = 1;
  }
  return (HEAPU8[($3 + 11 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function IsMouseButtonReleased($0) {
  $0 = $0 | 0;
  var $3 = 0, $7 = 0, $12 = 0, $24 = 0, $29 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP8[($3 + 11 | 0) >> 0] = 0;
  $7 = 24;
  label$1 : {
   if (((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91002 | 0) >> 0] | 0) << $7 | 0) >> $7 | 0) {
    break label$1
   }
   $12 = 24;
   if (!((((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91010 | 0) >> 0] | 0) << $12 | 0) >> $12 | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP8[($3 + 11 | 0) >> 0] = 1;
  }
  $24 = 24;
  label$2 : {
   if (((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91136 | 0) >> 0] | 0) << $24 | 0) >> $24 | 0) {
    break label$2
   }
   $29 = 24;
   if (!((((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 91144 | 0) >> 0] | 0) << $29 | 0) >> $29 | 0 | 0) == (1 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP8[($3 + 11 | 0) >> 0] = 1;
  }
  return (HEAPU8[($3 + 11 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function GetMousePosition($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$1 = 0, $28 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  GetTouchPosition($3 + 8 | 0 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  $28 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $28;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function GetTouchPosition($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $37 = 0, $64 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 75884 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 75888 | 0) >> 2] | 0;
  $37 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $37;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = (89656 + 1416 | 0) + ((HEAP32[($4 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $64 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $64;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   HEAP32[$4 >> 2] = 8;
   TraceLog(4 | 0, 74348 | 0, $4 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function SetShapesTexture($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7 = 0, $8 = 0, $12 = 0, $17 = 0, $23 = 0, $43 = 0, $47 = 0, $57 = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 85208 | 0) >> 2] = $23;
  HEAP32[(i64toi32_i32$0 + 85212 | 0) >> 2] = i64toi32_i32$1;
  $7 = 85208;
  $8 = 16;
  HEAP32[($7 + $8 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $8 | 0) >> 2] | 0;
  $12 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $12 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $43 = i64toi32_i32$1;
  i64toi32_i32$1 = $7 + $12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $43;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $47 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 85228 | 0) >> 2] = $47;
  HEAP32[(i64toi32_i32$0 + 85232 | 0) >> 2] = i64toi32_i32$1;
  $17 = 8;
  i64toi32_i32$2 = i64toi32_i32$2 + $17 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57 = i64toi32_i32$1;
  i64toi32_i32$1 = 85228 + $17 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $57;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return;
 }
 
 function DrawCircle($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $6 = 0, $7 = 0, $18 = Math_fround(0), i64toi32_i32$1 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 44 | 0) >> 2] = $0;
  HEAP32[($6 + 40 | 0) >> 2] = $1;
  HEAPF32[($6 + 36 | 0) >> 2] = $2;
  HEAPF32[($6 + 28 | 0) >> 2] = Math_fround(HEAP32[($6 + 44 | 0) >> 2] | 0 | 0);
  HEAPF32[($6 + 32 | 0) >> 2] = Math_fround(HEAP32[($6 + 40 | 0) >> 2] | 0 | 0);
  $18 = Math_fround(HEAPF32[($6 + 36 | 0) >> 2]);
  i64toi32_i32$1 = HEAP32[($6 + 32 | 0) >> 2] | 0;
  HEAP32[($6 + 16 | 0) >> 2] = HEAP32[($6 + 28 | 0) >> 2] | 0;
  HEAP32[($6 + 20 | 0) >> 2] = i64toi32_i32$1;
  $7 = $3;
  HEAP32[($6 + 12 | 0) >> 2] = HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawCircleV($6 + 16 | 0 | 0, Math_fround($18), $6 + 12 | 0 | 0);
  __stack_pointer = $6 + 48 | 0;
  return;
 }
 
 function DrawCircleV($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $5 = 0, $7 = 0, i64toi32_i32$2 = 0, $14 = Math_fround(0), i64toi32_i32$1 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAPF32[($5 + 28 | 0) >> 2] = $1;
  $14 = Math_fround(HEAPF32[($5 + 28 | 0) >> 2]);
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($5 + 16 | 0) >> 2] = HEAP32[i64toi32_i32$2 >> 2] | 0;
  HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$1;
  $7 = $2;
  HEAP32[($5 + 12 | 0) >> 2] = HEAPU8[$7 >> 0] | 0 | ((HEAPU8[($7 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($7 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($7 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawCircleSector($5 + 16 | 0 | 0, Math_fround($14), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(360.0)), 36 | 0, $5 + 12 | 0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return;
 }
 
 function DrawCircleSector($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, $159 = Math_fround(0), $19 = 0, $168 = Math_fround(0), $182 = Math_fround(0), $32 = 0, $263 = Math_fround(0), $274 = Math_fround(0), $283 = Math_fround(0), $207 = Math_fround(0), $214 = Math_fround(0), $215 = Math_fround(0), $233 = Math_fround(0), $242 = Math_fround(0), $243 = Math_fround(0), $261 = Math_fround(0), $271 = Math_fround(0), $272 = Math_fround(0), $303 = Math_fround(0), $310 = Math_fround(0), $311 = Math_fround(0), $329 = Math_fround(0), $338 = Math_fround(0), $339 = Math_fround(0);
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  HEAPF32[($8 + 44 | 0) >> 2] = $1;
  HEAPF32[($8 + 40 | 0) >> 2] = $2;
  HEAPF32[($8 + 36 | 0) >> 2] = $3;
  HEAP32[($8 + 32 | 0) >> 2] = $4;
  label$1 : {
   if (!(Math_fround(HEAPF32[($8 + 44 | 0) >> 2]) <= Math_fround(0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAPF32[($8 + 44 | 0) >> 2] = Math_fround(.10000000149011612);
  }
  label$2 : {
   if (!(Math_fround(HEAPF32[($8 + 36 | 0) >> 2]) < Math_fround(HEAPF32[($8 + 40 | 0) >> 2]) & 1 | 0)) {
    break label$2
   }
   HEAPF32[($8 + 28 | 0) >> 2] = Math_fround(HEAPF32[($8 + 40 | 0) >> 2]);
   HEAPF32[($8 + 40 | 0) >> 2] = Math_fround(HEAPF32[($8 + 36 | 0) >> 2]);
   HEAPF32[($8 + 36 | 0) >> 2] = Math_fround(HEAPF32[($8 + 28 | 0) >> 2]);
  }
  $159 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($8 + 40 | 0) >> 2])) / Math_fround(90.0))));
  label$3 : {
   label$4 : {
    if (!(Math_fround(Math_abs($159)) < Math_fround(2147483648.0))) {
     break label$4
    }
    $19 = ~~$159;
    break label$3;
   }
   $19 = -2147483648;
  }
  HEAP32[($8 + 24 | 0) >> 2] = $19;
  label$5 : {
   if (!((HEAP32[($8 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   $168 = Math_fround(powf(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround(.5) / Math_fround(HEAPF32[($8 + 44 | 0) >> 2])))), Math_fround(Math_fround(2.0))));
   HEAPF32[($8 + 20 | 0) >> 2] = Math_fround(acosf(Math_fround(Math_fround(Math_fround($168 + $168) + Math_fround(-1.0)))));
   $182 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($8 + 40 | 0) >> 2])) * Math_fround(Math_ceil(Math_fround(Math_fround(6.2831854820251465) / Math_fround(HEAPF32[($8 + 20 | 0) >> 2]))))) / Math_fround(360.0));
   label$6 : {
    label$7 : {
     if (!(Math_fround(Math_abs($182)) < Math_fround(2147483648.0))) {
      break label$7
     }
     $32 = ~~$182;
     break label$6;
    }
    $32 = -2147483648;
   }
   HEAP32[($8 + 32 | 0) >> 2] = $32;
   label$8 : {
    if (!((HEAP32[($8 + 32 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[($8 + 32 | 0) >> 2] = HEAP32[($8 + 24 | 0) >> 2] | 0;
   }
  }
  HEAPF32[($8 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($8 + 40 | 0) >> 2])) / Math_fround(HEAP32[($8 + 32 | 0) >> 2] | 0 | 0));
  HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[($8 + 40 | 0) >> 2]);
  rlSetTexture(HEAP32[(0 + 85208 | 0) >> 2] | 0 | 0);
  rlBegin(7 | 0);
  HEAP32[($8 + 8 | 0) >> 2] = 0;
  label$9 : {
   label$10 : while (1) {
    if (!((HEAP32[($8 + 8 | 0) >> 2] | 0 | 0) < ((HEAP32[($8 + 32 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0) & 1 | 0)) {
     break label$9
    }
    rlColor4ub((HEAPU8[$5 >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 2 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 3 | 0) >> 0] | 0) & 255 | 0 | 0);
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
    rlVertex2f(Math_fround(Math_fround(HEAPF32[$0 >> 2])), Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2])));
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
    $207 = Math_fround(HEAPF32[$0 >> 2]);
    $214 = Math_fround(Math_fround(Math_fround(sinf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(HEAPF32[($8 + 12 | 0) >> 2]))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $207);
    $215 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
    rlVertex2f(Math_fround($214), Math_fround(Math_fround(Math_fround(Math_fround(cosf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(HEAPF32[($8 + 12 | 0) >> 2]))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $215)));
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
    $233 = Math_fround(HEAPF32[$0 >> 2]);
    $242 = Math_fround(Math_fround(Math_fround(sinf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 16 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $233);
    $243 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
    rlVertex2f(Math_fround($242), Math_fround(Math_fround(Math_fround(Math_fround(cosf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 16 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $243)));
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
    $261 = Math_fround(HEAPF32[$0 >> 2]);
    $263 = Math_fround(HEAPF32[($8 + 16 | 0) >> 2]);
    $271 = Math_fround(Math_fround(Math_fround(sinf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround($263 + $263) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $261);
    $272 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
    $274 = Math_fround(HEAPF32[($8 + 16 | 0) >> 2]);
    rlVertex2f(Math_fround($271), Math_fround(Math_fround(Math_fround(Math_fround(cosf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround($274 + $274) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $272)));
    $283 = Math_fround(HEAPF32[($8 + 16 | 0) >> 2]);
    HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(Math_fround($283 + $283) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2]));
    HEAP32[($8 + 8 | 0) >> 2] = (HEAP32[($8 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$10;
   };
  }
  label$11 : {
   if (!((HEAP32[($8 + 32 | 0) >> 2] | 0 | 0) % (2 | 0) | 0)) {
    break label$11
   }
   rlColor4ub((HEAPU8[$5 >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 2 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 3 | 0) >> 0] | 0) & 255 | 0 | 0);
   rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
   rlVertex2f(Math_fround(Math_fround(HEAPF32[$0 >> 2])), Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2])));
   rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
   $303 = Math_fround(HEAPF32[$0 >> 2]);
   $310 = Math_fround(Math_fround(Math_fround(sinf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(HEAPF32[($8 + 12 | 0) >> 2]))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $303);
   $311 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   rlVertex2f(Math_fround($310), Math_fround(Math_fround(Math_fround(Math_fround(cosf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(HEAPF32[($8 + 12 | 0) >> 2]))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $311)));
   rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
   $329 = Math_fround(HEAPF32[$0 >> 2]);
   $338 = Math_fround(Math_fround(Math_fround(sinf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 16 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $329);
   $339 = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   rlVertex2f(Math_fround($338), Math_fround(Math_fround(Math_fround(Math_fround(cosf(Math_fround(Math_fround(Math_fround(.01745329238474369) * Math_fround(Math_fround(HEAPF32[($8 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($8 + 16 | 0) >> 2])))))) * Math_fround(HEAPF32[($8 + 44 | 0) >> 2])) + $339)));
   rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
   rlVertex2f(Math_fround(Math_fround(HEAPF32[$0 >> 2])), Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2])));
  }
  rlEnd();
  rlSetTexture(0 | 0);
  __stack_pointer = $8 + 48 | 0;
  return;
 }
 
 function DrawRectangle($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10 = 0, $67 = 0, $71 = 0;
  $7 = __stack_pointer - 64 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 60 | 0) >> 2] = $0;
  HEAP32[($7 + 56 | 0) >> 2] = $1;
  HEAP32[($7 + 52 | 0) >> 2] = $2;
  HEAP32[($7 + 48 | 0) >> 2] = $3;
  HEAPF32[($7 + 40 | 0) >> 2] = Math_fround(HEAP32[($7 + 60 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 44 | 0) >> 2] = Math_fround(HEAP32[($7 + 56 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 32 | 0) >> 2] = Math_fround(HEAP32[($7 + 52 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 36 | 0) >> 2] = Math_fround(HEAP32[($7 + 48 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = HEAP32[($7 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($7 + 44 | 0) >> 2] | 0;
  $67 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[($7 + 24 | 0) >> 2] = $67;
  HEAP32[($7 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($7 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7 + 36 | 0) >> 2] | 0;
  $71 = i64toi32_i32$1;
  i64toi32_i32$1 = $7;
  HEAP32[($7 + 16 | 0) >> 2] = $71;
  HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
  $10 = $4;
  HEAP32[($7 + 12 | 0) >> 2] = HEAPU8[$10 >> 0] | 0 | ((HEAPU8[($10 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawRectangleV($7 + 24 | 0 | 0, $7 + 16 | 0 | 0, $7 + 12 | 0 | 0);
  __stack_pointer = $7 + 64 | 0;
  return;
 }
 
 function DrawRectangleV($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11 = 0, $8 = 0, $78 = 0, $82 = 0, $86 = 0;
  $5 = __stack_pointer - 64 | 0;
  __stack_pointer = $5;
  HEAPF32[($5 + 48 | 0) >> 2] = Math_fround(HEAPF32[$0 >> 2]);
  HEAPF32[($5 + 52 | 0) >> 2] = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
  HEAPF32[($5 + 56 | 0) >> 2] = Math_fround(HEAPF32[$1 >> 2]);
  HEAPF32[($5 + 60 | 0) >> 2] = Math_fround(HEAPF32[($1 + 4 | 0) >> 2]);
  HEAPF32[($5 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($5 + 44 | 0) >> 2] = Math_fround(0 | 0);
  $8 = 8;
  i64toi32_i32$2 = ($5 + 48 | 0) + $8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $78 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5 + 24 | 0) + $8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $78;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5;
  i64toi32_i32$1 = HEAP32[($5 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5 + 52 | 0) >> 2] | 0;
  $82 = i64toi32_i32$1;
  i64toi32_i32$1 = $5;
  HEAP32[($5 + 24 | 0) >> 2] = $82;
  HEAP32[($5 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[($5 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5 + 44 | 0) >> 2] | 0;
  $86 = i64toi32_i32$0;
  i64toi32_i32$0 = $5;
  HEAP32[($5 + 16 | 0) >> 2] = $86;
  HEAP32[($5 + 20 | 0) >> 2] = i64toi32_i32$1;
  $11 = $2;
  HEAP32[($5 + 12 | 0) >> 2] = HEAPU8[$11 >> 0] | 0 | ((HEAPU8[($11 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawRectanglePro($5 + 24 | 0 | 0, $5 + 16 | 0 | 0, Math_fround(Math_fround(0.0)), $5 + 12 | 0 | 0);
  __stack_pointer = $5 + 64 | 0;
  return;
 }
 
 function DrawRectanglePro($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $196 = Math_fround(0), $294 = 0, $311 = 0, $328 = 0, $350 = 0;
  $6 = __stack_pointer - 112 | 0;
  __stack_pointer = $6;
  HEAPF32[($6 + 108 | 0) >> 2] = $2;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 96 | 0) >> 2] = 0;
  HEAP32[($6 + 100 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 88 | 0) >> 2] = 0;
  HEAP32[($6 + 92 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 80 | 0) >> 2] = 0;
  HEAP32[($6 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 72 | 0) >> 2] = 0;
  HEAP32[($6 + 76 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!(Math_fround(HEAPF32[($6 + 108 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAPF32[($6 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$0 >> 2]) - Math_fround(HEAPF32[$1 >> 2]));
    HEAPF32[($6 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
    HEAPF32[($6 + 56 | 0) >> 2] = Math_fround(HEAPF32[($6 + 68 | 0) >> 2]);
    HEAPF32[($6 + 60 | 0) >> 2] = Math_fround(HEAPF32[($6 + 64 | 0) >> 2]);
    i64toi32_i32$0 = HEAP32[($6 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6 + 60 | 0) >> 2] | 0;
    $294 = i64toi32_i32$0;
    i64toi32_i32$0 = $6;
    HEAP32[($6 + 96 | 0) >> 2] = $294;
    HEAP32[($6 + 100 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[($6 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2]));
    HEAPF32[($6 + 52 | 0) >> 2] = Math_fround(HEAPF32[($6 + 64 | 0) >> 2]);
    i64toi32_i32$1 = HEAP32[($6 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6 + 52 | 0) >> 2] | 0;
    $311 = i64toi32_i32$1;
    i64toi32_i32$1 = $6;
    HEAP32[($6 + 88 | 0) >> 2] = $311;
    HEAP32[($6 + 92 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[($6 + 40 | 0) >> 2] = Math_fround(HEAPF32[($6 + 68 | 0) >> 2]);
    HEAPF32[($6 + 44 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2]));
    i64toi32_i32$0 = HEAP32[($6 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $328 = i64toi32_i32$0;
    i64toi32_i32$0 = $6;
    HEAP32[($6 + 80 | 0) >> 2] = $328;
    HEAP32[($6 + 84 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[($6 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 68 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2]));
    HEAPF32[($6 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2]));
    i64toi32_i32$1 = HEAP32[($6 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6 + 36 | 0) >> 2] | 0;
    $350 = i64toi32_i32$1;
    i64toi32_i32$1 = $6;
    HEAP32[($6 + 72 | 0) >> 2] = $350;
    HEAP32[($6 + 76 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   HEAPF32[($6 + 28 | 0) >> 2] = Math_fround(sinf(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 108 | 0) >> 2]) * Math_fround(.01745329238474369)))));
   HEAPF32[($6 + 24 | 0) >> 2] = Math_fround(cosf(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 108 | 0) >> 2]) * Math_fround(.01745329238474369)))));
   HEAPF32[($6 + 20 | 0) >> 2] = Math_fround(HEAPF32[$0 >> 2]);
   HEAPF32[($6 + 16 | 0) >> 2] = Math_fround(HEAPF32[($0 + 4 | 0) >> 2]);
   HEAPF32[($6 + 12 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$1 >> 2]));
   HEAPF32[($6 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1 + 4 | 0) >> 2]));
   HEAPF32[($6 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($6 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 20 | 0) >> 2])));
   HEAPF32[($6 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 16 | 0) >> 2])));
   HEAPF32[($6 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[($6 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 20 | 0) >> 2])));
   HEAPF32[($6 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 16 | 0) >> 2])));
   HEAPF32[($6 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 20 | 0) >> 2])));
   HEAPF32[($6 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 16 | 0) >> 2])));
   HEAPF32[($6 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 20 | 0) >> 2])));
   HEAPF32[($6 + 76 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 24 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6 + 12 | 0) >> 2]) + Math_fround(HEAPF32[($0 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($6 + 28 | 0) >> 2])) + Math_fround(HEAPF32[($6 + 16 | 0) >> 2])));
  }
  rlSetTexture(HEAP32[(0 + 85208 | 0) >> 2] | 0 | 0);
  rlBegin(7 | 0);
  $196 = Math_fround(0 | 0);
  rlNormal3f(Math_fround($196), Math_fround($196), Math_fround(Math_fround(1.0)));
  rlColor4ub((HEAPU8[$3 >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($3 + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($3 + 2 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($3 + 3 | 0) >> 0] | 0) & 255 | 0 | 0);
  rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
  rlVertex2f(Math_fround(Math_fround(HEAPF32[($6 + 96 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 100 | 0) >> 2])));
  rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
  rlVertex2f(Math_fround(Math_fround(HEAPF32[($6 + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 84 | 0) >> 2])));
  rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85240 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
  rlVertex2f(Math_fround(Math_fround(HEAPF32[($6 + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 76 | 0) >> 2])));
  rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85228 | 0) >> 2]) + Math_fround(HEAPF32[(0 + 85236 | 0) >> 2])) / Math_fround(HEAP32[(0 + 85212 | 0) >> 2] | 0 | 0))), Math_fround(Math_fround(Math_fround(HEAPF32[(0 + 85232 | 0) >> 2]) / Math_fround(HEAP32[(0 + 85216 | 0) >> 2] | 0 | 0))));
  rlVertex2f(Math_fround(Math_fround(HEAPF32[($6 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6 + 92 | 0) >> 2])));
  rlEnd();
  rlSetTexture(0 | 0);
  __stack_pointer = $6 + 112 | 0;
  return;
 }
 
 function DrawRectangleRec($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $10 = 0, $7 = 0, $52 = 0, $56 = 0, $60 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  HEAPF32[($4 + 40 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($4 + 44 | 0) >> 2] = Math_fround(0 | 0);
  $7 = 8;
  i64toi32_i32$2 = $0 + $7 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4 + 24 | 0) + $7 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $56 = i64toi32_i32$1;
  i64toi32_i32$1 = $4;
  HEAP32[($4 + 24 | 0) >> 2] = $56;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[($4 + 40 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4 + 44 | 0) >> 2] | 0;
  $60 = i64toi32_i32$0;
  i64toi32_i32$0 = $4;
  HEAP32[($4 + 16 | 0) >> 2] = $60;
  HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$1;
  $10 = $1;
  HEAP32[($4 + 12 | 0) >> 2] = HEAPU8[$10 >> 0] | 0 | ((HEAPU8[($10 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawRectanglePro($4 + 24 | 0 | 0, $4 + 16 | 0 | 0, Math_fround(Math_fround(0.0)), $4 + 12 | 0 | 0);
  __stack_pointer = $4 + 48 | 0;
  return;
 }
 
 function CheckCollisionPointRec($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP8[($4 + 15 | 0) >> 0] = 0;
  label$1 : {
   if (!(Math_fround(HEAPF32[$0 >> 2]) >= Math_fround(HEAPF32[$1 >> 2]) & 1 | 0)) {
    break label$1
   }
   if (!(Math_fround(HEAPF32[$0 >> 2]) < Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[($1 + 8 | 0) >> 2])) & 1 | 0)) {
    break label$1
   }
   if (!(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) >= Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) & 1 | 0)) {
    break label$1
   }
   if (!(Math_fround(HEAPF32[($0 + 4 | 0) >> 2]) < Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2])) & 1 | 0)) {
    break label$1
   }
   HEAP8[($4 + 15 | 0) >> 0] = 1;
  }
  return (HEAPU8[($4 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function LoadFontDefault() {
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $286 = 0, $82 = 0, $90 = 0, $101 = 0, $365 = Math_fround(0), $191 = 0, $269 = 0, $275 = 0, $278 = 0, $299 = 0, $305 = 0, $313 = 0, $321 = 0, $370 = Math_fround(0), $335 = 0, $564 = 0, $568 = 0, $580 = 0, $594 = 0, $980 = 0, $984 = 0, $994 = 0, $998 = 0, $1011 = 0, $1037 = 0, $1076 = 0, $1080 = 0;
  $2 = __stack_pointer - 3152 | 0;
  __stack_pointer = $2;
  HEAP32[(0 + 96072 | 0) >> 2] = 224;
  HEAP32[(0 + 96076 | 0) >> 2] = 0;
  __memcpy($2 + 1104 | 0 | 0, 76240 | 0, 2048 | 0) | 0;
  HEAP32[($2 + 1100 | 0) >> 2] = 10;
  HEAP32[($2 + 1096 | 0) >> 2] = 1;
  __memcpy($2 + 192 | 0 | 0, 78288 | 0, 896 | 0) | 0;
  HEAP32[($2 + 172 | 0) >> 2] = dlcalloc(16384 | 0, 2 | 0) | 0;
  HEAP32[($2 + 176 | 0) >> 2] = 128;
  HEAP32[($2 + 180 | 0) >> 2] = 128;
  HEAP32[($2 + 184 | 0) >> 2] = 1;
  HEAP32[($2 + 188 | 0) >> 2] = 2;
  HEAP32[($2 + 168 | 0) >> 2] = 0;
  HEAP32[($2 + 164 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2 + 168 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($2 + 176 | 0) >> 2] | 0, HEAP32[($2 + 180 | 0) >> 2] | 0) | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($2 + 160 | 0) >> 2] = 31;
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[($2 + 160 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
       break label$3
      }
      label$5 : {
       label$6 : {
        if (!((HEAP32[(($2 + 1104 | 0) + ((HEAP32[($2 + 164 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & (1 << (HEAP32[($2 + 160 | 0) >> 2] | 0) | 0) | 0)) {
         break label$6
        }
        HEAP16[((HEAP32[($2 + 172 | 0) >> 2] | 0) + (((HEAP32[($2 + 168 | 0) >> 2] | 0) + (HEAP32[($2 + 160 | 0) >> 2] | 0) | 0) << 1 | 0) | 0) >> 1] = 65535;
        break label$5;
       }
       HEAP16[((HEAP32[($2 + 172 | 0) >> 2] | 0) + (((HEAP32[($2 + 168 | 0) >> 2] | 0) + (HEAP32[($2 + 160 | 0) >> 2] | 0) | 0) << 1 | 0) | 0) >> 1] = 255;
      }
      HEAP32[($2 + 160 | 0) >> 2] = (HEAP32[($2 + 160 | 0) >> 2] | 0) + -1 | 0;
      continue label$4;
     };
    }
    HEAP32[($2 + 164 | 0) >> 2] = (HEAP32[($2 + 164 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2 + 168 | 0) >> 2] = (HEAP32[($2 + 168 | 0) >> 2] | 0) + 32 | 0;
    continue label$2;
   };
  }
  $82 = 16;
  HEAP32[(($2 + 80 | 0) + $82 | 0) >> 2] = HEAP32[(($2 + 172 | 0) + $82 | 0) >> 2] | 0;
  $90 = 8;
  i64toi32_i32$2 = ($2 + 172 | 0) + $90 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $564 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 80 | 0) + $90 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $564;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 172 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 176 | 0) >> 2] | 0;
  $568 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 80 | 0) >> 2] = $568;
  HEAP32[($2 + 84 | 0) >> 2] = i64toi32_i32$0;
  LoadTextureFromImage($2 + 140 | 0 | 0, $2 + 80 | 0 | 0);
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[($2 + 140 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2 + 144 | 0) >> 2] | 0;
  $101 = 0;
  $580 = i64toi32_i32$0;
  i64toi32_i32$0 = $101;
  HEAP32[(i64toi32_i32$0 + 96080 | 0) >> 2] = $580;
  HEAP32[(i64toi32_i32$0 + 96084 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 96096 | 0) >> 2] = HEAP32[($2 + 156 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 148 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $594 = i64toi32_i32$1;
  i64toi32_i32$1 = $101;
  HEAP32[(i64toi32_i32$1 + 96088 | 0) >> 2] = $594;
  HEAP32[(i64toi32_i32$1 + 96092 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 96104 | 0) >> 2] = dlmalloc(Math_imul(HEAP32[(0 + 96072 | 0) >> 2] | 0, 36) | 0) | 0;
  HEAP32[(0 + 96100 | 0) >> 2] = dlmalloc((HEAP32[(0 + 96072 | 0) >> 2] | 0) << 4 | 0 | 0) | 0;
  HEAP32[($2 + 136 | 0) >> 2] = 0;
  HEAP32[($2 + 132 | 0) >> 2] = HEAP32[($2 + 1096 | 0) >> 2] | 0;
  HEAP32[($2 + 128 | 0) >> 2] = HEAP32[($2 + 1096 | 0) >> 2] | 0;
  HEAP32[($2 + 124 | 0) >> 2] = 0;
  label$7 : {
   label$8 : while (1) {
    if (!((HEAP32[($2 + 124 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 96072 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 124 | 0) >> 2] | 0, 36) | 0) >> 2] = (HEAP32[($2 + 124 | 0) >> 2] | 0) + 32 | 0;
    HEAPF32[((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = Math_fround(HEAP32[($2 + 132 | 0) >> 2] | 0 | 0);
    HEAPF32[(((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = Math_fround((HEAP32[($2 + 1096 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 136 | 0) >> 2] | 0, (HEAP32[($2 + 1100 | 0) >> 2] | 0) + (HEAP32[($2 + 1096 | 0) >> 2] | 0) | 0) | 0 | 0);
    HEAPF32[(((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2] = Math_fround(HEAP32[(($2 + 192 | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    HEAPF32[(((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2] = Math_fround(HEAP32[($2 + 1100 | 0) >> 2] | 0 | 0);
    $365 = Math_fround(Math_fround(HEAPF32[(((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2]) + Math_fround(HEAP32[($2 + 1096 | 0) >> 2] | 0 | 0));
    label$9 : {
     label$10 : {
      if (!(Math_fround(Math_abs($365)) < Math_fround(2147483648.0))) {
       break label$10
      }
      $191 = ~~$365;
      break label$9;
     }
     $191 = -2147483648;
    }
    HEAP32[($2 + 128 | 0) >> 2] = (HEAP32[($2 + 128 | 0) >> 2] | 0) + $191 | 0;
    label$11 : {
     label$12 : {
      if (!((HEAP32[($2 + 128 | 0) >> 2] | 0 | 0) >= (HEAP32[(0 + 96084 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$12
      }
      HEAP32[($2 + 136 | 0) >> 2] = (HEAP32[($2 + 136 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($2 + 132 | 0) >> 2] = ((HEAP32[($2 + 1096 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[(($2 + 192 | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
      HEAP32[($2 + 128 | 0) >> 2] = HEAP32[($2 + 132 | 0) >> 2] | 0;
      HEAPF32[((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2] = Math_fround(HEAP32[($2 + 1096 | 0) >> 2] | 0 | 0);
      HEAPF32[(((HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2] = Math_fround((HEAP32[($2 + 1096 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 136 | 0) >> 2] | 0, (HEAP32[($2 + 1100 | 0) >> 2] | 0) + (HEAP32[($2 + 1096 | 0) >> 2] | 0) | 0) | 0 | 0);
      break label$11;
     }
     HEAP32[($2 + 132 | 0) >> 2] = HEAP32[($2 + 128 | 0) >> 2] | 0;
    }
    HEAP32[(((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 124 | 0) >> 2] | 0, 36) | 0) + 4 | 0) >> 2] = 0;
    HEAP32[(((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 124 | 0) >> 2] | 0, 36) | 0) + 8 | 0) >> 2] = 0;
    HEAP32[(((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 124 | 0) >> 2] | 0, 36) | 0) + 12 | 0) >> 2] = 0;
    $269 = ((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 124 | 0) >> 2] | 0, 36) | 0) + 16 | 0;
    $275 = (HEAP32[(0 + 96100 | 0) >> 2] | 0) + ((HEAP32[($2 + 124 | 0) >> 2] | 0) << 4 | 0) | 0;
    $278 = 16;
    HEAP32[(($2 + 16 | 0) + $278 | 0) >> 2] = HEAP32[(($2 + 172 | 0) + $278 | 0) >> 2] | 0;
    $286 = 8;
    i64toi32_i32$2 = ($2 + 172 | 0) + $286 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $980 = i64toi32_i32$0;
    i64toi32_i32$0 = ($2 + 16 | 0) + $286 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $980;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = HEAP32[($2 + 172 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2 + 176 | 0) >> 2] | 0;
    $984 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[($2 + 16 | 0) >> 2] = $984;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $275 + $286 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $994 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + $286 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $994;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $275;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $998 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $998;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    ImageFromImage($2 + 104 | 0 | 0, $2 + 16 | 0 | 0, $2 | 0);
    i64toi32_i32$2 = $2;
    i64toi32_i32$0 = HEAP32[($2 + 104 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2 + 108 | 0) >> 2] | 0;
    $1011 = i64toi32_i32$0;
    i64toi32_i32$0 = $269;
    HEAP32[i64toi32_i32$0 >> 2] = $1011;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $299 = 16;
    HEAP32[(i64toi32_i32$0 + $299 | 0) >> 2] = HEAP32[(($2 + 104 | 0) + $299 | 0) >> 2] | 0;
    $305 = 8;
    i64toi32_i32$2 = ($2 + 104 | 0) + $305 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1037 = i64toi32_i32$1;
    i64toi32_i32$1 = $269 + $305 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1037;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($2 + 124 | 0) >> 2] = (HEAP32[($2 + 124 | 0) >> 2] | 0) + 1 | 0;
    continue label$8;
   };
  }
  $313 = 16;
  HEAP32[(($2 + 40 | 0) + $313 | 0) >> 2] = HEAP32[(($2 + 172 | 0) + $313 | 0) >> 2] | 0;
  $321 = 8;
  i64toi32_i32$2 = ($2 + 172 | 0) + $321 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1076 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2 + 40 | 0) + $321 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $1076;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = HEAP32[($2 + 172 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2 + 176 | 0) >> 2] | 0;
  $1080 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $1080;
  HEAP32[($2 + 44 | 0) >> 2] = i64toi32_i32$0;
  UnloadImage($2 + 40 | 0 | 0);
  $370 = Math_fround(HEAPF32[((HEAP32[(0 + 96100 | 0) >> 2] | 0) + 12 | 0) >> 2]);
  label$13 : {
   label$14 : {
    if (!(Math_fround(Math_abs($370)) < Math_fround(2147483648.0))) {
     break label$14
    }
    $335 = ~~$370;
    break label$13;
   }
   $335 = -2147483648;
  }
  HEAP32[(0 + 96068 | 0) >> 2] = $335;
  HEAP32[($2 + 64 | 0) >> 2] = HEAP32[(0 + 96072 | 0) >> 2] | 0;
  TraceLog(3 | 0, 73824 | 0, $2 + 64 | 0 | 0);
  __stack_pointer = $2 + 3152 | 0;
  return;
 }
 
 function UnloadFontDefault() {
  var $2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $19 = 0, $20 = 0, $24 = 0, $30 = 0, $101 = 0, $105 = 0, $127 = 0, $131 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2 + 44 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 96072 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    $19 = ((HEAP32[(0 + 96104 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 44 | 0) >> 2] | 0, 36) | 0) + 16 | 0;
    $20 = 16;
    HEAP32[($2 + $20 | 0) >> 2] = HEAP32[($19 + $20 | 0) >> 2] | 0;
    $24 = 8;
    i64toi32_i32$2 = $19 + $24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $101 = i64toi32_i32$0;
    i64toi32_i32$0 = $2 + $24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $101;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $19;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $105 = i64toi32_i32$1;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $105;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    UnloadImage($2 | 0);
    HEAP32[($2 + 44 | 0) >> 2] = (HEAP32[($2 + 44 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $30 = 0;
  HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($30 + 96096 | 0) >> 2] | 0;
  i64toi32_i32$2 = $30;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96088 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96092 | 0) >> 2] | 0;
  $127 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $127;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96080 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96084 | 0) >> 2] | 0;
  $131 = i64toi32_i32$1;
  i64toi32_i32$1 = $2;
  HEAP32[($2 + 24 | 0) >> 2] = $131;
  HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
  UnloadTexture($2 + 24 | 0 | 0);
  dlfree(HEAP32[(0 + 96104 | 0) >> 2] | 0 | 0);
  dlfree(HEAP32[(0 + 96100 | 0) >> 2] | 0 | 0);
  __stack_pointer = $2 + 48 | 0;
  return;
 }
 
 function GetFontDefault($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $21 = 0, $28 = 0, $35 = 0, $42 = 0, $46 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96100 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96104 | 0) >> 2] | 0;
  $21 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96092 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96096 | 0) >> 2] | 0;
  $28 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96084 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96088 | 0) >> 2] | 0;
  $35 = i64toi32_i32$0;
  i64toi32_i32$0 = $0 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $35;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96076 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96080 | 0) >> 2] | 0;
  $42 = i64toi32_i32$1;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $42;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96068 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96072 | 0) >> 2] | 0;
  $46 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $46;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  return;
 }
 
 function TextLength($0) {
  $0 = $0 | 0;
  var $3 = 0, $12 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : while (1) {
     $12 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     HEAP32[($3 + 12 | 0) >> 2] = $12 + 1 | 0;
     if (!(((HEAPU8[$12 >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  return HEAP32[($3 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function TextToLower($0) {
  $0 = $0 | 0;
  var $3 = 0, $26 = 0, $33 = 0, $36 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  __memset(101760 | 0, 0 | 0, 1024 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($3 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
      break label$2
     }
     $26 = 24;
     label$4 : {
      label$5 : {
       if (!(((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + (HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $26 | 0) >> $26 | 0)) {
        break label$5
       }
       $33 = 24;
       $36 = tolower(((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + (HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $33 | 0) >> $33 | 0 | 0) | 0;
       HEAP8[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 101760 | 0) >> 0] = $36;
       break label$4;
      }
      HEAP8[((HEAP32[($3 + 8 | 0) >> 2] | 0) + 101760 | 0) >> 0] = 0;
      break label$2;
     }
     HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  __stack_pointer = $3 + 16 | 0;
  return 101760 | 0;
 }
 
 function TextFormat($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $33 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = 96112 + ((HEAP32[(0 + 100208 | 0) >> 2] | 0) << 10 | 0) | 0;
  __memset(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 1024 | 0) | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $1;
  vsnprintf(HEAP32[($4 + 8 | 0) >> 2] | 0 | 0, 1024 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(0 + 100208 | 0) >> 2] = (HEAP32[(0 + 100208 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   if (!((HEAP32[(0 + 100208 | 0) >> 2] | 0 | 0) >= (4 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[(0 + 100208 | 0) >> 2] = 0;
  }
  $33 = HEAP32[($4 + 8 | 0) >> 2] | 0;
  __stack_pointer = $4 + 16 | 0;
  return $33 | 0;
 }
 
 function DrawText($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $22 = 0, $32 = 0, $39 = 0, $46 = 0, $53 = 0, $29 = 0, $71 = Math_fround(0), $72 = Math_fround(0), $172 = 0, $188 = 0, $204 = 0, $220 = 0, $224 = 0, $228 = 0;
  $7 = __stack_pointer - 176 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 172 | 0) >> 2] = $0;
  HEAP32[($7 + 168 | 0) >> 2] = $1;
  HEAP32[($7 + 164 | 0) >> 2] = $2;
  HEAP32[($7 + 160 | 0) >> 2] = $3;
  GetFontDefault($7 + 120 | 0 | 0);
  label$1 : {
   if (!(HEAP32[($7 + 132 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAPF32[($7 + 112 | 0) >> 2] = Math_fround(HEAP32[($7 + 168 | 0) >> 2] | 0 | 0);
   HEAPF32[($7 + 116 | 0) >> 2] = Math_fround(HEAP32[($7 + 164 | 0) >> 2] | 0 | 0);
   HEAP32[($7 + 108 | 0) >> 2] = 10;
   label$2 : {
    if (!((HEAP32[($7 + 160 | 0) >> 2] | 0 | 0) < (HEAP32[($7 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($7 + 160 | 0) >> 2] = HEAP32[($7 + 108 | 0) >> 2] | 0;
   }
   HEAP32[($7 + 104 | 0) >> 2] = (HEAP32[($7 + 160 | 0) >> 2] | 0 | 0) / (HEAP32[($7 + 108 | 0) >> 2] | 0 | 0) | 0;
   GetFontDefault($7 + 64 | 0 | 0);
   $29 = HEAP32[($7 + 172 | 0) >> 2] | 0;
   $71 = Math_fround(HEAP32[($7 + 160 | 0) >> 2] | 0 | 0);
   $72 = Math_fround(HEAP32[($7 + 104 | 0) >> 2] | 0 | 0);
   $32 = 32;
   i64toi32_i32$2 = ($7 + 64 | 0) + $32 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $172 = i64toi32_i32$0;
   i64toi32_i32$0 = ($7 + 24 | 0) + $32 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $172;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $39 = 24;
   i64toi32_i32$2 = ($7 + 64 | 0) + $39 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $188 = i64toi32_i32$1;
   i64toi32_i32$1 = ($7 + 24 | 0) + $39 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $188;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $46 = 16;
   i64toi32_i32$2 = ($7 + 64 | 0) + $46 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $204 = i64toi32_i32$0;
   i64toi32_i32$0 = ($7 + 24 | 0) + $46 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $204;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $53 = 8;
   i64toi32_i32$2 = ($7 + 64 | 0) + $53 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $220 = i64toi32_i32$1;
   i64toi32_i32$1 = ($7 + 24 | 0) + $53 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $220;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $7;
   i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
   $224 = i64toi32_i32$0;
   i64toi32_i32$0 = $7;
   HEAP32[($7 + 24 | 0) >> 2] = $224;
   HEAP32[($7 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7;
   i64toi32_i32$1 = HEAP32[($7 + 112 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7 + 116 | 0) >> 2] | 0;
   $228 = i64toi32_i32$1;
   i64toi32_i32$1 = $7;
   HEAP32[($7 + 16 | 0) >> 2] = $228;
   HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
   $22 = $4;
   HEAP32[($7 + 12 | 0) >> 2] = HEAPU8[$22 >> 0] | 0 | ((HEAPU8[($22 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($22 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($22 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   DrawTextEx($7 + 24 | 0 | 0, $29 | 0, $7 + 16 | 0 | 0, Math_fround($71), Math_fround($72), $7 + 12 | 0 | 0);
  }
  __stack_pointer = $7 + 176 | 0;
  return;
 }
 
 function DrawTextEx($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $43 = 0, $13 = 0, $18 = 0, $23 = 0, $28 = 0, $55 = 0, $60 = 0, $65 = 0, $70 = 0, $187 = Math_fround(0), $90 = 0, $112 = 0, $117 = 0, $122 = 0, $127 = 0, $234 = 0, $247 = 0, $260 = 0, $273 = 0, $286 = 0, $54 = 0, $358 = 0, $371 = 0, $384 = 0, $397 = 0, $401 = 0, $110 = 0, $197 = Math_fround(0), $525 = 0, $538 = 0, $551 = 0, $564 = 0, $568 = 0, $572 = 0;
  $8 = __stack_pointer - 192 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 188 | 0) >> 2] = $1;
  HEAPF32[($8 + 184 | 0) >> 2] = $3;
  HEAPF32[($8 + 180 | 0) >> 2] = $4;
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   GetFontDefault($8 + 140 | 0 | 0);
   i64toi32_i32$2 = $8;
   i64toi32_i32$0 = HEAP32[($8 + 140 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($8 + 144 | 0) >> 2] | 0;
   $234 = i64toi32_i32$0;
   i64toi32_i32$0 = $0;
   HEAP32[i64toi32_i32$0 >> 2] = $234;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $13 = 32;
   i64toi32_i32$2 = ($8 + 140 | 0) + $13 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $247 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + $13 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $247;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $18 = 24;
   i64toi32_i32$2 = ($8 + 140 | 0) + $18 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $260 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + $18 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $260;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $23 = 16;
   i64toi32_i32$2 = ($8 + 140 | 0) + $23 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $273 = i64toi32_i32$1;
   i64toi32_i32$1 = $0 + $23 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $273;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $28 = 8;
   i64toi32_i32$2 = ($8 + 140 | 0) + $28 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $286 = i64toi32_i32$0;
   i64toi32_i32$0 = $0 + $28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $286;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  HEAP32[($8 + 136 | 0) >> 2] = TextLength(HEAP32[($8 + 188 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($8 + 132 | 0) >> 2] = 0;
  HEAPF32[($8 + 128 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($8 + 124 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 184 | 0) >> 2]) / Math_fround(HEAP32[$0 >> 2] | 0 | 0));
  HEAP32[($8 + 120 | 0) >> 2] = 0;
  label$2 : {
   label$3 : while (1) {
    if (!((HEAP32[($8 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[($8 + 136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($8 + 116 | 0) >> 2] = 0;
    HEAP32[($8 + 112 | 0) >> 2] = GetCodepointNext((HEAP32[($8 + 188 | 0) >> 2] | 0) + (HEAP32[($8 + 120 | 0) >> 2] | 0) | 0 | 0, $8 + 116 | 0 | 0) | 0;
    $54 = HEAP32[($8 + 112 | 0) >> 2] | 0;
    $55 = 32;
    i64toi32_i32$2 = $0 + $55 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $358 = i64toi32_i32$1;
    i64toi32_i32$1 = ($8 + 56 | 0) + $55 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $358;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $60 = 24;
    i64toi32_i32$2 = $0 + $60 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $371 = i64toi32_i32$0;
    i64toi32_i32$0 = ($8 + 56 | 0) + $60 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $371;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $65 = 16;
    i64toi32_i32$2 = $0 + $65 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $384 = i64toi32_i32$1;
    i64toi32_i32$1 = ($8 + 56 | 0) + $65 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $384;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $70 = 8;
    i64toi32_i32$2 = $0 + $70 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $397 = i64toi32_i32$0;
    i64toi32_i32$0 = ($8 + 56 | 0) + $70 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $397;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $401 = i64toi32_i32$1;
    i64toi32_i32$1 = $8;
    HEAP32[($8 + 56 | 0) >> 2] = $401;
    HEAP32[($8 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($8 + 108 | 0) >> 2] = GetGlyphIndex($8 + 56 | 0 | 0, $54 | 0) | 0;
    label$4 : {
     label$5 : {
      if (!((HEAP32[($8 + 112 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
       break label$5
      }
      $187 = Math_fround(Math_fround(Math_fround(HEAP32[$0 >> 2] | 0 | 0) + Math_fround(Math_fround(HEAP32[$0 >> 2] | 0 | 0) / Math_fround(2.0))) * Math_fround(HEAPF32[($8 + 124 | 0) >> 2]));
      label$6 : {
       label$7 : {
        if (!(Math_fround(Math_abs($187)) < Math_fround(2147483648.0))) {
         break label$7
        }
        $90 = ~~$187;
        break label$6;
       }
       $90 = -2147483648;
      }
      HEAP32[($8 + 132 | 0) >> 2] = (HEAP32[($8 + 132 | 0) >> 2] | 0) + $90 | 0;
      HEAPF32[($8 + 128 | 0) >> 2] = Math_fround(0 | 0);
      break label$4;
     }
     label$8 : {
      if (!((HEAP32[($8 + 112 | 0) >> 2] | 0 | 0) != (32 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[($8 + 112 | 0) >> 2] | 0 | 0) != (9 | 0) & 1 | 0)) {
       break label$8
      }
      $110 = HEAP32[($8 + 112 | 0) >> 2] | 0;
      HEAPF32[($8 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$2 >> 2]) + Math_fround(HEAPF32[($8 + 128 | 0) >> 2]));
      HEAPF32[($8 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) + Math_fround(HEAP32[($8 + 132 | 0) >> 2] | 0 | 0));
      $197 = Math_fround(HEAPF32[($8 + 184 | 0) >> 2]);
      $112 = 32;
      i64toi32_i32$2 = $0 + $112 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $525 = i64toi32_i32$0;
      i64toi32_i32$0 = ($8 + 16 | 0) + $112 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $525;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $117 = 24;
      i64toi32_i32$2 = $0 + $117 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $538 = i64toi32_i32$1;
      i64toi32_i32$1 = ($8 + 16 | 0) + $117 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $538;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $122 = 16;
      i64toi32_i32$2 = $0 + $122 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $551 = i64toi32_i32$0;
      i64toi32_i32$0 = ($8 + 16 | 0) + $122 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $551;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $127 = 8;
      i64toi32_i32$2 = $0 + $127 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $564 = i64toi32_i32$1;
      i64toi32_i32$1 = ($8 + 16 | 0) + $127 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $564;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $568 = i64toi32_i32$0;
      i64toi32_i32$0 = $8;
      HEAP32[($8 + 16 | 0) >> 2] = $568;
      HEAP32[($8 + 20 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $8;
      i64toi32_i32$1 = HEAP32[($8 + 100 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($8 + 104 | 0) >> 2] | 0;
      $572 = i64toi32_i32$1;
      i64toi32_i32$1 = $8;
      HEAP32[($8 + 8 | 0) >> 2] = $572;
      HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
      $43 = $5;
      HEAP32[($8 + 4 | 0) >> 2] = HEAPU8[$43 >> 0] | 0 | ((HEAPU8[($43 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($43 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($43 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
      DrawTextCodepoint($8 + 16 | 0 | 0, $110 | 0, $8 + 8 | 0 | 0, Math_fround($197), $8 + 4 | 0 | 0);
     }
     label$9 : {
      label$10 : {
       if (HEAP32[(((HEAP32[($0 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($8 + 108 | 0) >> 2] | 0, 36) | 0) + 12 | 0) >> 2] | 0) {
        break label$10
       }
       HEAPF32[($8 + 128 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 128 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAPF32[(((HEAP32[($0 + 32 | 0) >> 2] | 0) + ((HEAP32[($8 + 108 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 124 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 180 | 0) >> 2])));
       break label$9;
      }
      HEAPF32[($8 + 128 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 128 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(HEAP32[(((HEAP32[($0 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($8 + 108 | 0) >> 2] | 0, 36) | 0) + 12 | 0) >> 2] | 0 | 0) * Math_fround(HEAPF32[($8 + 124 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 180 | 0) >> 2])));
     }
    }
    HEAP32[($8 + 120 | 0) >> 2] = (HEAP32[($8 + 120 | 0) >> 2] | 0) + (HEAP32[($8 + 116 | 0) >> 2] | 0) | 0;
    continue label$3;
   };
  }
  __stack_pointer = $8 + 192 | 0;
  return;
 }
 
 function GetCodepointNext($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $11 = 0, $24 = 0, $33 = 0, $42 = 0, $52 = 0, $61 = 0, $71 = 0, $81 = 0, $91 = 0, $104 = 0, $113 = 0, $123 = 0, $132 = 0, $142 = 0, $152 = 0, $165 = 0, $175 = 0, $184 = 0, $194 = 0, $207 = 0;
  $4 = __stack_pointer - 32 | 0;
  HEAP32[($4 + 24 | 0) >> 2] = $0;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 12 | 0) >> 2] = 63;
  HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] = 1;
  $11 = 24;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((240 | 0) == ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $11 | 0) >> $11 | 0) & 248 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $24 = 24;
     label$4 : {
      label$5 : {
       if (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $24 | 0) >> $24 | 0) & 192 | 0) ^ 128 | 0) {
        break label$5
       }
       $33 = 24;
       if (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $33 | 0) >> $33 | 0) & 192 | 0) ^ 128 | 0) {
        break label$5
       }
       $42 = 24;
       if (!(((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0) << $42 | 0) >> $42 | 0) & 192 | 0) ^ 128 | 0)) {
        break label$4
       }
      }
      HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
      break label$1;
     }
     $52 = 24;
     $61 = 24;
     $71 = 24;
     $81 = 24;
     HEAP32[($4 + 12 | 0) >> 2] = ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $52 | 0) >> $52 | 0) & 7 | 0) << 18 | 0 | (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $61 | 0) >> $61 | 0) & 63 | 0) << 12 | 0) | 0 | (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $71 | 0) >> $71 | 0) & 63 | 0) << 6 | 0) | 0 | ((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 3 | 0) >> 0] | 0) << $81 | 0) >> $81 | 0) & 63 | 0) | 0;
     HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] = 4;
     break label$2;
    }
    $91 = 24;
    label$6 : {
     label$7 : {
      if (!((224 | 0) == ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $91 | 0) >> $91 | 0) & 240 | 0 | 0) & 1 | 0)) {
       break label$7
      }
      $104 = 24;
      label$8 : {
       label$9 : {
        if (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $104 | 0) >> $104 | 0) & 192 | 0) ^ 128 | 0) {
         break label$9
        }
        $113 = 24;
        if (!(((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $113 | 0) >> $113 | 0) & 192 | 0) ^ 128 | 0)) {
         break label$8
        }
       }
       HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
       break label$1;
      }
      $123 = 24;
      $132 = 24;
      $142 = 24;
      HEAP32[($4 + 12 | 0) >> 2] = ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $123 | 0) >> $123 | 0) & 15 | 0) << 12 | 0 | (((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $132 | 0) >> $132 | 0) & 63 | 0) << 6 | 0) | 0 | ((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) << $142 | 0) >> $142 | 0) & 63 | 0) | 0;
      HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] = 3;
      break label$6;
     }
     $152 = 24;
     label$10 : {
      label$11 : {
       if (!((192 | 0) == ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $152 | 0) >> $152 | 0) & 224 | 0 | 0) & 1 | 0)) {
        break label$11
       }
       $165 = 24;
       label$12 : {
        if (!(((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $165 | 0) >> $165 | 0) & 192 | 0) ^ 128 | 0)) {
         break label$12
        }
        HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
        break label$1;
       }
       $175 = 24;
       $184 = 24;
       HEAP32[($4 + 12 | 0) >> 2] = ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $175 | 0) >> $175 | 0) & 31 | 0) << 6 | 0 | ((((HEAPU8[((HEAP32[($4 + 16 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) << $184 | 0) >> $184 | 0) & 63 | 0) | 0;
       HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] = 2;
       break label$10;
      }
      $194 = 24;
      label$13 : {
       if (!((0 | 0) == ((((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $194 | 0) >> $194 | 0) & 128 | 0 | 0) & 1 | 0)) {
        break label$13
       }
       $207 = 24;
       HEAP32[($4 + 12 | 0) >> 2] = ((HEAPU8[(HEAP32[($4 + 16 | 0) >> 2] | 0) >> 0] | 0) << $207 | 0) >> $207 | 0;
       HEAP32[(HEAP32[($4 + 20 | 0) >> 2] | 0) >> 2] = 1;
      }
     }
    }
   }
   HEAP32[($4 + 28 | 0) >> 2] = HEAP32[($4 + 12 | 0) >> 2] | 0;
  }
  return HEAP32[($4 + 28 | 0) >> 2] | 0 | 0;
 }
 
 function GetGlyphIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $1;
  HEAP32[($4 + 8 | 0) >> 2] = 0;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[((HEAP32[($0 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[$4 >> 2] | 0, 36) | 0) >> 2] | 0 | 0) == (63 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4 + 4 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
    }
    label$4 : {
     if (!((HEAP32[((HEAP32[($0 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[$4 >> 2] | 0, 36) | 0) >> 2] | 0 | 0) == (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($4 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
     break label$1;
    }
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  label$5 : {
   if (HEAP32[($4 + 8 | 0) >> 2] | 0) {
    break label$5
   }
   if (!((HEAP32[(HEAP32[($0 + 36 | 0) >> 2] | 0) >> 2] | 0 | 0) != (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$5
   }
   HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  }
  return HEAP32[($4 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function DrawTextCodepoint($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $7 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $93 = 0, $33 = 0, $84 = 0, $9 = 0, $14 = 0, $19 = 0, $24 = 0, $159 = Math_fround(0), $165 = Math_fround(0), $177 = Math_fround(0), $181 = Math_fround(0), $87 = 0, $8 = 0, $210 = 0, $223 = 0, $236 = 0, $249 = 0, $253 = 0, $537 = 0, $541 = 0, $557 = 0, $561 = 0, $577 = 0, $581 = 0, $585 = 0;
  $7 = __stack_pointer - 176 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 172 | 0) >> 2] = $1;
  HEAPF32[($7 + 168 | 0) >> 2] = $3;
  $8 = HEAP32[($7 + 172 | 0) >> 2] | 0;
  $9 = 32;
  i64toi32_i32$2 = $0 + $9 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $210 = i64toi32_i32$0;
  i64toi32_i32$0 = ($7 + 8 | 0) + $9 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $210;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $14 = 24;
  i64toi32_i32$2 = $0 + $14 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $223 = i64toi32_i32$1;
  i64toi32_i32$1 = ($7 + 8 | 0) + $14 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $223;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $19 = 16;
  i64toi32_i32$2 = $0 + $19 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $236 = i64toi32_i32$0;
  i64toi32_i32$0 = ($7 + 8 | 0) + $19 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $236;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $24 = 8;
  i64toi32_i32$2 = $0 + $24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $249 = i64toi32_i32$1;
  i64toi32_i32$1 = ($7 + 8 | 0) + $24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $249;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $253 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[($7 + 8 | 0) >> 2] = $253;
  HEAP32[($7 + 12 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($7 + 164 | 0) >> 2] = GetGlyphIndex($7 + 8 | 0 | 0, $8 | 0) | 0;
  HEAPF32[($7 + 160 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($7 + 168 | 0) >> 2]) / Math_fround(HEAP32[i64toi32_i32$2 >> 2] | 0 | 0));
  HEAPF32[($7 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAP32[(((HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($7 + 164 | 0) >> 2] | 0, 36) | 0) + 4 | 0) >> 2] | 0 | 0) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2])) + Math_fround(HEAPF32[$2 >> 2])));
  HEAPF32[($7 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0)) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAP32[(((HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($7 + 164 | 0) >> 2] | 0, 36) | 0) + 8 | 0) >> 2] | 0 | 0) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2])) + Math_fround(HEAPF32[($2 + 4 | 0) >> 2])));
  $159 = Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($159 + $159) + Math_fround(HEAPF32[(((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2]));
  $165 = Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 156 | 0) >> 2] = Math_fround(Math_fround(Math_fround($165 + $165) + Math_fround(HEAPF32[(((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2])) * Math_fround(HEAPF32[($7 + 160 | 0) >> 2]));
  HEAPF32[($7 + 128 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) >> 2]) - Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0));
  HEAPF32[($7 + 132 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) + 4 | 0) >> 2]) - Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0));
  $177 = Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 136 | 0) >> 2] = Math_fround(Math_fround($177 + $177) + Math_fround(HEAPF32[(((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) + 8 | 0) >> 2]));
  $181 = Math_fround(HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0 | 0);
  HEAPF32[($7 + 140 | 0) >> 2] = Math_fround(Math_fround($181 + $181) + Math_fround(HEAPF32[(((HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0) + ((HEAP32[($7 + 164 | 0) >> 2] | 0) << 4 | 0) | 0) + 12 | 0) >> 2]));
  $84 = i64toi32_i32$2 + 12 | 0;
  HEAPF32[($7 + 120 | 0) >> 2] = Math_fround(0 | 0);
  HEAPF32[($7 + 124 | 0) >> 2] = Math_fround(0 | 0);
  $87 = 16;
  HEAP32[(($7 + 96 | 0) + $87 | 0) >> 2] = HEAP32[($84 + $87 | 0) >> 2] | 0;
  $93 = 8;
  i64toi32_i32$2 = $84 + $93 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $537 = i64toi32_i32$1;
  i64toi32_i32$1 = ($7 + 96 | 0) + $93 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $537;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $84;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $541 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[($7 + 96 | 0) >> 2] = $541;
  HEAP32[($7 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($7 + 128 | 0) + $93 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $557 = i64toi32_i32$1;
  i64toi32_i32$1 = ($7 + 80 | 0) + $93 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $557;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[($7 + 128 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($7 + 132 | 0) >> 2] | 0;
  $561 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[($7 + 80 | 0) >> 2] = $561;
  HEAP32[($7 + 84 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($7 + 144 | 0) + $93 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $577 = i64toi32_i32$1;
  i64toi32_i32$1 = ($7 + 64 | 0) + $93 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $577;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = HEAP32[($7 + 144 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($7 + 148 | 0) >> 2] | 0;
  $581 = i64toi32_i32$0;
  i64toi32_i32$0 = $7;
  HEAP32[($7 + 64 | 0) >> 2] = $581;
  HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7;
  i64toi32_i32$1 = HEAP32[($7 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7 + 124 | 0) >> 2] | 0;
  $585 = i64toi32_i32$1;
  i64toi32_i32$1 = $7;
  HEAP32[($7 + 56 | 0) >> 2] = $585;
  HEAP32[($7 + 60 | 0) >> 2] = i64toi32_i32$0;
  $33 = $4;
  HEAP32[($7 + 52 | 0) >> 2] = HEAPU8[$33 >> 0] | 0 | ((HEAPU8[($33 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($33 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($33 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  DrawTexturePro($7 + 96 | 0 | 0, $7 + 80 | 0 | 0, $7 + 64 | 0 | 0, $7 + 56 | 0 | 0, Math_fround(Math_fround(0.0)), $7 + 52 | 0 | 0);
  __stack_pointer = $7 + 176 | 0;
  return;
 }
 
 function TextSplit($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $35 = 0, $40 = 0, $44 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP8[($5 + 27 | 0) >> 0] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  __memset(100736 | 0, 0 | 0, 1024 | 0) | 0;
  HEAP32[(0 + 100224 | 0) >> 2] = 100736;
  HEAP32[($5 + 16 | 0) >> 2] = 0;
  label$1 : {
   if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5 + 16 | 0) >> 2] = 1;
   HEAP32[($5 + 12 | 0) >> 2] = 0;
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) < (1024 | 0) & 1 | 0)) {
      break label$2
     }
     HEAP8[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 100736 | 0) >> 0] = HEAPU8[((HEAP32[($5 + 28 | 0) >> 2] | 0) + (HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) >> 0] | 0;
     $35 = 24;
     label$4 : {
      if (((HEAPU8[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 100736 | 0) >> 0] | 0) << $35 | 0) >> $35 | 0) {
       break label$4
      }
      break label$2;
     }
     $40 = 24;
     $44 = 24;
     label$5 : {
      if (!((((HEAPU8[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 100736 | 0) >> 0] | 0) << $40 | 0) >> $40 | 0 | 0) == (((HEAPU8[($5 + 27 | 0) >> 0] | 0) << $44 | 0) >> $44 | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP8[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 100736 | 0) >> 0] = 0;
      HEAP32[(100224 + ((HEAP32[($5 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = (100736 + (HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) + 1 | 0;
      HEAP32[($5 + 16 | 0) >> 2] = (HEAP32[($5 + 16 | 0) >> 2] | 0) + 1 | 0;
      label$6 : {
       if (!((HEAP32[($5 + 16 | 0) >> 2] | 0 | 0) == (128 | 0) & 1 | 0)) {
        break label$6
       }
       break label$2;
      }
     }
     HEAP32[($5 + 12 | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
  }
  HEAP32[(HEAP32[($5 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($5 + 16 | 0) >> 2] | 0;
  __stack_pointer = $5 + 32 | 0;
  return 100224 | 0;
 }
 
 function qoi_encode($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $120 = 0, $127 = 0, $232 = 0, $250 = 0, $298 = 0, $343 = 0, $347 = 0, $352 = 0, $356 = 0, $361 = 0, $371 = 0, $381 = 0, $391 = 0, $401 = 0, $411 = 0, $421 = 0, $431 = 0, $440 = 0, $447 = 0, $452 = 0, $462 = 0, $472 = 0, $482 = 0, $492 = 0, $502 = 0, $512 = 0, $520 = 0, $525 = 0, $533 = 0, $540 = 0, $545 = 0, $552 = 0, $558 = 0, $564 = 0, $569 = 0, $576 = 0, $582 = 0, $588 = 0, $594 = 0, $613 = 0, $118 = 0, $119 = 0, $125 = 0, $126 = 0, $230 = 0, $231 = 0, $248 = 0, $249 = 0, $296 = 0, $297 = 0, $445 = 0, $446 = 0, $518 = 0, $519 = 0, $538 = 0, $539 = 0, $544 = 0, $550 = 0, $551 = 0, $556 = 0, $557 = 0, $562 = 0, $563 = 0, $568 = 0, $574 = 0, $575 = 0, $580 = 0, $581 = 0, $586 = 0, $587 = 0, $592 = 0, $593 = 0, $611 = 0, $612 = 0, $623 = 0;
  $5 = __stack_pointer - 352 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 344 | 0) >> 2] = $0;
  HEAP32[($5 + 340 | 0) >> 2] = $1;
  HEAP32[($5 + 336 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($5 + 344 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     if ((HEAP32[($5 + 336 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     if ((HEAP32[($5 + 340 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
      break label$3
     }
     if (!(HEAP32[(HEAP32[($5 + 340 | 0) >> 2] | 0) >> 2] | 0)) {
      break label$3
     }
     if (!(HEAP32[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0)) {
      break label$3
     }
     if (((HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | 0) < (3 | 0) & 1 | 0) {
      break label$3
     }
     if (((HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0 | 0) > (4 | 0) & 1 | 0) {
      break label$3
     }
     if (((HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0) & 255 | 0 | 0) > (1 | 0) & 1 | 0) {
      break label$3
     }
     if (!((HEAP32[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 >= ((4e8 >>> 0) / ((HEAP32[(HEAP32[($5 + 340 | 0) >> 2] | 0) >> 2] | 0) >>> 0) | 0) >>> 0 & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($5 + 348 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5 + 328 | 0) >> 2] = (Math_imul(Math_imul(HEAP32[(HEAP32[($5 + 340 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0), ((HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) + 1 | 0) + 14 | 0) + 8 | 0;
   HEAP32[($5 + 324 | 0) >> 2] = 0;
   HEAP32[($5 + 300 | 0) >> 2] = dlmalloc(HEAP32[($5 + 328 | 0) >> 2] | 0 | 0) | 0;
   label$4 : {
    if ((HEAP32[($5 + 300 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($5 + 348 | 0) >> 2] = 0;
    break label$1;
   }
   qoi_write_32(HEAP32[($5 + 300 | 0) >> 2] | 0 | 0, $5 + 324 | 0 | 0, 1903126886 | 0);
   qoi_write_32(HEAP32[($5 + 300 | 0) >> 2] | 0 | 0, $5 + 324 | 0 | 0, HEAP32[(HEAP32[($5 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0);
   qoi_write_32(HEAP32[($5 + 300 | 0) >> 2] | 0 | 0, $5 + 324 | 0 | 0, HEAP32[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   $118 = HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0;
   $119 = HEAP32[($5 + 300 | 0) >> 2] | 0;
   $120 = HEAP32[($5 + 324 | 0) >> 2] | 0;
   HEAP32[($5 + 324 | 0) >> 2] = $120 + 1 | 0;
   HEAP8[($119 + $120 | 0) >> 0] = $118;
   $125 = HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 9 | 0) >> 0] | 0;
   $126 = HEAP32[($5 + 300 | 0) >> 2] | 0;
   $127 = HEAP32[($5 + 324 | 0) >> 2] | 0;
   HEAP32[($5 + 324 | 0) >> 2] = $127 + 1 | 0;
   HEAP8[($126 + $127 | 0) >> 0] = $125;
   HEAP32[($5 + 296 | 0) >> 2] = HEAP32[($5 + 344 | 0) >> 2] | 0;
   __memset($5 + 32 | 0 | 0, 0 | 0, 256 | 0) | 0;
   HEAP32[($5 + 320 | 0) >> 2] = 0;
   HEAP8[($5 + 24 | 0) >> 0] = 0;
   HEAP8[($5 + 25 | 0) >> 0] = 0;
   HEAP8[($5 + 26 | 0) >> 0] = 0;
   HEAP8[($5 + 27 | 0) >> 0] = 255;
   HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($5 + 24 | 0) >> 2] | 0;
   HEAP32[($5 + 316 | 0) >> 2] = Math_imul(Math_imul(HEAP32[(HEAP32[($5 + 340 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0), (HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0);
   HEAP32[($5 + 312 | 0) >> 2] = (HEAP32[($5 + 316 | 0) >> 2] | 0) - ((HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0) | 0;
   HEAP32[($5 + 304 | 0) >> 2] = (HEAPU8[((HEAP32[($5 + 340 | 0) >> 2] | 0) + 8 | 0) >> 0] | 0) & 255 | 0;
   HEAP32[($5 + 308 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5 + 308 | 0) >> 2] | 0 | 0) < (HEAP32[($5 + 316 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP8[($5 + 28 | 0) >> 0] = HEAPU8[((HEAP32[($5 + 296 | 0) >> 2] | 0) + ((HEAP32[($5 + 308 | 0) >> 2] | 0) + 0 | 0) | 0) >> 0] | 0;
     HEAP8[($5 + 29 | 0) >> 0] = HEAPU8[((HEAP32[($5 + 296 | 0) >> 2] | 0) + ((HEAP32[($5 + 308 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
     HEAP8[($5 + 30 | 0) >> 0] = HEAPU8[((HEAP32[($5 + 296 | 0) >> 2] | 0) + ((HEAP32[($5 + 308 | 0) >> 2] | 0) + 2 | 0) | 0) >> 0] | 0;
     label$7 : {
      if (!((HEAP32[($5 + 304 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP8[($5 + 31 | 0) >> 0] = HEAPU8[((HEAP32[($5 + 296 | 0) >> 2] | 0) + ((HEAP32[($5 + 308 | 0) >> 2] | 0) + 3 | 0) | 0) >> 0] | 0;
     }
     label$8 : {
      label$9 : {
       if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($5 + 320 | 0) >> 2] = (HEAP32[($5 + 320 | 0) >> 2] | 0) + 1 | 0;
       label$10 : {
        label$11 : {
         if ((HEAP32[($5 + 320 | 0) >> 2] | 0 | 0) == (62 | 0) & 1 | 0) {
          break label$11
         }
         if (!((HEAP32[($5 + 308 | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 312 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$10
         }
        }
        $230 = (HEAP32[($5 + 320 | 0) >> 2] | 0) - 1 | 0 | 192 | 0;
        $231 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $232 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $232 + 1 | 0;
        HEAP8[($231 + $232 | 0) >> 0] = $230;
        HEAP32[($5 + 320 | 0) >> 2] = 0;
       }
       break label$8;
      }
      label$12 : {
       if (!((HEAP32[($5 + 320 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
        break label$12
       }
       $248 = (HEAP32[($5 + 320 | 0) >> 2] | 0) - 1 | 0 | 192 | 0;
       $249 = HEAP32[($5 + 300 | 0) >> 2] | 0;
       $250 = HEAP32[($5 + 324 | 0) >> 2] | 0;
       HEAP32[($5 + 324 | 0) >> 2] = $250 + 1 | 0;
       HEAP8[($249 + $250 | 0) >> 0] = $248;
       HEAP32[($5 + 320 | 0) >> 2] = 0;
      }
      HEAP32[($5 + 20 | 0) >> 2] = (((Math_imul((HEAPU8[($5 + 28 | 0) >> 0] | 0) & 255 | 0, 3) + Math_imul((HEAPU8[($5 + 29 | 0) >> 0] | 0) & 255 | 0, 5) | 0) + Math_imul((HEAPU8[($5 + 30 | 0) >> 0] | 0) & 255 | 0, 7) | 0) + Math_imul((HEAPU8[($5 + 31 | 0) >> 0] | 0) & 255 | 0, 11) | 0 | 0) % (64 | 0) | 0;
      label$13 : {
       label$14 : {
        if (!((HEAP32[(($5 + 32 | 0) + ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$14
        }
        $296 = HEAP32[($5 + 20 | 0) >> 2] | 0 | 0 | 0;
        $297 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $298 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $298 + 1 | 0;
        HEAP8[($297 + $298 | 0) >> 0] = $296;
        break label$13;
       }
       HEAP32[(($5 + 32 | 0) + ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($5 + 28 | 0) >> 2] | 0;
       label$15 : {
        label$16 : {
         if (!(((HEAPU8[($5 + 31 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[($5 + 27 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
          break label$16
         }
         HEAP8[($5 + 19 | 0) >> 0] = ((HEAPU8[($5 + 28 | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[($5 + 24 | 0) >> 0] | 0) & 255 | 0) | 0;
         HEAP8[($5 + 18 | 0) >> 0] = ((HEAPU8[($5 + 29 | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[($5 + 25 | 0) >> 0] | 0) & 255 | 0) | 0;
         HEAP8[($5 + 17 | 0) >> 0] = ((HEAPU8[($5 + 30 | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[($5 + 26 | 0) >> 0] | 0) & 255 | 0) | 0;
         $343 = 24;
         $347 = 24;
         HEAP8[($5 + 16 | 0) >> 0] = (((HEAPU8[($5 + 19 | 0) >> 0] | 0) << $343 | 0) >> $343 | 0) - (((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $347 | 0) >> $347 | 0) | 0;
         $352 = 24;
         $356 = 24;
         HEAP8[($5 + 15 | 0) >> 0] = (((HEAPU8[($5 + 17 | 0) >> 0] | 0) << $352 | 0) >> $352 | 0) - (((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $356 | 0) >> $356 | 0) | 0;
         $361 = 24;
         label$17 : {
          label$18 : {
           if (!((((HEAPU8[($5 + 19 | 0) >> 0] | 0) << $361 | 0) >> $361 | 0 | 0) > (-3 | 0) & 1 | 0)) {
            break label$18
           }
           $371 = 24;
           if (!((((HEAPU8[($5 + 19 | 0) >> 0] | 0) << $371 | 0) >> $371 | 0 | 0) < (2 | 0) & 1 | 0)) {
            break label$18
           }
           $381 = 24;
           if (!((((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $381 | 0) >> $381 | 0 | 0) > (-3 | 0) & 1 | 0)) {
            break label$18
           }
           $391 = 24;
           if (!((((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $391 | 0) >> $391 | 0 | 0) < (2 | 0) & 1 | 0)) {
            break label$18
           }
           $401 = 24;
           if (!((((HEAPU8[($5 + 17 | 0) >> 0] | 0) << $401 | 0) >> $401 | 0 | 0) > (-3 | 0) & 1 | 0)) {
            break label$18
           }
           $411 = 24;
           if (!((((HEAPU8[($5 + 17 | 0) >> 0] | 0) << $411 | 0) >> $411 | 0 | 0) < (2 | 0) & 1 | 0)) {
            break label$18
           }
           $421 = 24;
           $431 = 24;
           $440 = 24;
           $445 = ((((HEAPU8[($5 + 19 | 0) >> 0] | 0) << $421 | 0) >> $421 | 0) + 2 | 0) << 4 | 0 | 64 | 0 | (((((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $431 | 0) >> $431 | 0) + 2 | 0) << 2 | 0) | 0 | ((((HEAPU8[($5 + 17 | 0) >> 0] | 0) << $440 | 0) >> $440 | 0) + 2 | 0) | 0;
           $446 = HEAP32[($5 + 300 | 0) >> 2] | 0;
           $447 = HEAP32[($5 + 324 | 0) >> 2] | 0;
           HEAP32[($5 + 324 | 0) >> 2] = $447 + 1 | 0;
           HEAP8[($446 + $447 | 0) >> 0] = $445;
           break label$17;
          }
          $452 = 24;
          label$19 : {
           label$20 : {
            if (!((((HEAPU8[($5 + 16 | 0) >> 0] | 0) << $452 | 0) >> $452 | 0 | 0) > (-9 | 0) & 1 | 0)) {
             break label$20
            }
            $462 = 24;
            if (!((((HEAPU8[($5 + 16 | 0) >> 0] | 0) << $462 | 0) >> $462 | 0 | 0) < (8 | 0) & 1 | 0)) {
             break label$20
            }
            $472 = 24;
            if (!((((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $472 | 0) >> $472 | 0 | 0) > (-33 | 0) & 1 | 0)) {
             break label$20
            }
            $482 = 24;
            if (!((((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $482 | 0) >> $482 | 0 | 0) < (32 | 0) & 1 | 0)) {
             break label$20
            }
            $492 = 24;
            if (!((((HEAPU8[($5 + 15 | 0) >> 0] | 0) << $492 | 0) >> $492 | 0 | 0) > (-9 | 0) & 1 | 0)) {
             break label$20
            }
            $502 = 24;
            if (!((((HEAPU8[($5 + 15 | 0) >> 0] | 0) << $502 | 0) >> $502 | 0 | 0) < (8 | 0) & 1 | 0)) {
             break label$20
            }
            $512 = 24;
            $518 = (((HEAPU8[($5 + 18 | 0) >> 0] | 0) << $512 | 0) >> $512 | 0) + 32 | 0 | 128 | 0;
            $519 = HEAP32[($5 + 300 | 0) >> 2] | 0;
            $520 = HEAP32[($5 + 324 | 0) >> 2] | 0;
            HEAP32[($5 + 324 | 0) >> 2] = $520 + 1 | 0;
            HEAP8[($519 + $520 | 0) >> 0] = $518;
            $525 = 24;
            $533 = 24;
            $538 = ((((HEAPU8[($5 + 16 | 0) >> 0] | 0) << $525 | 0) >> $525 | 0) + 8 | 0) << 4 | 0 | ((((HEAPU8[($5 + 15 | 0) >> 0] | 0) << $533 | 0) >> $533 | 0) + 8 | 0) | 0;
            $539 = HEAP32[($5 + 300 | 0) >> 2] | 0;
            $540 = HEAP32[($5 + 324 | 0) >> 2] | 0;
            HEAP32[($5 + 324 | 0) >> 2] = $540 + 1 | 0;
            HEAP8[($539 + $540 | 0) >> 0] = $538;
            break label$19;
           }
           $544 = HEAP32[($5 + 300 | 0) >> 2] | 0;
           $545 = HEAP32[($5 + 324 | 0) >> 2] | 0;
           HEAP32[($5 + 324 | 0) >> 2] = $545 + 1 | 0;
           HEAP8[($544 + $545 | 0) >> 0] = 254;
           $550 = HEAPU8[($5 + 28 | 0) >> 0] | 0;
           $551 = HEAP32[($5 + 300 | 0) >> 2] | 0;
           $552 = HEAP32[($5 + 324 | 0) >> 2] | 0;
           HEAP32[($5 + 324 | 0) >> 2] = $552 + 1 | 0;
           HEAP8[($551 + $552 | 0) >> 0] = $550;
           $556 = HEAPU8[($5 + 29 | 0) >> 0] | 0;
           $557 = HEAP32[($5 + 300 | 0) >> 2] | 0;
           $558 = HEAP32[($5 + 324 | 0) >> 2] | 0;
           HEAP32[($5 + 324 | 0) >> 2] = $558 + 1 | 0;
           HEAP8[($557 + $558 | 0) >> 0] = $556;
           $562 = HEAPU8[($5 + 30 | 0) >> 0] | 0;
           $563 = HEAP32[($5 + 300 | 0) >> 2] | 0;
           $564 = HEAP32[($5 + 324 | 0) >> 2] | 0;
           HEAP32[($5 + 324 | 0) >> 2] = $564 + 1 | 0;
           HEAP8[($563 + $564 | 0) >> 0] = $562;
          }
         }
         break label$15;
        }
        $568 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $569 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $569 + 1 | 0;
        HEAP8[($568 + $569 | 0) >> 0] = 255;
        $574 = HEAPU8[($5 + 28 | 0) >> 0] | 0;
        $575 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $576 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $576 + 1 | 0;
        HEAP8[($575 + $576 | 0) >> 0] = $574;
        $580 = HEAPU8[($5 + 29 | 0) >> 0] | 0;
        $581 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $582 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $582 + 1 | 0;
        HEAP8[($581 + $582 | 0) >> 0] = $580;
        $586 = HEAPU8[($5 + 30 | 0) >> 0] | 0;
        $587 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $588 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $588 + 1 | 0;
        HEAP8[($587 + $588 | 0) >> 0] = $586;
        $592 = HEAPU8[($5 + 31 | 0) >> 0] | 0;
        $593 = HEAP32[($5 + 300 | 0) >> 2] | 0;
        $594 = HEAP32[($5 + 324 | 0) >> 2] | 0;
        HEAP32[($5 + 324 | 0) >> 2] = $594 + 1 | 0;
        HEAP8[($593 + $594 | 0) >> 0] = $592;
       }
      }
     }
     HEAP32[($5 + 24 | 0) >> 2] = HEAP32[($5 + 28 | 0) >> 2] | 0;
     HEAP32[($5 + 308 | 0) >> 2] = (HEAP32[($5 + 308 | 0) >> 2] | 0) + (HEAP32[($5 + 304 | 0) >> 2] | 0) | 0;
     continue label$6;
    };
   }
   HEAP32[($5 + 332 | 0) >> 2] = 0;
   label$21 : {
    label$22 : while (1) {
     if (!((HEAP32[($5 + 332 | 0) >> 2] | 0 | 0) < (8 | 0) & 1 | 0)) {
      break label$21
     }
     $611 = HEAPU8[((HEAP32[($5 + 332 | 0) >> 2] | 0) + 79184 | 0) >> 0] | 0;
     $612 = HEAP32[($5 + 300 | 0) >> 2] | 0;
     $613 = HEAP32[($5 + 324 | 0) >> 2] | 0;
     HEAP32[($5 + 324 | 0) >> 2] = $613 + 1 | 0;
     HEAP8[($612 + $613 | 0) >> 0] = $611;
     HEAP32[($5 + 332 | 0) >> 2] = (HEAP32[($5 + 332 | 0) >> 2] | 0) + 1 | 0;
     continue label$22;
    };
   }
   HEAP32[(HEAP32[($5 + 336 | 0) >> 2] | 0) >> 2] = HEAP32[($5 + 324 | 0) >> 2] | 0;
   HEAP32[($5 + 348 | 0) >> 2] = HEAP32[($5 + 300 | 0) >> 2] | 0;
  }
  $623 = HEAP32[($5 + 348 | 0) >> 2] | 0;
  __stack_pointer = $5 + 352 | 0;
  return $623 | 0;
 }
 
 function qoi_write_32($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $12 = 0, $13 = 0, $23 = 0, $24 = 0, $34 = 0, $35 = 0, $43 = 0, $44 = 0, $10 = 0, $11 = 0, $21 = 0, $22 = 0, $32 = 0, $33 = 0, $41 = 0, $42 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  $10 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -16777216 | 0) >>> 24 | 0;
  $11 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  $12 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  HEAP32[$12 >> 2] = $13 + 1 | 0;
  HEAP8[($11 + $13 | 0) >> 0] = $10;
  $21 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & 16711680 | 0) >>> 16 | 0;
  $22 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  $23 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $24 = HEAP32[$23 >> 2] | 0;
  HEAP32[$23 >> 2] = $24 + 1 | 0;
  HEAP8[($22 + $24 | 0) >> 0] = $21;
  $32 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & 65280 | 0) >>> 8 | 0;
  $33 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  $34 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $35 = HEAP32[$34 >> 2] | 0;
  HEAP32[$34 >> 2] = $35 + 1 | 0;
  HEAP8[($33 + $35 | 0) >> 0] = $32;
  $41 = (HEAP32[($5 + 4 | 0) >> 2] | 0) & 255 | 0;
  $42 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  $43 = HEAP32[($5 + 8 | 0) >> 2] | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  HEAP32[$43 >> 2] = $44 + 1 | 0;
  HEAP8[($42 + $44 | 0) >> 0] = $41;
  return;
 }
 
 function qoi_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $39 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 24 | 0) >> 2] = $0;
  HEAP32[($5 + 20 | 0) >> 2] = $1;
  HEAP32[($5 + 16 | 0) >> 2] = $2;
  HEAP32[($5 + 12 | 0) >> 2] = fopen(HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, 71634 | 0) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5 + 4 | 0) >> 2] = qoi_encode(HEAP32[($5 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5 + 16 | 0) >> 2] | 0 | 0, $5 + 8 | 0 | 0) | 0;
   label$3 : {
    if ((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    fclose(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   fwrite(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($5 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
   fclose(HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) | 0;
   dlfree(HEAP32[($5 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($5 + 28 | 0) >> 2] = HEAP32[($5 + 8 | 0) >> 2] | 0;
  }
  $39 = HEAP32[($5 + 28 | 0) >> 2] | 0;
  __stack_pointer = $5 + 32 | 0;
  return $39 | 0;
 }
 
 function stbi_zlib_compress($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $6 = 0, $53 = 0, $57 = 0, $58 = 0, $88 = 0, $92 = 0, $93 = 0, $182 = 0, $356 = 0, $357 = 0, $395 = 0, $565 = 0, $566 = 0, $599 = 0, $600 = 0, $624 = 0, $1021 = 0, $1034 = 0, $1035 = 0, $1064 = 0, $1071 = 0, $1072 = 0, $1101 = 0, $1110 = 0, $1111 = 0, $1140 = 0, $1149 = 0, $1150 = 0, $1179 = 0, $1190 = 0, $1191 = 0, $1208 = 0, $1286 = 0, $1295 = 0, $1296 = 0, $1325 = 0, $1332 = 0, $1333 = 0, $1362 = 0, $1371 = 0, $1372 = 0, $1401 = 0, $1408 = 0, $1409 = 0, $54 = 0, $89 = 0, $342 = 0, $348 = 0, $517 = 0, $550 = 0, $584 = 0, $609 = 0, $688 = 0, $766 = 0, $793 = 0, $840 = 0, $867 = 0, $888 = 0, $1030 = 0, $1031 = 0, $1067 = 0, $1068 = 0, $1106 = 0, $1107 = 0, $1145 = 0, $1146 = 0, $1186 = 0, $1187 = 0, $1291 = 0, $1292 = 0, $1328 = 0, $1329 = 0, $1367 = 0, $1368 = 0, $1404 = 0, $1405 = 0, $1427 = 0;
  $6 = __stack_pointer - 96 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 88 | 0) >> 2] = $0;
  HEAP32[($6 + 84 | 0) >> 2] = $1;
  HEAP32[($6 + 80 | 0) >> 2] = $2;
  HEAP32[($6 + 76 | 0) >> 2] = $3;
  HEAP32[($6 + 72 | 0) >> 2] = 0;
  HEAP32[($6 + 60 | 0) >> 2] = 0;
  HEAP32[($6 + 56 | 0) >> 2] = 0;
  HEAP32[($6 + 52 | 0) >> 2] = dlmalloc(65536 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6 + 52 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6 + 92 | 0) >> 2] = 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($6 + 76 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($6 + 76 | 0) >> 2] = 5;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$6
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
     }
     $53 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $53 | 0, $53 | 0) | 0;
     break label$4;
    }
   }
   $54 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $57 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $58 = HEAP32[($57 + 4 | 0) >> 2] | 0;
   HEAP32[($57 + 4 | 0) >> 2] = $58 + 1 | 0;
   HEAP8[($54 + $58 | 0) >> 0] = 120;
   label$7 : {
    label$8 : {
     label$9 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$9
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
     }
     $88 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $88 | 0, $88 | 0) | 0;
     break label$7;
    }
   }
   $89 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $92 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $93 = HEAP32[($92 + 4 | 0) >> 2] | 0;
   HEAP32[($92 + 4 | 0) >> 2] = $93 + 1 | 0;
   HEAP8[($89 + $93 | 0) >> 0] = 94;
   HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | (1 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
   HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | (1 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 2 | 0;
   HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
   HEAP32[($6 + 68 | 0) >> 2] = 0;
   label$10 : {
    label$11 : while (1) {
     if (!((HEAP32[($6 + 68 | 0) >> 2] | 0 | 0) < (16384 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
     HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$11;
    };
   }
   HEAP32[($6 + 68 | 0) >> 2] = 0;
   label$12 : {
    label$13 : while (1) {
     if (!((HEAP32[($6 + 68 | 0) >> 2] | 0 | 0) < ((HEAP32[($6 + 84 | 0) >> 2] | 0) - 3 | 0 | 0) & 1 | 0)) {
      break label$12
     }
     HEAP32[($6 + 48 | 0) >> 2] = (stbiw__zhash((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0 | 0) | 0) & 16383 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = 3;
     HEAP32[($6 + 40 | 0) >> 2] = 0;
     HEAP32[($6 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       if (!((HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$15
       }
       $182 = HEAP32[(((HEAP32[($6 + 36 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0;
       break label$14;
      }
      $182 = 0;
     }
     HEAP32[($6 + 32 | 0) >> 2] = $182;
     HEAP32[($6 + 64 | 0) >> 2] = 0;
     label$16 : {
      label$17 : while (1) {
       if (!((HEAP32[($6 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       label$18 : {
        if (!(((HEAP32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) - (HEAP32[($6 + 88 | 0) >> 2] | 0) | 0 | 0) > ((HEAP32[($6 + 68 | 0) >> 2] | 0) - 32768 | 0 | 0) & 1 | 0)) {
         break label$18
        }
        HEAP32[($6 + 28 | 0) >> 2] = stbiw__zlib_countm(HEAP32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, (HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($6 + 84 | 0) >> 2] | 0) - (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0 | 0) | 0;
        label$19 : {
         if (!((HEAP32[($6 + 28 | 0) >> 2] | 0 | 0) >= (HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$19
         }
         HEAP32[($6 + 44 | 0) >> 2] = HEAP32[($6 + 28 | 0) >> 2] | 0;
         HEAP32[($6 + 40 | 0) >> 2] = HEAP32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        }
       }
       HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0;
       continue label$17;
      };
     }
     label$20 : {
      if (!((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$20
      }
      if (!((HEAP32[(((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0 | 0) == ((HEAP32[($6 + 76 | 0) >> 2] | 0) << 1 | 0 | 0) & 1 | 0)) {
       break label$20
      }
      memmove(HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + ((HEAP32[($6 + 76 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, (HEAP32[($6 + 76 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
      HEAP32[(((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] = HEAP32[($6 + 76 | 0) >> 2] | 0;
     }
     label$21 : {
      label$22 : {
       label$23 : {
        if ((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
         break label$23
        }
        if (!(((HEAP32[(((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$22
        }
       }
       stbiw__sbgrowf((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0 | 0, 1 | 0, 4 | 0) | 0;
       break label$21;
      }
     }
     $342 = (HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0;
     $348 = HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     $356 = (HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0;
     $357 = HEAP32[($356 + 4 | 0) >> 2] | 0;
     HEAP32[($356 + 4 | 0) >> 2] = $357 + 1 | 0;
     HEAP32[($348 + ($357 << 2 | 0) | 0) >> 2] = $342;
     label$24 : {
      if (!((HEAP32[($6 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$24
      }
      HEAP32[($6 + 48 | 0) >> 2] = (stbiw__zhash(((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) + 1 | 0 | 0) | 0) & 16383 | 0;
      HEAP32[($6 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 48 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        if (!((HEAP32[($6 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$26
        }
        $395 = HEAP32[(((HEAP32[($6 + 36 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0;
        break label$25;
       }
       $395 = 0;
      }
      HEAP32[($6 + 32 | 0) >> 2] = $395;
      HEAP32[($6 + 64 | 0) >> 2] = 0;
      label$27 : {
       label$28 : while (1) {
        if (!((HEAP32[($6 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$27
        }
        label$29 : {
         if (!(((HEAP32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) - (HEAP32[($6 + 88 | 0) >> 2] | 0) | 0 | 0) > ((HEAP32[($6 + 68 | 0) >> 2] | 0) - 32767 | 0 | 0) & 1 | 0)) {
          break label$29
         }
         HEAP32[($6 + 24 | 0) >> 2] = stbiw__zlib_countm(HEAP32[((HEAP32[($6 + 36 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, ((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) + 1 | 0 | 0, ((HEAP32[($6 + 84 | 0) >> 2] | 0) - (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) - 1 | 0 | 0) | 0;
         label$30 : {
          if (!((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) > (HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$30
          }
          HEAP32[($6 + 40 | 0) >> 2] = 0;
          break label$27;
         }
        }
        HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0;
        continue label$28;
       };
      }
     }
     label$31 : {
      label$32 : {
       if (!((HEAP32[($6 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$32
       }
       HEAP32[($6 + 20 | 0) >> 2] = ((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) - (HEAP32[($6 + 40 | 0) >> 2] | 0) | 0;
       label$33 : {
        label$34 : {
         if (!((HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) <= (32767 | 0) & 1 | 0)) {
          break label$34
         }
         if ((HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) <= (258 | 0) & 1 | 0) {
          break label$33
         }
        }
        __assert_fail(73390 | 0, 69402 | 0, 959 | 0, 67495 | 0);
        wasm2js_trap();
       }
       HEAP32[($6 + 64 | 0) >> 2] = 0;
       label$35 : {
        label$36 : while (1) {
         if (!((HEAP32[($6 + 44 | 0) >> 2] | 0 | 0) > (((HEAPU16[(85264 + (((HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) - 1 | 0 | 0) & 1 | 0)) {
          break label$35
         }
         HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0;
         continue label$36;
        };
       }
       label$37 : {
        label$38 : {
         if (!(((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0 | 0) <= (143 | 0) & 1 | 0)) {
          break label$38
         }
         $517 = stbiw__zlib_bitrev(((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0) + 48 | 0 | 0, 8 | 0) | 0;
         HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($517 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
         HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 8 | 0;
         HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
         break label$37;
        }
        label$39 : {
         label$40 : {
          if (!(((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0 | 0) <= (255 | 0) & 1 | 0)) {
           break label$40
          }
          $550 = stbiw__zlib_bitrev((((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0) + 400 | 0) - 144 | 0 | 0, 9 | 0) | 0;
          HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($550 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
          HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 9 | 0;
          $565 = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
          HEAP32[($6 + 56 | 0) >> 2] = $565;
          $566 = $565;
          break label$39;
         }
         label$41 : {
          label$42 : {
           if (!(((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0 | 0) <= (279 | 0) & 1 | 0)) {
            break label$42
           }
           $584 = stbiw__zlib_bitrev((((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0) + 0 | 0) - 256 | 0 | 0, 7 | 0) | 0;
           HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($584 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
           HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 7 | 0;
           $599 = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
           HEAP32[($6 + 56 | 0) >> 2] = $599;
           $600 = $599;
           break label$41;
          }
          $609 = stbiw__zlib_bitrev((((HEAP32[($6 + 64 | 0) >> 2] | 0) + 257 | 0) + 192 | 0) - 280 | 0 | 0, 8 | 0) | 0;
          HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($609 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
          HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 8 | 0;
          $624 = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
          HEAP32[($6 + 56 | 0) >> 2] = $624;
          $600 = $624;
         }
         $566 = $600;
        }
       }
       label$43 : {
        if (!(((HEAPU8[((HEAP32[($6 + 64 | 0) >> 2] | 0) + 85328 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
         break label$43
        }
        HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | (((HEAP32[($6 + 44 | 0) >> 2] | 0) - ((HEAPU16[(85264 + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0) << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($6 + 64 | 0) >> 2] | 0) + 85328 | 0) >> 0] | 0) & 255 | 0) | 0;
        HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
       }
       HEAP32[($6 + 64 | 0) >> 2] = 0;
       label$44 : {
        label$45 : while (1) {
         if (!((HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) > (((HEAPU16[(85360 + (((HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) - 1 | 0 | 0) & 1 | 0)) {
          break label$44
         }
         HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + 1 | 0;
         continue label$45;
        };
       }
       $688 = stbiw__zlib_bitrev(HEAP32[($6 + 64 | 0) >> 2] | 0 | 0, 5 | 0) | 0;
       HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($688 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
       HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 5 | 0;
       HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
       label$46 : {
        if (!(((HEAPU8[((HEAP32[($6 + 64 | 0) >> 2] | 0) + 85424 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
         break label$46
        }
        HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | (((HEAP32[($6 + 20 | 0) >> 2] | 0) - ((HEAPU16[(85360 + ((HEAP32[($6 + 64 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) & 65535 | 0) | 0) << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($6 + 64 | 0) >> 2] | 0) + 85424 | 0) >> 0] | 0) & 255 | 0) | 0;
        HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
       }
       HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + (HEAP32[($6 + 44 | 0) >> 2] | 0) | 0;
       break label$31;
      }
      label$47 : {
       label$48 : {
        if (!(((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) <= (143 | 0) & 1 | 0)) {
         break label$48
        }
        $766 = stbiw__zlib_bitrev(((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + 48 | 0 | 0, 8 | 0) | 0;
        HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($766 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
        HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 8 | 0;
        HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
        break label$47;
       }
       $793 = stbiw__zlib_bitrev((((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + 400 | 0) - 144 | 0 | 0, 9 | 0) | 0;
       HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($793 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
       HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 9 | 0;
       HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
      }
      HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + 1 | 0;
     }
     continue label$13;
    };
   }
   label$49 : {
    label$50 : while (1) {
     if (!((HEAP32[($6 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$49
     }
     label$51 : {
      label$52 : {
       if (!(((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) <= (143 | 0) & 1 | 0)) {
        break label$52
       }
       $840 = stbiw__zlib_bitrev(((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + 48 | 0 | 0, 8 | 0) | 0;
       HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($840 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
       HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 8 | 0;
       HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
       break label$51;
      }
      $867 = stbiw__zlib_bitrev((((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) + 400 | 0) - 144 | 0 | 0, 9 | 0) | 0;
      HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($867 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
      HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 9 | 0;
      HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
     }
     HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$50;
    };
   }
   $888 = stbiw__zlib_bitrev(0 | 0, 7 | 0) | 0;
   HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | ($888 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
   HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 7 | 0;
   HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
   label$53 : {
    label$54 : while (1) {
     if (!(HEAP32[($6 + 60 | 0) >> 2] | 0)) {
      break label$53
     }
     HEAP32[($6 + 72 | 0) >> 2] = HEAP32[($6 + 72 | 0) >> 2] | 0 | (0 << (HEAP32[($6 + 60 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($6 + 60 | 0) >> 2] = (HEAP32[($6 + 60 | 0) >> 2] | 0) + 1 | 0;
     HEAP32[($6 + 56 | 0) >> 2] = stbiw__zlib_flushf(HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, $6 + 72 | 0 | 0, $6 + 60 | 0 | 0) | 0;
     continue label$54;
    };
   }
   HEAP32[($6 + 68 | 0) >> 2] = 0;
   label$55 : {
    label$56 : while (1) {
     if (!((HEAP32[($6 + 68 | 0) >> 2] | 0 | 0) < (16384 | 0) & 1 | 0)) {
      break label$55
     }
     label$57 : {
      label$58 : {
       if (!((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$58
       }
       dlfree((HEAP32[((HEAP32[($6 + 52 | 0) >> 2] | 0) + ((HEAP32[($6 + 68 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + -8 | 0 | 0);
       break label$57;
      }
     }
     HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + 1 | 0;
     continue label$56;
    };
   }
   dlfree(HEAP32[($6 + 52 | 0) >> 2] | 0 | 0);
   label$59 : {
    if (!((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0 | 0) > (((HEAP32[($6 + 84 | 0) >> 2] | 0) + 2 | 0) + Math_imul(((HEAP32[($6 + 84 | 0) >> 2] | 0) + 32766 | 0 | 0) / (32767 | 0) | 0, 5) | 0 | 0) & 1 | 0)) {
     break label$59
    }
    HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] = 2;
    HEAP32[($6 + 64 | 0) >> 2] = 0;
    label$60 : {
     label$61 : while (1) {
      if (!((HEAP32[($6 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$60
      }
      HEAP32[($6 + 16 | 0) >> 2] = (HEAP32[($6 + 84 | 0) >> 2] | 0) - (HEAP32[($6 + 64 | 0) >> 2] | 0) | 0;
      label$62 : {
       if (!((HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) > (32767 | 0) & 1 | 0)) {
        break label$62
       }
       HEAP32[($6 + 16 | 0) >> 2] = 32767;
      }
      label$63 : {
       label$64 : {
        label$65 : {
         if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
          break label$65
         }
         if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$64
         }
        }
        $1021 = 1;
        stbiw__sbgrowf($6 + 56 | 0 | 0, $1021 | 0, $1021 | 0) | 0;
        break label$63;
       }
      }
      $1030 = ((HEAP32[($6 + 84 | 0) >> 2] | 0) - (HEAP32[($6 + 64 | 0) >> 2] | 0) | 0 | 0) == (HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) & 1 | 0;
      $1031 = HEAP32[($6 + 56 | 0) >> 2] | 0;
      $1034 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      $1035 = HEAP32[($1034 + 4 | 0) >> 2] | 0;
      HEAP32[($1034 + 4 | 0) >> 2] = $1035 + 1 | 0;
      HEAP8[($1031 + $1035 | 0) >> 0] = $1030;
      label$66 : {
       label$67 : {
        label$68 : {
         if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
          break label$68
         }
         if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$67
         }
        }
        $1064 = 1;
        stbiw__sbgrowf($6 + 56 | 0 | 0, $1064 | 0, $1064 | 0) | 0;
        break label$66;
       }
      }
      $1067 = (HEAP32[($6 + 16 | 0) >> 2] | 0) & 255 | 0;
      $1068 = HEAP32[($6 + 56 | 0) >> 2] | 0;
      $1071 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      $1072 = HEAP32[($1071 + 4 | 0) >> 2] | 0;
      HEAP32[($1071 + 4 | 0) >> 2] = $1072 + 1 | 0;
      HEAP8[($1068 + $1072 | 0) >> 0] = $1067;
      label$69 : {
       label$70 : {
        label$71 : {
         if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
          break label$71
         }
         if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$70
         }
        }
        $1101 = 1;
        stbiw__sbgrowf($6 + 56 | 0 | 0, $1101 | 0, $1101 | 0) | 0;
        break label$69;
       }
      }
      $1106 = ((HEAP32[($6 + 16 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
      $1107 = HEAP32[($6 + 56 | 0) >> 2] | 0;
      $1110 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      $1111 = HEAP32[($1110 + 4 | 0) >> 2] | 0;
      HEAP32[($1110 + 4 | 0) >> 2] = $1111 + 1 | 0;
      HEAP8[($1107 + $1111 | 0) >> 0] = $1106;
      label$72 : {
       label$73 : {
        label$74 : {
         if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
          break label$74
         }
         if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$73
         }
        }
        $1140 = 1;
        stbiw__sbgrowf($6 + 56 | 0 | 0, $1140 | 0, $1140 | 0) | 0;
        break label$72;
       }
      }
      $1145 = ((HEAP32[($6 + 16 | 0) >> 2] | 0) ^ -1 | 0) & 255 | 0;
      $1146 = HEAP32[($6 + 56 | 0) >> 2] | 0;
      $1149 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      $1150 = HEAP32[($1149 + 4 | 0) >> 2] | 0;
      HEAP32[($1149 + 4 | 0) >> 2] = $1150 + 1 | 0;
      HEAP8[($1146 + $1150 | 0) >> 0] = $1145;
      label$75 : {
       label$76 : {
        label$77 : {
         if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
          break label$77
         }
         if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$76
         }
        }
        $1179 = 1;
        stbiw__sbgrowf($6 + 56 | 0 | 0, $1179 | 0, $1179 | 0) | 0;
        break label$75;
       }
      }
      $1186 = (((HEAP32[($6 + 16 | 0) >> 2] | 0) ^ -1 | 0) >> 8 | 0) & 255 | 0;
      $1187 = HEAP32[($6 + 56 | 0) >> 2] | 0;
      $1190 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      $1191 = HEAP32[($1190 + 4 | 0) >> 2] | 0;
      HEAP32[($1190 + 4 | 0) >> 2] = $1191 + 1 | 0;
      HEAP8[($1187 + $1191 | 0) >> 0] = $1186;
      __memcpy((HEAP32[($6 + 56 | 0) >> 2] | 0) + (HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) | 0 | 0, (HEAP32[($6 + 88 | 0) >> 2] | 0) + (HEAP32[($6 + 64 | 0) >> 2] | 0) | 0 | 0, HEAP32[($6 + 16 | 0) >> 2] | 0 | 0) | 0;
      $1208 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
      HEAP32[($1208 + 4 | 0) >> 2] = (HEAP32[($1208 + 4 | 0) >> 2] | 0) + (HEAP32[($6 + 16 | 0) >> 2] | 0) | 0;
      HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + (HEAP32[($6 + 16 | 0) >> 2] | 0) | 0;
      continue label$61;
     };
    }
   }
   HEAP32[($6 + 12 | 0) >> 2] = 1;
   HEAP32[($6 + 8 | 0) >> 2] = 0;
   HEAP32[($6 + 4 | 0) >> 2] = (HEAP32[($6 + 84 | 0) >> 2] | 0 | 0) % (5552 | 0) | 0;
   HEAP32[($6 + 64 | 0) >> 2] = 0;
   label$78 : {
    label$79 : while (1) {
     if (!((HEAP32[($6 + 64 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 84 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$78
     }
     HEAP32[($6 + 68 | 0) >> 2] = 0;
     label$80 : {
      label$81 : while (1) {
       if (!((HEAP32[($6 + 68 | 0) >> 2] | 0 | 0) < (HEAP32[($6 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$80
       }
       HEAP32[($6 + 12 | 0) >> 2] = (HEAP32[($6 + 12 | 0) >> 2] | 0) + ((HEAPU8[((HEAP32[($6 + 88 | 0) >> 2] | 0) + ((HEAP32[($6 + 64 | 0) >> 2] | 0) + (HEAP32[($6 + 68 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
       HEAP32[($6 + 8 | 0) >> 2] = (HEAP32[($6 + 8 | 0) >> 2] | 0) + (HEAP32[($6 + 12 | 0) >> 2] | 0) | 0;
       HEAP32[($6 + 68 | 0) >> 2] = (HEAP32[($6 + 68 | 0) >> 2] | 0) + 1 | 0;
       continue label$81;
      };
     }
     HEAP32[($6 + 12 | 0) >> 2] = ((HEAP32[($6 + 12 | 0) >> 2] | 0) >>> 0) % (65521 >>> 0) | 0;
     HEAP32[($6 + 8 | 0) >> 2] = ((HEAP32[($6 + 8 | 0) >> 2] | 0) >>> 0) % (65521 >>> 0) | 0;
     HEAP32[($6 + 64 | 0) >> 2] = (HEAP32[($6 + 64 | 0) >> 2] | 0) + (HEAP32[($6 + 4 | 0) >> 2] | 0) | 0;
     HEAP32[($6 + 4 | 0) >> 2] = 5552;
     continue label$79;
    };
   }
   label$82 : {
    label$83 : {
     label$84 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$84
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$83
      }
     }
     $1286 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $1286 | 0, $1286 | 0) | 0;
     break label$82;
    }
   }
   $1291 = ((HEAP32[($6 + 8 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0;
   $1292 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $1295 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $1296 = HEAP32[($1295 + 4 | 0) >> 2] | 0;
   HEAP32[($1295 + 4 | 0) >> 2] = $1296 + 1 | 0;
   HEAP8[($1292 + $1296 | 0) >> 0] = $1291;
   label$85 : {
    label$86 : {
     label$87 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$87
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$86
      }
     }
     $1325 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $1325 | 0, $1325 | 0) | 0;
     break label$85;
    }
   }
   $1328 = (HEAP32[($6 + 8 | 0) >> 2] | 0) & 255 | 0;
   $1329 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $1332 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $1333 = HEAP32[($1332 + 4 | 0) >> 2] | 0;
   HEAP32[($1332 + 4 | 0) >> 2] = $1333 + 1 | 0;
   HEAP8[($1329 + $1333 | 0) >> 0] = $1328;
   label$88 : {
    label$89 : {
     label$90 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$90
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$89
      }
     }
     $1362 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $1362 | 0, $1362 | 0) | 0;
     break label$88;
    }
   }
   $1367 = ((HEAP32[($6 + 12 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0;
   $1368 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $1371 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $1372 = HEAP32[($1371 + 4 | 0) >> 2] | 0;
   HEAP32[($1371 + 4 | 0) >> 2] = $1372 + 1 | 0;
   HEAP8[($1368 + $1372 | 0) >> 0] = $1367;
   label$91 : {
    label$92 : {
     label$93 : {
      if ((HEAP32[($6 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
       break label$93
      }
      if (!(((HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$92
      }
     }
     $1401 = 1;
     stbiw__sbgrowf($6 + 56 | 0 | 0, $1401 | 0, $1401 | 0) | 0;
     break label$91;
    }
   }
   $1404 = (HEAP32[($6 + 12 | 0) >> 2] | 0) & 255 | 0;
   $1405 = HEAP32[($6 + 56 | 0) >> 2] | 0;
   $1408 = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
   $1409 = HEAP32[($1408 + 4 | 0) >> 2] | 0;
   HEAP32[($1408 + 4 | 0) >> 2] = $1409 + 1 | 0;
   HEAP8[($1405 + $1409 | 0) >> 0] = $1404;
   HEAP32[(HEAP32[($6 + 80 | 0) >> 2] | 0) >> 2] = HEAP32[(((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0;
   memmove((HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0 | 0, HEAP32[($6 + 56 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($6 + 80 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($6 + 92 | 0) >> 2] = (HEAP32[($6 + 56 | 0) >> 2] | 0) + -8 | 0;
  }
  $1427 = HEAP32[($6 + 92 | 0) >> 2] | 0;
  __stack_pointer = $6 + 96 | 0;
  return $1427 | 0;
 }
 
 function stbiw__sbgrowf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $23 = 0, $40 = 0, $87 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    $23 = ((HEAP32[((HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0) + -8 | 0) >> 2] | 0) << 1 | 0) + (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   $23 = (HEAP32[($5 + 24 | 0) >> 2] | 0) + 1 | 0;
  }
  HEAP32[($5 + 16 | 0) >> 2] = $23;
  label$3 : {
   label$4 : {
    if (!((HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    $40 = (HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0) + -8 | 0;
    break label$3;
   }
   $40 = 0;
  }
  HEAP32[($5 + 12 | 0) >> 2] = dlrealloc($40 | 0, Math_imul(HEAP32[($5 + 20 | 0) >> 2] | 0, HEAP32[($5 + 16 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  label$5 : {
   if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
    break label$5
   }
   __assert_fail(68579 | 0, 69402 | 0, 830 | 0, 69663 | 0);
   wasm2js_trap();
  }
  label$6 : {
   if (!((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$6
   }
   label$7 : {
    if ((HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$7
    }
    HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
   }
   HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] = (HEAP32[($5 + 12 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[((HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0) + -8 | 0) >> 2] = HEAP32[($5 + 16 | 0) >> 2] | 0;
  }
  $87 = HEAP32[(HEAP32[($5 + 28 | 0) >> 2] | 0) >> 2] | 0;
  __stack_pointer = $5 + 32 | 0;
  return $87 | 0;
 }
 
 function stbiw__zlib_flushf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $39 = 0, $47 = 0, $48 = 0, $52 = 0, $56 = 0, $43 = 0, $44 = 0, $60 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[(HEAP32[($5 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (8 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      label$5 : {
       if ((HEAP32[($5 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
        break label$5
       }
       if (!(((HEAP32[(((HEAP32[($5 + 12 | 0) >> 2] | 0) + -8 | 0) + 4 | 0) >> 2] | 0) + 1 | 0 | 0) >= (HEAP32[((HEAP32[($5 + 12 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$4
       }
      }
      $39 = 1;
      stbiw__sbgrowf($5 + 12 | 0 | 0, $39 | 0, $39 | 0) | 0;
      break label$3;
     }
    }
    $43 = (HEAP32[(HEAP32[($5 + 8 | 0) >> 2] | 0) >> 2] | 0) & 255 | 0;
    $44 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    $47 = (HEAP32[($5 + 12 | 0) >> 2] | 0) + -8 | 0;
    $48 = HEAP32[($47 + 4 | 0) >> 2] | 0;
    HEAP32[($47 + 4 | 0) >> 2] = $48 + 1 | 0;
    HEAP8[($44 + $48 | 0) >> 0] = $43;
    $52 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    HEAP32[$52 >> 2] = (HEAP32[$52 >> 2] | 0) >>> 8 | 0;
    $56 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    HEAP32[$56 >> 2] = (HEAP32[$56 >> 2] | 0) - 8 | 0;
    continue label$2;
   };
  }
  $60 = HEAP32[($5 + 12 | 0) >> 2] | 0;
  __stack_pointer = $5 + 16 | 0;
  return $60 | 0;
 }
 
 function stbiw__zhash($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = (((HEAPU8[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0) & 255 | 0) << 8 | 0) | 0) + (((HEAPU8[((HEAP32[($3 + 12 | 0) >> 2] | 0) + 2 | 0) >> 0] | 0) & 255 | 0) << 16 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) ^ ((HEAP32[($3 + 8 | 0) >> 2] | 0) << 3 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) >>> 5 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) ^ ((HEAP32[($3 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) >>> 17 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) ^ ((HEAP32[($3 + 8 | 0) >> 2] | 0) << 25 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) >>> 6 | 0) | 0;
  return HEAP32[($3 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function stbiw__zlib_countm($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $15 = 0;
  $5 = __stack_pointer - 16 | 0;
  HEAP32[($5 + 12 | 0) >> 2] = $0;
  HEAP32[($5 + 8 | 0) >> 2] = $1;
  HEAP32[($5 + 4 | 0) >> 2] = $2;
  HEAP32[$5 >> 2] = 0;
  label$1 : while (1) {
   $15 = 0;
   label$2 : {
    if (!((HEAP32[$5 >> 2] | 0 | 0) < (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $15 = (HEAP32[$5 >> 2] | 0 | 0) < (258 | 0);
   }
   label$3 : {
    if (!($15 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     if (!(((HEAPU8[((HEAP32[($5 + 12 | 0) >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != ((HEAPU8[((HEAP32[($5 + 8 | 0) >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$4
     }
     break label$3;
    }
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    continue label$1;
   }
   break label$1;
  };
  return HEAP32[$5 >> 2] | 0 | 0;
 }
 
 function stbiw__zlib_bitrev($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    $6 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($4 + 8 | 0) >> 2] = $6 + -1 | 0;
    if (!$6) {
     break label$1
    }
    HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) << 1 | 0 | ((HEAP32[($4 + 12 | 0) >> 2] | 0) & 1 | 0) | 0;
    HEAP32[($4 + 12 | 0) >> 2] = (HEAP32[($4 + 12 | 0) >> 2] | 0) >> 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($4 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function stbi_write_png_to_mem($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $8 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $36 = 0, $11 = 0, $114 = 0, $244 = 0, $252 = 0, $260 = 0, $268 = 0, $327 = 0, $341 = 0, $344 = 0, $348 = 0, $352 = 0, $387 = 0, $395 = 0, $403 = 0, $411 = 0, $444 = 0, $452 = 0, $460 = 0, $468 = 0, $534 = 0, $538 = 0, $542 = 0, $117 = 0, $1017 = 0, $340 = 0, $496 = 0;
  $8 = __stack_pointer - 128 | 0;
  __stack_pointer = $8;
  HEAP32[($8 + 120 | 0) >> 2] = $0;
  HEAP32[($8 + 116 | 0) >> 2] = $1;
  HEAP32[($8 + 112 | 0) >> 2] = $2;
  HEAP32[($8 + 108 | 0) >> 2] = $3;
  HEAP32[($8 + 104 | 0) >> 2] = $4;
  HEAP32[($8 + 100 | 0) >> 2] = $5;
  HEAP32[($8 + 96 | 0) >> 2] = HEAP32[(0 + 85248 | 0) >> 2] | 0;
  $11 = 0;
  HEAP32[($8 + 80 | 0) >> 2] = HEAP32[($11 + 79216 | 0) >> 2] | 0;
  i64toi32_i32$2 = $11;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79208 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79212 | 0) >> 2] | 0;
  $534 = i64toi32_i32$0;
  i64toi32_i32$0 = $8;
  HEAP32[($8 + 72 | 0) >> 2] = $534;
  HEAP32[($8 + 76 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 79200 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 79204 | 0) >> 2] | 0;
  $538 = i64toi32_i32$1;
  i64toi32_i32$1 = $8;
  HEAP32[($8 + 64 | 0) >> 2] = $538;
  HEAP32[($8 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 79220 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 79221 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 79222 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 79223 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 79224 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 79225 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 79226 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 79227 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
  $542 = i64toi32_i32$0;
  i64toi32_i32$0 = $8;
  HEAP32[($8 + 56 | 0) >> 2] = $542;
  HEAP32[($8 + 60 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   if (HEAP32[($8 + 116 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($8 + 116 | 0) >> 2] = Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0);
  }
  label$2 : {
   if (!((HEAP32[($8 + 96 | 0) >> 2] | 0 | 0) >= (5 | 0) & 1 | 0)) {
    break label$2
   }
   HEAP32[($8 + 96 | 0) >> 2] = -1;
  }
  HEAP32[($8 + 44 | 0) >> 2] = dlmalloc(Math_imul(Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) + 1 | 0, HEAP32[($8 + 108 | 0) >> 2] | 0) | 0) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($8 + 44 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($8 + 124 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($8 + 36 | 0) >> 2] = dlmalloc(Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) | 0) | 0;
   label$5 : {
    if ((HEAP32[($8 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$5
    }
    dlfree(HEAP32[($8 + 44 | 0) >> 2] | 0 | 0);
    HEAP32[($8 + 124 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($8 + 32 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($8 + 32 | 0) >> 2] | 0 | 0) < (HEAP32[($8 + 108 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     label$8 : {
      label$9 : {
       if (!((HEAP32[($8 + 96 | 0) >> 2] | 0 | 0) > (-1 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($8 + 24 | 0) >> 2] = HEAP32[($8 + 96 | 0) >> 2] | 0;
       stbiw__encode_png_line(HEAP32[($8 + 120 | 0) >> 2] | 0 | 0, HEAP32[($8 + 116 | 0) >> 2] | 0 | 0, HEAP32[($8 + 112 | 0) >> 2] | 0 | 0, HEAP32[($8 + 108 | 0) >> 2] | 0 | 0, HEAP32[($8 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8 + 104 | 0) >> 2] | 0 | 0, HEAP32[($8 + 96 | 0) >> 2] | 0 | 0, HEAP32[($8 + 36 | 0) >> 2] | 0 | 0);
       break label$8;
      }
      HEAP32[($8 + 20 | 0) >> 2] = 0;
      HEAP32[($8 + 16 | 0) >> 2] = 2147483647;
      HEAP32[($8 + 24 | 0) >> 2] = 0;
      label$10 : {
       label$11 : while (1) {
        if (!((HEAP32[($8 + 24 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
         break label$10
        }
        stbiw__encode_png_line(HEAP32[($8 + 120 | 0) >> 2] | 0 | 0, HEAP32[($8 + 116 | 0) >> 2] | 0 | 0, HEAP32[($8 + 112 | 0) >> 2] | 0 | 0, HEAP32[($8 + 108 | 0) >> 2] | 0 | 0, HEAP32[($8 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8 + 104 | 0) >> 2] | 0 | 0, HEAP32[($8 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8 + 36 | 0) >> 2] | 0 | 0);
        HEAP32[($8 + 12 | 0) >> 2] = 0;
        HEAP32[($8 + 8 | 0) >> 2] = 0;
        label$12 : {
         label$13 : while (1) {
          if (!((HEAP32[($8 + 8 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) | 0) & 1 | 0)) {
           break label$12
          }
          $114 = 24;
          $117 = abs(((HEAPU8[((HEAP32[($8 + 36 | 0) >> 2] | 0) + (HEAP32[($8 + 8 | 0) >> 2] | 0) | 0) >> 0] | 0) << $114 | 0) >> $114 | 0 | 0) | 0;
          HEAP32[($8 + 12 | 0) >> 2] = (HEAP32[($8 + 12 | 0) >> 2] | 0) + $117 | 0;
          HEAP32[($8 + 8 | 0) >> 2] = (HEAP32[($8 + 8 | 0) >> 2] | 0) + 1 | 0;
          continue label$13;
         };
        }
        label$14 : {
         if (!((HEAP32[($8 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($8 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$14
         }
         HEAP32[($8 + 16 | 0) >> 2] = HEAP32[($8 + 12 | 0) >> 2] | 0;
         HEAP32[($8 + 20 | 0) >> 2] = HEAP32[($8 + 24 | 0) >> 2] | 0;
        }
        HEAP32[($8 + 24 | 0) >> 2] = (HEAP32[($8 + 24 | 0) >> 2] | 0) + 1 | 0;
        continue label$11;
       };
      }
      label$15 : {
       if (!((HEAP32[($8 + 24 | 0) >> 2] | 0 | 0) != (HEAP32[($8 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       stbiw__encode_png_line(HEAP32[($8 + 120 | 0) >> 2] | 0 | 0, HEAP32[($8 + 116 | 0) >> 2] | 0 | 0, HEAP32[($8 + 112 | 0) >> 2] | 0 | 0, HEAP32[($8 + 108 | 0) >> 2] | 0 | 0, HEAP32[($8 + 32 | 0) >> 2] | 0 | 0, HEAP32[($8 + 104 | 0) >> 2] | 0 | 0, HEAP32[($8 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8 + 36 | 0) >> 2] | 0 | 0);
       HEAP32[($8 + 24 | 0) >> 2] = HEAP32[($8 + 20 | 0) >> 2] | 0;
      }
     }
     HEAP8[((HEAP32[($8 + 44 | 0) >> 2] | 0) + Math_imul(HEAP32[($8 + 32 | 0) >> 2] | 0, Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] = HEAP32[($8 + 24 | 0) >> 2] | 0;
     memmove(((HEAP32[($8 + 44 | 0) >> 2] | 0) + Math_imul(HEAP32[($8 + 32 | 0) >> 2] | 0, Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) + 1 | 0) | 0) + 1 | 0 | 0, HEAP32[($8 + 36 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) | 0) | 0;
     HEAP32[($8 + 32 | 0) >> 2] = (HEAP32[($8 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   dlfree(HEAP32[($8 + 36 | 0) >> 2] | 0 | 0);
   HEAP32[($8 + 40 | 0) >> 2] = stbi_zlib_compress(HEAP32[($8 + 44 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($8 + 108 | 0) >> 2] | 0, Math_imul(HEAP32[($8 + 112 | 0) >> 2] | 0, HEAP32[($8 + 104 | 0) >> 2] | 0) + 1 | 0) | 0, $8 + 28 | 0 | 0, HEAP32[(0 + 85244 | 0) >> 2] | 0 | 0) | 0;
   dlfree(HEAP32[($8 + 44 | 0) >> 2] | 0 | 0);
   label$16 : {
    if ((HEAP32[($8 + 40 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$16
    }
    HEAP32[($8 + 124 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($8 + 52 | 0) >> 2] = dlmalloc(((HEAP32[($8 + 28 | 0) >> 2] | 0) + 45 | 0) + 12 | 0 | 0) | 0;
   label$17 : {
    if ((HEAP32[($8 + 52 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$17
    }
    HEAP32[($8 + 124 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[(HEAP32[($8 + 100 | 0) >> 2] | 0) >> 2] = ((HEAP32[($8 + 28 | 0) >> 2] | 0) + 45 | 0) + 12 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = HEAP32[($8 + 52 | 0) >> 2] | 0;
   i64toi32_i32$2 = $8 + 56 | 0;
   i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $1017 = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   $36 = $1017;
   HEAP8[i64toi32_i32$1 >> 0] = $36;
   HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $36 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $36 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $36 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 8 | 0;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = 13;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   $244 = 24;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = (((HEAPU8[(0 + 72147 | 0) >> 0] | 0) << $244 | 0) >> $244 | 0) & 255 | 0;
   $252 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = (((HEAPU8[(0 + 72148 | 0) >> 0] | 0) << $252 | 0) >> $252 | 0) & 255 | 0;
   $260 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = (((HEAPU8[(0 + 72149 | 0) >> 0] | 0) << $260 | 0) >> $260 | 0) & 255 | 0;
   $268 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (((HEAPU8[(0 + 72150 | 0) >> 0] | 0) << $268 | 0) >> $268 | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = ((HEAP32[($8 + 112 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = ((HEAP32[($8 + 112 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = ((HEAP32[($8 + 112 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (HEAP32[($8 + 112 | 0) >> 2] | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = ((HEAP32[($8 + 108 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = ((HEAP32[($8 + 108 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = ((HEAP32[($8 + 108 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (HEAP32[($8 + 108 | 0) >> 2] | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   $327 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   HEAP32[($8 + 48 | 0) >> 2] = $327 + 1 | 0;
   HEAP8[$327 >> 0] = 8;
   $340 = (HEAP32[(($8 + 64 | 0) + ((HEAP32[($8 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) & 255 | 0;
   $341 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   HEAP32[($8 + 48 | 0) >> 2] = $341 + 1 | 0;
   HEAP8[$341 >> 0] = $340;
   $344 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   HEAP32[($8 + 48 | 0) >> 2] = $344 + 1 | 0;
   HEAP8[$344 >> 0] = 0;
   $348 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   HEAP32[($8 + 48 | 0) >> 2] = $348 + 1 | 0;
   HEAP8[$348 >> 0] = 0;
   $352 = HEAP32[($8 + 48 | 0) >> 2] | 0;
   HEAP32[($8 + 48 | 0) >> 2] = $352 + 1 | 0;
   HEAP8[$352 >> 0] = 0;
   stbiw__wpcrc($8 + 48 | 0 | 0, 13 | 0);
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = ((HEAP32[($8 + 28 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = ((HEAP32[($8 + 28 | 0) >> 2] | 0) >> 16 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = ((HEAP32[($8 + 28 | 0) >> 2] | 0) >> 8 | 0) & 255 | 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (HEAP32[($8 + 28 | 0) >> 2] | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   $387 = 24;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = (((HEAPU8[(0 + 72057 | 0) >> 0] | 0) << $387 | 0) >> $387 | 0) & 255 | 0;
   $395 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = (((HEAPU8[(0 + 72058 | 0) >> 0] | 0) << $395 | 0) >> $395 | 0) & 255 | 0;
   $403 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = (((HEAPU8[(0 + 72059 | 0) >> 0] | 0) << $403 | 0) >> $403 | 0) & 255 | 0;
   $411 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (((HEAPU8[(0 + 72060 | 0) >> 0] | 0) << $411 | 0) >> $411 | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   memmove(HEAP32[($8 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8 + 40 | 0) >> 2] | 0 | 0, HEAP32[($8 + 28 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + (HEAP32[($8 + 28 | 0) >> 2] | 0) | 0;
   dlfree(HEAP32[($8 + 40 | 0) >> 2] | 0 | 0);
   stbiw__wpcrc($8 + 48 | 0 | 0, HEAP32[($8 + 28 | 0) >> 2] | 0 | 0);
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = 0;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   $444 = 24;
   HEAP8[(HEAP32[($8 + 48 | 0) >> 2] | 0) >> 0] = (((HEAPU8[(0 + 72294 | 0) >> 0] | 0) << $444 | 0) >> $444 | 0) & 255 | 0;
   $452 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 1 | 0) >> 0] = (((HEAPU8[(0 + 72295 | 0) >> 0] | 0) << $452 | 0) >> $452 | 0) & 255 | 0;
   $460 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 2 | 0) >> 0] = (((HEAPU8[(0 + 72296 | 0) >> 0] | 0) << $460 | 0) >> $460 | 0) & 255 | 0;
   $468 = 24;
   HEAP8[((HEAP32[($8 + 48 | 0) >> 2] | 0) + 3 | 0) >> 0] = (((HEAPU8[(0 + 72297 | 0) >> 0] | 0) << $468 | 0) >> $468 | 0) & 255 | 0;
   HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) + 4 | 0;
   stbiw__wpcrc($8 + 48 | 0 | 0, 0 | 0);
   label$18 : {
    if ((HEAP32[($8 + 48 | 0) >> 2] | 0 | 0) == ((HEAP32[($8 + 52 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($8 + 100 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) & 1 | 0) {
     break label$18
    }
    __assert_fail(68725 | 0, 69402 | 0, 1209 | 0, 68768 | 0);
    wasm2js_trap();
   }
   HEAP32[($8 + 124 | 0) >> 2] = HEAP32[($8 + 52 | 0) >> 2] | 0;
  }
  $496 = HEAP32[($8 + 124 | 0) >> 2] | 0;
  __stack_pointer = $8 + 128 | 0;
  return $496 | 0;
 }
 
 function stbiw__encode_png_line($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $10 = 0, $30 = 0, $40 = 0, $59 = 0, $120 = 0, $147 = 0, $362 = 0, $21 = 0, $22 = 0, $124 = 0, $298 = 0, $366 = 0;
  $10 = __stack_pointer - 64 | 0;
  __stack_pointer = $10;
  HEAP32[($10 + 60 | 0) >> 2] = $0;
  HEAP32[($10 + 56 | 0) >> 2] = $1;
  HEAP32[($10 + 52 | 0) >> 2] = $2;
  HEAP32[($10 + 48 | 0) >> 2] = $3;
  HEAP32[($10 + 44 | 0) >> 2] = $4;
  HEAP32[($10 + 40 | 0) >> 2] = $5;
  HEAP32[($10 + 36 | 0) >> 2] = $6;
  HEAP32[($10 + 32 | 0) >> 2] = $7;
  HEAP32[($10 + 28 | 0) >> 2] = HEAP32[($10 + 44 | 0) >> 2] | 0 ? 85456 : 85488;
  HEAP32[($10 + 20 | 0) >> 2] = HEAP32[((HEAP32[($10 + 28 | 0) >> 2] | 0) + ((HEAP32[($10 + 36 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  $21 = HEAP32[($10 + 60 | 0) >> 2] | 0;
  $22 = HEAP32[($10 + 56 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[(0 + 102784 | 0) >> 2] | 0)) {
     break label$2
    }
    $30 = ((HEAP32[($10 + 48 | 0) >> 2] | 0) - 1 | 0) - (HEAP32[($10 + 44 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   $30 = HEAP32[($10 + 44 | 0) >> 2] | 0;
  }
  HEAP32[($10 + 16 | 0) >> 2] = $21 + Math_imul($22, $30) | 0;
  label$3 : {
   label$4 : {
    if (!(HEAP32[(0 + 102784 | 0) >> 2] | 0)) {
     break label$4
    }
    $40 = 0 - (HEAP32[($10 + 56 | 0) >> 2] | 0) | 0;
    break label$3;
   }
   $40 = HEAP32[($10 + 56 | 0) >> 2] | 0;
  }
  HEAP32[($10 + 12 | 0) >> 2] = $40;
  label$5 : {
   label$6 : {
    if (HEAP32[($10 + 20 | 0) >> 2] | 0) {
     break label$6
    }
    __memcpy(HEAP32[($10 + 32 | 0) >> 2] | 0 | 0, HEAP32[($10 + 16 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0;
    break label$5;
   }
   HEAP32[($10 + 24 | 0) >> 2] = 0;
   label$7 : {
    label$8 : while (1) {
     if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (HEAP32[($10 + 40 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$7
     }
     $59 = (HEAP32[($10 + 20 | 0) >> 2] | 0) + -1 | 0;
     label$9 : {
      label$10 : {
       switch ($59 | 0) {
       case 0:
        HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        break label$9;
       case 1:
        HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
        break label$9;
       case 2:
        HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - (((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) | 0;
        break label$9;
       case 3:
        $120 = 0;
        $124 = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((stbiw__paeth($120 | 0, (HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, $120 | 0) | 0) & 255 | 0) | 0;
        HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = $124;
        break label$9;
       case 4:
        HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
        break label$9;
       case 5:
        break label$10;
       default:
        break label$9;
       };
      }
      HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0;
     }
     HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$8;
    };
   }
   $147 = (HEAP32[($10 + 20 | 0) >> 2] | 0) + -1 | 0;
   label$16 : {
    switch ($147 | 0) {
    case 0:
     HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
     label$22 : {
      label$23 : while (1) {
       if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$22
       }
       HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
       HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$23;
      };
     }
     break label$5;
    case 1:
     HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
     label$24 : {
      label$25 : while (1) {
       if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$24
       }
       HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0;
       HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$25;
      };
     }
     break label$5;
    case 2:
     HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
     label$26 : {
      label$27 : while (1) {
       if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$26
       }
       HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) + ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) | 0) >> 1 | 0) | 0;
       HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$27;
      };
     }
     break label$5;
    case 3:
     HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
     label$28 : {
      label$29 : while (1) {
       if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$28
       }
       $298 = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((stbiw__paeth((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 12 | 0) >> 2] | 0) | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0) & 255 | 0) | 0;
       HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = $298;
       HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$29;
      };
     }
     break label$5;
    case 4:
     HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
     label$30 : {
      label$31 : while (1) {
       if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
        break label$30
       }
       HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - (((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0) >> 1 | 0) | 0;
       HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
       continue label$31;
      };
     }
     break label$5;
    case 5:
     break label$16;
    default:
     break label$5;
    };
   }
   HEAP32[($10 + 24 | 0) >> 2] = HEAP32[($10 + 40 | 0) >> 2] | 0;
   label$32 : {
    label$33 : while (1) {
     if (!((HEAP32[($10 + 24 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($10 + 52 | 0) >> 2] | 0, HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) & 1 | 0)) {
      break label$32
     }
     $362 = 0;
     $366 = ((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) - ((stbiw__paeth((HEAPU8[((HEAP32[($10 + 16 | 0) >> 2] | 0) + ((HEAP32[($10 + 24 | 0) >> 2] | 0) - (HEAP32[($10 + 40 | 0) >> 2] | 0) | 0) | 0) >> 0] | 0) & 255 | 0 | 0, $362 | 0, $362 | 0) | 0) & 255 | 0) | 0;
     HEAP8[((HEAP32[($10 + 32 | 0) >> 2] | 0) + (HEAP32[($10 + 24 | 0) >> 2] | 0) | 0) >> 0] = $366;
     HEAP32[($10 + 24 | 0) >> 2] = (HEAP32[($10 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$33;
    };
   }
  }
  __stack_pointer = $10 + 64 | 0;
  return;
 }
 
 function stbiw__wpcrc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $43 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = stbiw__crc32(((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + (0 - (HEAP32[($4 + 8 | 0) >> 2] | 0) | 0) | 0) + -4 | 0 | 0, (HEAP32[($4 + 8 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  HEAP8[(HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 0] = ((HEAP32[($4 + 4 | 0) >> 2] | 0) >>> 24 | 0) & 255 | 0;
  HEAP8[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0) >> 0] = ((HEAP32[($4 + 4 | 0) >> 2] | 0) >>> 16 | 0) & 255 | 0;
  HEAP8[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + 2 | 0) >> 0] = ((HEAP32[($4 + 4 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0;
  HEAP8[((HEAP32[(HEAP32[($4 + 12 | 0) >> 2] | 0) >> 2] | 0) + 3 | 0) >> 0] = (HEAP32[($4 + 4 | 0) >> 2] | 0) & 255 | 0;
  $43 = HEAP32[($4 + 12 | 0) >> 2] | 0;
  HEAP32[$43 >> 2] = (HEAP32[$43 >> 2] | 0) + 4 | 0;
  __stack_pointer = $4 + 16 | 0;
  return;
 }
 
 function stbiw__paeth($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $55 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 24 | 0) >> 2] = $0;
  HEAP32[($5 + 20 | 0) >> 2] = $1;
  HEAP32[($5 + 16 | 0) >> 2] = $2;
  HEAP32[($5 + 12 | 0) >> 2] = ((HEAP32[($5 + 24 | 0) >> 2] | 0) + (HEAP32[($5 + 20 | 0) >> 2] | 0) | 0) - (HEAP32[($5 + 16 | 0) >> 2] | 0) | 0;
  HEAP32[($5 + 8 | 0) >> 2] = abs((HEAP32[($5 + 12 | 0) >> 2] | 0) - (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0 | 0) | 0;
  HEAP32[($5 + 4 | 0) >> 2] = abs((HEAP32[($5 + 12 | 0) >> 2] | 0) - (HEAP32[($5 + 20 | 0) >> 2] | 0) | 0 | 0) | 0;
  HEAP32[$5 >> 2] = abs((HEAP32[($5 + 12 | 0) >> 2] | 0) - (HEAP32[($5 + 16 | 0) >> 2] | 0) | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($5 + 8 | 0) >> 2] | 0 | 0) <= (HEAP32[$5 >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($5 + 31 | 0) >> 0] = (HEAP32[($5 + 24 | 0) >> 2] | 0) & 255 | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($5 + 4 | 0) >> 2] | 0 | 0) <= (HEAP32[$5 >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP8[($5 + 31 | 0) >> 0] = (HEAP32[($5 + 20 | 0) >> 2] | 0) & 255 | 0;
    break label$1;
   }
   HEAP8[($5 + 31 | 0) >> 0] = (HEAP32[($5 + 16 | 0) >> 2] | 0) & 255 | 0;
  }
  $55 = (HEAPU8[($5 + 31 | 0) >> 0] | 0) & 255 | 0;
  __stack_pointer = $5 + 32 | 0;
  return $55 | 0;
 }
 
 function stbiw__crc32($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  HEAP32[($4 + 4 | 0) >> 2] = -1;
  HEAP32[$4 >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[$4 >> 2] | 0 | 0) < (HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($4 + 4 | 0) >> 2] = ((HEAP32[($4 + 4 | 0) >> 2] | 0) >>> 8 | 0) ^ (HEAP32[(85520 + ((((HEAPU8[((HEAP32[($4 + 12 | 0) >> 2] | 0) + (HEAP32[$4 >> 2] | 0) | 0) >> 0] | 0) & 255 | 0) ^ ((HEAP32[($4 + 4 | 0) >> 2] | 0) & 255 | 0) | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return (HEAP32[($4 + 4 | 0) >> 2] | 0) ^ -1 | 0 | 0;
 }
 
 function UnloadImage($0) {
  $0 = $0 | 0;
  dlfree(HEAP32[$0 >> 2] | 0 | 0);
  return;
 }
 
 function GetPixelDataSize($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $6 = 0, $9 = 0;
  $5 = __stack_pointer - 32 | 0;
  HEAP32[($5 + 28 | 0) >> 2] = $0;
  HEAP32[($5 + 24 | 0) >> 2] = $1;
  HEAP32[($5 + 20 | 0) >> 2] = $2;
  $6 = 0;
  HEAP32[($5 + 16 | 0) >> 2] = $6;
  HEAP32[($5 + 12 | 0) >> 2] = $6;
  $9 = (HEAP32[($5 + 20 | 0) >> 2] | 0) + -1 | 0;
  label$1 : {
   label$2 : {
    switch ($9 | 0) {
    case 0:
     HEAP32[($5 + 12 | 0) >> 2] = 8;
     break label$1;
    case 1:
    case 2:
    case 4:
    case 5:
     HEAP32[($5 + 12 | 0) >> 2] = 16;
     break label$1;
    case 6:
     HEAP32[($5 + 12 | 0) >> 2] = 32;
     break label$1;
    case 3:
     HEAP32[($5 + 12 | 0) >> 2] = 24;
     break label$1;
    case 7:
     HEAP32[($5 + 12 | 0) >> 2] = 32;
     break label$1;
    case 8:
     HEAP32[($5 + 12 | 0) >> 2] = 96;
     break label$1;
    case 9:
     HEAP32[($5 + 12 | 0) >> 2] = 128;
     break label$1;
    case 10:
    case 11:
    case 14:
    case 15:
    case 17:
    case 18:
     HEAP32[($5 + 12 | 0) >> 2] = 4;
     break label$1;
    case 12:
    case 13:
    case 16:
    case 19:
     HEAP32[($5 + 12 | 0) >> 2] = 8;
     break label$1;
    case 20:
     HEAP32[($5 + 12 | 0) >> 2] = 2;
     break label$1;
    default:
     break label$2;
    };
   }
  }
  HEAP32[($5 + 16 | 0) >> 2] = (Math_imul(Math_imul(HEAP32[($5 + 28 | 0) >> 2] | 0, HEAP32[($5 + 24 | 0) >> 2] | 0), HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) / (8 | 0) | 0;
  label$13 : {
   if (!((HEAP32[($5 + 28 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
    break label$13
   }
   if (!((HEAP32[($5 + 24 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
    break label$13
   }
   label$14 : {
    label$15 : {
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) >= (11 | 0) & 1 | 0)) {
      break label$15
     }
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) < (13 | 0) & 1 | 0)) {
      break label$15
     }
     HEAP32[($5 + 16 | 0) >> 2] = 8;
     break label$14;
    }
    label$16 : {
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) >= (13 | 0) & 1 | 0)) {
      break label$16
     }
     if (!((HEAP32[($5 + 20 | 0) >> 2] | 0 | 0) < (21 | 0) & 1 | 0)) {
      break label$16
     }
     HEAP32[($5 + 16 | 0) >> 2] = 16;
    }
   }
  }
  return HEAP32[($5 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function ExportImage($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $57 = 0, $63 = 0, $320 = 0, $324 = 0, $184 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  HEAP32[($4 + 88 | 0) >> 2] = $1;
  HEAP32[($4 + 84 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!(HEAP32[($0 + 8 | 0) >> 2] | 0)) {
      break label$3
     }
     if (!((HEAP32[$0 >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP8[($4 + 95 | 0) >> 0] = (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0;
    break label$1;
   }
   HEAP32[($4 + 80 | 0) >> 2] = 4;
   HEAP8[($4 + 79 | 0) >> 0] = 0;
   HEAP32[($4 + 72 | 0) >> 2] = HEAP32[$0 >> 2] | 0;
   label$4 : {
    label$5 : {
     if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($4 + 80 | 0) >> 2] = 1;
     break label$4;
    }
    label$6 : {
     label$7 : {
      if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[($4 + 80 | 0) >> 2] = 2;
      break label$6;
     }
     label$8 : {
      label$9 : {
       if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP32[($4 + 80 | 0) >> 2] = 3;
       break label$8;
      }
      label$10 : {
       label$11 : {
        if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
         break label$11
        }
        HEAP32[($4 + 80 | 0) >> 2] = 4;
        break label$10;
       }
       $57 = 16;
       HEAP32[(($4 + 24 | 0) + $57 | 0) >> 2] = HEAP32[($0 + $57 | 0) >> 2] | 0;
       $63 = 8;
       i64toi32_i32$2 = $0 + $63 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $320 = i64toi32_i32$0;
       i64toi32_i32$0 = ($4 + 24 | 0) + $63 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $320;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $0;
       i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       $324 = i64toi32_i32$1;
       i64toi32_i32$1 = $4;
       HEAP32[($4 + 24 | 0) >> 2] = $324;
       HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($4 + 72 | 0) >> 2] = LoadImageColors($4 + 24 | 0 | 0) | 0;
       HEAP8[($4 + 79 | 0) >> 0] = 1;
      }
     }
    }
   }
   label$12 : {
    label$13 : {
     if (!((IsFileExtension(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, 69539 | 0) | 0) & 1 | 0)) {
      break label$13
     }
     HEAP32[($4 + 68 | 0) >> 2] = 0;
     HEAP32[($4 + 64 | 0) >> 2] = stbi_write_png_to_mem(HEAP32[($4 + 72 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($0 + 4 | 0) >> 2] | 0, HEAP32[($4 + 80 | 0) >> 2] | 0) | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4 + 80 | 0) >> 2] | 0 | 0, $4 + 68 | 0 | 0) | 0;
     HEAP32[($4 + 84 | 0) >> 2] = (SaveFileData(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, HEAP32[($4 + 64 | 0) >> 2] | 0 | 0, HEAP32[($4 + 68 | 0) >> 2] | 0 | 0) | 0) & 1 | 0;
     dlfree(HEAP32[($4 + 64 | 0) >> 2] | 0 | 0);
     break label$12;
    }
    label$14 : {
     label$15 : {
      if (!((IsFileExtension(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, 69089 | 0) | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[($4 + 80 | 0) >> 2] = 0;
      label$16 : {
       label$17 : {
        if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$17
        }
        HEAP32[($4 + 80 | 0) >> 2] = 3;
        break label$16;
       }
       label$18 : {
        label$19 : {
         if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
          break label$19
         }
         HEAP32[($4 + 80 | 0) >> 2] = 4;
         break label$18;
        }
        TraceLog(4 | 0, 73337 | 0, 0 | 0);
       }
      }
      label$20 : {
       label$21 : {
        if ((HEAP32[($4 + 80 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0) {
         break label$21
        }
        if (!((HEAP32[($4 + 80 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
         break label$20
        }
       }
       HEAP32[($4 + 56 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = $4;
       HEAP32[($4 + 48 | 0) >> 2] = 0;
       HEAP32[($4 + 52 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($4 + 48 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0;
       HEAP32[($4 + 52 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
       HEAP8[($4 + 56 | 0) >> 0] = HEAP32[($4 + 80 | 0) >> 2] | 0;
       HEAP8[($4 + 57 | 0) >> 0] = 0;
       HEAP32[($4 + 84 | 0) >> 2] = qoi_write(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, HEAP32[($4 + 72 | 0) >> 2] | 0 | 0, $4 + 48 | 0 | 0) | 0;
      }
      break label$14;
     }
     label$22 : {
      if (!((IsFileExtension(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, 66432 | 0) | 0) & 1 | 0)) {
       break label$22
      }
      HEAP32[($4 + 84 | 0) >> 2] = (SaveFileData(HEAP32[($4 + 88 | 0) >> 2] | 0 | 0, HEAP32[$0 >> 2] | 0 | 0, GetPixelDataSize(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) | 0 | 0) | 0) & 1 | 0;
     }
    }
   }
   label$23 : {
    if (!((HEAPU8[($4 + 79 | 0) >> 0] | 0) & 1 | 0)) {
     break label$23
    }
    dlfree(HEAP32[($4 + 72 | 0) >> 2] | 0 | 0);
   }
   label$24 : {
    label$25 : {
     if (!(HEAP32[($4 + 84 | 0) >> 2] | 0)) {
      break label$25
     }
     HEAP32[$4 >> 2] = HEAP32[($4 + 88 | 0) >> 2] | 0;
     TraceLog(3 | 0, 65783 | 0, $4 | 0);
     break label$24;
    }
    HEAP32[($4 + 16 | 0) >> 2] = HEAP32[($4 + 88 | 0) >> 2] | 0;
    TraceLog(4 | 0, 70363 | 0, $4 + 16 | 0 | 0);
   }
   HEAP8[($4 + 95 | 0) >> 0] = (HEAP32[($4 + 84 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0;
  }
  $184 = (HEAPU8[($4 + 95 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $4 + 96 | 0;
  return $184 | 0;
 }
 
 function LoadImageColors($0) {
  $0 = $0 | 0;
  var $3 = 0, $523 = 0, $460 = 0, $625 = Math_fround(0), $660 = Math_fround(0), $598 = Math_fround(0), $599 = Math_fround(0), $603 = Math_fround(0), $607 = Math_fround(0), $612 = Math_fround(0), $617 = Math_fround(0), $621 = Math_fround(0), $626 = Math_fround(0), $284 = 0, $630 = Math_fround(0), $634 = Math_fround(0), $638 = Math_fround(0), $643 = Math_fround(0), $647 = Math_fround(0), $648 = Math_fround(0), $652 = Math_fround(0), $656 = Math_fround(0), $661 = Math_fround(0), $665 = Math_fround(0), $669 = Math_fround(0), $673 = Math_fround(0), $60 = 0, $138 = 0, $150 = 0, $155 = 0, $168 = 0, $184 = 0, $611 = Math_fround(0), $218 = 0, $223 = 0, $236 = 0, $251 = 0, $279 = 0, $297 = 0, $314 = 0, $329 = 0, $432 = 0, $468 = 0, $486 = 0, $504 = 0, $531 = 0, $547 = 0, $563 = 0, $579 = 0, $594 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(HEAP32[($0 + 4 | 0) >> 2] | 0)) {
      break label$3
     }
     if (HEAP32[($0 + 8 | 0) >> 2] | 0) {
      break label$2
     }
    }
    HEAP32[($3 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($3 + 24 | 0) >> 2] = dlmalloc(Math_imul(HEAP32[($0 + 4 | 0) >> 2] | 0, HEAP32[($0 + 8 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) >= (11 | 0) & 1 | 0)) {
      break label$5
     }
     TraceLog(4 | 0, 67424 | 0, 0 | 0);
     break label$4;
    }
    label$6 : {
     label$7 : {
      if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0) {
       break label$7
      }
      if ((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0) {
       break label$7
      }
      if (!((HEAP32[($0 + 16 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
       break label$6
      }
     }
     TraceLog(4 | 0, 68945 | 0, 0 | 0);
    }
    HEAP32[($3 + 20 | 0) >> 2] = 0;
    HEAP32[($3 + 16 | 0) >> 2] = 0;
    label$8 : {
     label$9 : while (1) {
      if (!((HEAP32[($3 + 20 | 0) >> 2] | 0 | 0) < (Math_imul(HEAP32[($0 + 4 | 0) >> 2] | 0, HEAP32[($0 + 8 | 0) >> 2] | 0) | 0) & 1 | 0)) {
       break label$8
      }
      $60 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + -1 | 0;
      label$10 : {
       label$11 : {
        switch ($60 | 0) {
        case 0:
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
         break label$10;
        case 1:
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
         HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 2 | 0;
         break label$10;
        case 4:
         $138 = 1;
         HEAP16[($3 + 14 | 0) >> 1] = HEAPU16[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $138 | 0) | 0) >> 1] | 0;
         $598 = Math_fround(8.0);
         $599 = Math_fround(Math_fround((HEAPU16[($3 + 14 | 0) >> 1] | 0) >>> 11 | 0 | 0) * $598);
         label$22 : {
          label$23 : {
           if (!($599 < Math_fround(4294967296.0) & $599 >= Math_fround(0.0) | 0)) {
            break label$23
           }
           $150 = ~~$599 >>> 0;
           break label$22;
          }
          $150 = 0;
         }
         $155 = 2;
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $155 | 0) | 0) >> 0] = $150;
         $603 = Math_fround(Math_fround(((HEAPU16[($3 + 14 | 0) >> 1] | 0) & 1984 | 0) >>> 6 | 0 | 0) * $598);
         label$24 : {
          label$25 : {
           if (!($603 < Math_fround(4294967296.0) & $603 >= Math_fround(0.0) | 0)) {
            break label$25
           }
           $168 = ~~$603 >>> 0;
           break label$24;
          }
          $168 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $155 | 0) | 0) + 1 | 0) >> 0] = $168;
         $607 = Math_fround(Math_fround(((HEAPU16[($3 + 14 | 0) >> 1] | 0) & 62 | 0) >>> $138 | 0 | 0) * $598);
         label$26 : {
          label$27 : {
           if (!($607 < Math_fround(4294967296.0) & $607 >= Math_fround(0.0) | 0)) {
            break label$27
           }
           $184 = ~~$607 >>> 0;
           break label$26;
          }
          $184 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = $184;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = Math_imul(((HEAPU16[($3 + 14 | 0) >> 1] | 0) & 65535 | 0) & 1 | 0, 255);
         break label$10;
        case 2:
         HEAP16[($3 + 12 | 0) >> 1] = HEAPU16[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
         $611 = Math_fround(8.0);
         $612 = Math_fround(Math_fround((HEAPU16[($3 + 12 | 0) >> 1] | 0) >>> 11 | 0 | 0) * $611);
         label$28 : {
          label$29 : {
           if (!($612 < Math_fround(4294967296.0) & $612 >= Math_fround(0.0) | 0)) {
            break label$29
           }
           $218 = ~~$612 >>> 0;
           break label$28;
          }
          $218 = 0;
         }
         $223 = 2;
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $223 | 0) | 0) >> 0] = $218;
         $617 = Math_fround(Math_fround(((HEAPU16[($3 + 12 | 0) >> 1] | 0) & 2016 | 0) >>> 5 | 0 | 0) * Math_fround(4.0));
         label$30 : {
          label$31 : {
           if (!($617 < Math_fround(4294967296.0) & $617 >= Math_fround(0.0) | 0)) {
            break label$31
           }
           $236 = ~~$617 >>> 0;
           break label$30;
          }
          $236 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $223 | 0) | 0) + 1 | 0) >> 0] = $236;
         $621 = Math_fround(Math_fround((HEAPU16[($3 + 12 | 0) >> 1] | 0) & 31 | 0 | 0) * $611);
         label$32 : {
          label$33 : {
           if (!($621 < Math_fround(4294967296.0) & $621 >= Math_fround(0.0) | 0)) {
            break label$33
           }
           $251 = ~~$621 >>> 0;
           break label$32;
          }
          $251 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = $251;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
         break label$10;
        case 5:
         HEAP16[($3 + 10 | 0) >> 1] = HEAPU16[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
         $625 = Math_fround(17.0);
         $626 = Math_fround(Math_fround((HEAPU16[($3 + 10 | 0) >> 1] | 0) >>> 12 | 0 | 0) * $625);
         label$34 : {
          label$35 : {
           if (!($626 < Math_fround(4294967296.0) & $626 >= Math_fround(0.0) | 0)) {
            break label$35
           }
           $279 = ~~$626 >>> 0;
           break label$34;
          }
          $279 = 0;
         }
         $284 = 2;
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $284 | 0) | 0) >> 0] = $279;
         $630 = Math_fround(Math_fround(((HEAPU16[($3 + 10 | 0) >> 1] | 0) & 3840 | 0) >>> 8 | 0 | 0) * $625);
         label$36 : {
          label$37 : {
           if (!($630 < Math_fround(4294967296.0) & $630 >= Math_fround(0.0) | 0)) {
            break label$37
           }
           $297 = ~~$630 >>> 0;
           break label$36;
          }
          $297 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $284 | 0) | 0) + 1 | 0) >> 0] = $297;
         $634 = Math_fround(Math_fround(((HEAPU16[($3 + 10 | 0) >> 1] | 0) & 240 | 0) >>> 4 | 0 | 0) * $625);
         label$38 : {
          label$39 : {
           if (!($634 < Math_fround(4294967296.0) & $634 >= Math_fround(0.0) | 0)) {
            break label$39
           }
           $314 = ~~$634 >>> 0;
           break label$38;
          }
          $314 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $284 | 0) | 0) + 2 | 0) >> 0] = $314;
         $638 = Math_fround(Math_fround((HEAPU16[($3 + 10 | 0) >> 1] | 0) & 15 | 0 | 0) * $625);
         label$40 : {
          label$41 : {
           if (!($638 < Math_fround(4294967296.0) & $638 >= Math_fround(0.0) | 0)) {
            break label$41
           }
           $329 = ~~$638 >>> 0;
           break label$40;
          }
          $329 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = $329;
         break label$10;
        case 6:
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 2 | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 3 | 0) | 0) >> 0] | 0;
         HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 4 | 0;
         break label$10;
        case 3:
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + (HEAP32[($3 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = HEAPU8[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) + 2 | 0) | 0) >> 0] | 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
         HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 3 | 0;
         break label$10;
        case 7:
         $643 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) * Math_fround(255.0));
         label$42 : {
          label$43 : {
           if (!($643 < Math_fround(4294967296.0) & $643 >= Math_fround(0.0) | 0)) {
            break label$43
           }
           $432 = ~~$643 >>> 0;
           break label$42;
          }
          $432 = 0;
         }
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 0] = $432;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0) >> 0] = 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = 0;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
         break label$10;
        case 8:
         $460 = 2;
         $647 = Math_fround(255.0);
         $648 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << $460 | 0) | 0) >> 2]) * $647);
         label$44 : {
          label$45 : {
           if (!($648 < Math_fround(4294967296.0) & $648 >= Math_fround(0.0) | 0)) {
            break label$45
           }
           $468 = ~~$648 >>> 0;
           break label$44;
          }
          $468 = 0;
         }
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $460 | 0) | 0) >> 0] = $468;
         $652 = Math_fround(Math_fround(HEAPF32[((((HEAP32[($3 + 16 | 0) >> 2] | 0) << $460 | 0) + (HEAP32[$0 >> 2] | 0) | 0) + 4 | 0) >> 2]) * $647);
         label$46 : {
          label$47 : {
           if (!($652 < Math_fround(4294967296.0) & $652 >= Math_fround(0.0) | 0)) {
            break label$47
           }
           $486 = ~~$652 >>> 0;
           break label$46;
          }
          $486 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $460 | 0) | 0) + 1 | 0) >> 0] = $486;
         $656 = Math_fround(Math_fround(HEAPF32[((((HEAP32[($3 + 16 | 0) >> 2] | 0) << $460 | 0) + (HEAP32[$0 >> 2] | 0) | 0) + 8 | 0) >> 2]) * $647);
         label$48 : {
          label$49 : {
           if (!($656 < Math_fround(4294967296.0) & $656 >= Math_fround(0.0) | 0)) {
            break label$49
           }
           $504 = ~~$656 >>> 0;
           break label$48;
          }
          $504 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 2 | 0) >> 0] = $504;
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = 255;
         HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 3 | 0;
         break label$10;
        case 9:
         $523 = 2;
         $660 = Math_fround(255.0);
         $661 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << $523 | 0) | 0) >> 2]) * $660);
         label$50 : {
          label$51 : {
           if (!($661 < Math_fround(4294967296.0) & $661 >= Math_fround(0.0) | 0)) {
            break label$51
           }
           $531 = ~~$661 >>> 0;
           break label$50;
          }
          $531 = 0;
         }
         HEAP8[((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $523 | 0) | 0) >> 0] = $531;
         $665 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << $523 | 0) | 0) >> 2]) * $660);
         label$52 : {
          label$53 : {
           if (!($665 < Math_fround(4294967296.0) & $665 >= Math_fround(0.0) | 0)) {
            break label$53
           }
           $547 = ~~$665 >>> 0;
           break label$52;
          }
          $547 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $523 | 0) | 0) + 1 | 0) >> 0] = $547;
         $669 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << $523 | 0) | 0) >> 2]) * $660);
         label$54 : {
          label$55 : {
           if (!($669 < Math_fround(4294967296.0) & $669 >= Math_fround(0.0) | 0)) {
            break label$55
           }
           $563 = ~~$669 >>> 0;
           break label$54;
          }
          $563 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << $523 | 0) | 0) + 2 | 0) >> 0] = $563;
         $673 = Math_fround(Math_fround(HEAPF32[((HEAP32[$0 >> 2] | 0) + ((HEAP32[($3 + 16 | 0) >> 2] | 0) << $523 | 0) | 0) >> 2]) * $660);
         label$56 : {
          label$57 : {
           if (!($673 < Math_fround(4294967296.0) & $673 >= Math_fround(0.0) | 0)) {
            break label$57
           }
           $579 = ~~$673 >>> 0;
           break label$56;
          }
          $579 = 0;
         }
         HEAP8[(((HEAP32[($3 + 24 | 0) >> 2] | 0) + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 3 | 0) >> 0] = $579;
         HEAP32[($3 + 16 | 0) >> 2] = (HEAP32[($3 + 16 | 0) >> 2] | 0) + 4 | 0;
         break label$10;
        default:
         break label$11;
        };
       }
      }
      HEAP32[($3 + 20 | 0) >> 2] = (HEAP32[($3 + 20 | 0) >> 2] | 0) + 1 | 0;
      continue label$9;
     };
    }
   }
   HEAP32[($3 + 28 | 0) >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
  }
  $594 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  __stack_pointer = $3 + 32 | 0;
  return $594 | 0;
 }
 
 function ImageFromImage($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $104 = 0, $12 = 0, $105 = Math_fround(0), $17 = 0, $108 = Math_fround(0), $23 = 0, $111 = Math_fround(0), $29 = 0, $114 = Math_fround(0), $35 = 0, $117 = Math_fround(0), $50 = 0, $120 = Math_fround(0), $63 = 0, $123 = Math_fround(0), $75 = 0, $126 = Math_fround(0), $84 = 0, $129 = Math_fround(0), $94 = 0, $31 = 0, $46 = 0, $58 = 0, $59 = 0, $69 = 0, $70 = 0, $71 = 0, $80 = 0, $90 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = 0;
  $104 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[$0 >> 2] = $104;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $104;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $12 = 1;
  HEAP32[($5 + 12 | 0) >> 2] = GetPixelDataSize($12 | 0, $12 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) | 0;
  $105 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_abs($105)) < Math_fround(2147483648.0))) {
     break label$2
    }
    $17 = ~~$105;
    break label$1;
   }
   $17 = -2147483648;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $17;
  $108 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  label$3 : {
   label$4 : {
    if (!(Math_fround(Math_abs($108)) < Math_fround(2147483648.0))) {
     break label$4
    }
    $23 = ~~$108;
    break label$3;
   }
   $23 = -2147483648;
  }
  HEAP32[($0 + 8 | 0) >> 2] = $23;
  $111 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
  label$5 : {
   label$6 : {
    if (!(Math_fround(Math_abs($111)) < Math_fround(2147483648.0))) {
     break label$6
    }
    $29 = ~~$111;
    break label$5;
   }
   $29 = -2147483648;
  }
  $31 = $29;
  $114 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
  label$7 : {
   label$8 : {
    if (!(Math_fround(Math_abs($114)) < Math_fround(2147483648.0))) {
     break label$8
    }
    $35 = ~~$114;
    break label$7;
   }
   $35 = -2147483648;
  }
  HEAP32[$0 >> 2] = dlcalloc(Math_imul(Math_imul($31, $35), HEAP32[($5 + 12 | 0) >> 2] | 0) | 0, 1 | 0) | 0;
  HEAP32[($0 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 12 | 0) >> 2] = 1;
  HEAP32[($5 + 8 | 0) >> 2] = 0;
  label$9 : while (1) {
   $46 = HEAP32[($5 + 8 | 0) >> 2] | 0;
   $117 = Math_fround(HEAPF32[($2 + 12 | 0) >> 2]);
   label$10 : {
    label$11 : {
     if (!(Math_fround(Math_abs($117)) < Math_fround(2147483648.0))) {
      break label$11
     }
     $50 = ~~$117;
     break label$10;
    }
    $50 = -2147483648;
   }
   label$12 : {
    if (!(($46 | 0) < ($50 | 0) & 1 | 0)) {
     break label$12
    }
    $58 = HEAP32[$0 >> 2] | 0;
    $59 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    $120 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
    label$13 : {
     label$14 : {
      if (!(Math_fround(Math_abs($120)) < Math_fround(2147483648.0))) {
       break label$14
      }
      $63 = ~~$120;
      break label$13;
     }
     $63 = -2147483648;
    }
    $69 = $58 + Math_imul(Math_imul($59, $63), HEAP32[($5 + 12 | 0) >> 2] | 0) | 0;
    $70 = HEAP32[$1 >> 2] | 0;
    $71 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    $123 = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
    label$15 : {
     label$16 : {
      if (!(Math_fround(Math_abs($123)) < Math_fround(2147483648.0))) {
       break label$16
      }
      $75 = ~~$123;
      break label$15;
     }
     $75 = -2147483648;
    }
    $80 = Math_imul($71 + $75 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0);
    $126 = Math_fround(HEAPF32[$2 >> 2]);
    label$17 : {
     label$18 : {
      if (!(Math_fround(Math_abs($126)) < Math_fround(2147483648.0))) {
       break label$18
      }
      $84 = ~~$126;
      break label$17;
     }
     $84 = -2147483648;
    }
    $90 = $70 + Math_imul($80 + $84 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0) | 0;
    $129 = Math_fround(HEAPF32[($2 + 8 | 0) >> 2]);
    label$19 : {
     label$20 : {
      if (!(Math_fround(Math_abs($129)) < Math_fround(2147483648.0))) {
       break label$20
      }
      $94 = ~~$129;
      break label$19;
     }
     $94 = -2147483648;
    }
    __memcpy($69 | 0, $90 | 0, Math_imul($94, HEAP32[($5 + 12 | 0) >> 2] | 0) | 0) | 0;
    HEAP32[($5 + 8 | 0) >> 2] = (HEAP32[($5 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$9;
   }
   break label$9;
  };
  __stack_pointer = $5 + 16 | 0;
  return;
 }
 
 function LoadTextureFromImage($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0;
  i64toi32_i32$0 = 0;
  $2 = 0;
  i64toi32_i32$1 = $0;
  HEAP32[$0 >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($1 + 4 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!(HEAP32[($1 + 8 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[$0 >> 2] = rlLoadTexture(HEAP32[$1 >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   TraceLog(4 | 0, 70102 | 0, 0 | 0);
  }
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  HEAP32[($0 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  HEAP32[($0 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP32[($0 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  return;
 }
 
 function UnloadTexture($0) {
  $0 = $0 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!((HEAP32[$0 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   rlUnloadTexture(HEAP32[$0 >> 2] | 0 | 0);
   HEAP32[$3 >> 2] = HEAP32[$0 >> 2] | 0;
   TraceLog(3 | 0, 74480 | 0, $3 | 0);
  }
  __stack_pointer = $3 + 16 | 0;
  return;
 }
 
 function DrawTexturePro($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $8 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $204 = Math_fround(0), $410 = 0, $427 = 0, $444 = 0, $466 = 0;
  $8 = __stack_pointer - 112 | 0;
  __stack_pointer = $8;
  HEAPF32[($8 + 108 | 0) >> 2] = $4;
  label$1 : {
   if (!((HEAP32[$0 >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAPF32[($8 + 104 | 0) >> 2] = Math_fround(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0);
   HEAPF32[($8 + 100 | 0) >> 2] = Math_fround(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0);
   HEAP8[($8 + 99 | 0) >> 0] = 0;
   label$2 : {
    if (!(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($8 + 99 | 0) >> 0] = 1;
    HEAPF32[($1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 8 | 0) >> 2]) * Math_fround(-1.0));
   }
   label$3 : {
    if (!(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]) < Math_fround(0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAPF32[($1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $8;
   HEAP32[($8 + 88 | 0) >> 2] = 0;
   HEAP32[($8 + 92 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $8;
   HEAP32[($8 + 80 | 0) >> 2] = 0;
   HEAP32[($8 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $8;
   HEAP32[($8 + 72 | 0) >> 2] = 0;
   HEAP32[($8 + 76 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $8;
   HEAP32[($8 + 64 | 0) >> 2] = 0;
   HEAP32[($8 + 68 | 0) >> 2] = i64toi32_i32$0;
   label$4 : {
    label$5 : {
     if (!(Math_fround(HEAPF32[($8 + 108 | 0) >> 2]) == Math_fround(0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAPF32[($8 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$2 >> 2]) - Math_fround(HEAPF32[$3 >> 2]));
     HEAPF32[($8 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($2 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($3 + 4 | 0) >> 2]));
     HEAPF32[($8 + 48 | 0) >> 2] = Math_fround(HEAPF32[($8 + 60 | 0) >> 2]);
     HEAPF32[($8 + 52 | 0) >> 2] = Math_fround(HEAPF32[($8 + 56 | 0) >> 2]);
     i64toi32_i32$0 = HEAP32[($8 + 48 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($8 + 52 | 0) >> 2] | 0;
     $410 = i64toi32_i32$0;
     i64toi32_i32$0 = $8;
     HEAP32[($8 + 88 | 0) >> 2] = $410;
     HEAP32[($8 + 92 | 0) >> 2] = i64toi32_i32$1;
     HEAPF32[($8 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 60 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2]));
     HEAPF32[($8 + 44 | 0) >> 2] = Math_fround(HEAPF32[($8 + 56 | 0) >> 2]);
     i64toi32_i32$1 = HEAP32[($8 + 40 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($8 + 44 | 0) >> 2] | 0;
     $427 = i64toi32_i32$1;
     i64toi32_i32$1 = $8;
     HEAP32[($8 + 80 | 0) >> 2] = $427;
     HEAP32[($8 + 84 | 0) >> 2] = i64toi32_i32$0;
     HEAPF32[($8 + 32 | 0) >> 2] = Math_fround(HEAPF32[($8 + 60 | 0) >> 2]);
     HEAPF32[($8 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 56 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2]));
     i64toi32_i32$0 = HEAP32[($8 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($8 + 36 | 0) >> 2] | 0;
     $444 = i64toi32_i32$0;
     i64toi32_i32$0 = $8;
     HEAP32[($8 + 72 | 0) >> 2] = $444;
     HEAP32[($8 + 76 | 0) >> 2] = i64toi32_i32$1;
     HEAPF32[($8 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 60 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2]));
     HEAPF32[($8 + 28 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8 + 56 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2]));
     i64toi32_i32$1 = HEAP32[($8 + 24 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($8 + 28 | 0) >> 2] | 0;
     $466 = i64toi32_i32$1;
     i64toi32_i32$1 = $8;
     HEAP32[($8 + 64 | 0) >> 2] = $466;
     HEAP32[($8 + 68 | 0) >> 2] = i64toi32_i32$0;
     break label$4;
    }
    HEAPF32[($8 + 20 | 0) >> 2] = Math_fround(sinf(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 108 | 0) >> 2]) * Math_fround(.01745329238474369)))));
    HEAPF32[($8 + 16 | 0) >> 2] = Math_fround(cosf(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 108 | 0) >> 2]) * Math_fround(.01745329238474369)))));
    HEAPF32[($8 + 12 | 0) >> 2] = Math_fround(HEAPF32[$2 >> 2]);
    HEAPF32[($8 + 8 | 0) >> 2] = Math_fround(HEAPF32[($2 + 4 | 0) >> 2]);
    HEAPF32[($8 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$3 >> 2]));
    HEAPF32[$8 >> 2] = Math_fround(-Math_fround(HEAPF32[($3 + 4 | 0) >> 2]));
    HEAPF32[($8 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[$8 >> 2])) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])));
    HEAPF32[($8 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2]) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 8 | 0) >> 2])));
    HEAPF32[($8 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(HEAPF32[$8 >> 2])) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])));
    HEAPF32[($8 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2]) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 8 | 0) >> 2])));
    HEAPF32[($8 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])));
    HEAPF32[($8 + 76 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 8 | 0) >> 2])));
    HEAPF32[($8 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2]))) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 12 | 0) >> 2])));
    HEAPF32[($8 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$8 >> 2]) + Math_fround(HEAPF32[($2 + 12 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 16 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($8 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2 + 8 | 0) >> 2])) * Math_fround(HEAPF32[($8 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($8 + 8 | 0) >> 2])));
   }
   rlSetTexture(HEAP32[$0 >> 2] | 0 | 0);
   rlBegin(7 | 0);
   rlColor4ub((HEAPU8[$5 >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 1 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 2 | 0) >> 0] | 0) & 255 | 0 | 0, (HEAPU8[($5 + 3 | 0) >> 0] | 0) & 255 | 0 | 0);
   $204 = Math_fround(0 | 0);
   rlNormal3f(Math_fround($204), Math_fround($204), Math_fround(Math_fround(1.0)));
   label$6 : {
    label$7 : {
     if (!((HEAPU8[($8 + 99 | 0) >> 0] | 0) & 1 | 0)) {
      break label$7
     }
     rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[($1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
     break label$6;
    }
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
   }
   rlVertex2f(Math_fround(Math_fround(HEAPF32[($8 + 88 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 92 | 0) >> 2])));
   label$8 : {
    label$9 : {
     if (!((HEAPU8[($8 + 99 | 0) >> 0] | 0) & 1 | 0)) {
      break label$9
     }
     rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[($1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
     break label$8;
    }
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
   }
   rlVertex2f(Math_fround(Math_fround(HEAPF32[($8 + 72 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 76 | 0) >> 2])));
   label$10 : {
    label$11 : {
     if (!((HEAPU8[($8 + 99 | 0) >> 0] | 0) & 1 | 0)) {
      break label$11
     }
     rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
     break label$10;
    }
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[($1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1 + 12 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
   }
   rlVertex2f(Math_fround(Math_fround(HEAPF32[($8 + 64 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 68 | 0) >> 2])));
   label$12 : {
    label$13 : {
     if (!((HEAPU8[($8 + 99 | 0) >> 0] | 0) & 1 | 0)) {
      break label$13
     }
     rlTexCoord2f(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
     break label$12;
    }
    rlTexCoord2f(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2]) + Math_fround(HEAPF32[($1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($8 + 104 | 0) >> 2]))), Math_fround(Math_fround(Math_fround(HEAPF32[($1 + 4 | 0) >> 2]) / Math_fround(HEAPF32[($8 + 100 | 0) >> 2]))));
   }
   rlVertex2f(Math_fround(Math_fround(HEAPF32[($8 + 80 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8 + 84 | 0) >> 2])));
   rlEnd();
   rlSetTexture(0 | 0);
  }
  __stack_pointer = $8 + 112 | 0;
  return;
 }
 
 function TraceLog($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $33 = 0, $78 = 0, $68 = 0, $69 = 0;
  $5 = __stack_pointer - 288 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 284 | 0) >> 2] = $0;
  HEAP32[($5 + 280 | 0) >> 2] = $1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 284 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 86544 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($5 + 276 | 0) >> 2] = $2;
   label$3 : {
    if (!((HEAP32[(0 + 102788 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[(0 + 102788 | 0) >> 2] | 0 | 0](HEAP32[($5 + 284 | 0) >> 2] | 0, HEAP32[($5 + 280 | 0) >> 2] | 0, HEAP32[($5 + 276 | 0) >> 2] | 0);
    break label$1;
   }
   __memset($5 + 16 | 0 | 0, 0 | 0, 256 | 0) | 0;
   $33 = (HEAP32[($5 + 284 | 0) >> 2] | 0) + -1 | 0;
   label$4 : {
    label$5 : {
     switch ($33 | 0) {
     case 0:
      strcpy($5 + 16 | 0 | 0, 74783 | 0) | 0;
      break label$4;
     case 1:
      strcpy($5 + 16 | 0 | 0, 74765 | 0) | 0;
      break label$4;
     case 2:
      strcpy($5 + 16 | 0 | 0, 74750 | 0) | 0;
      break label$4;
     case 3:
      strcpy($5 + 16 | 0 | 0, 74773 | 0) | 0;
      break label$4;
     case 4:
      strcpy($5 + 16 | 0 | 0, 74742 | 0) | 0;
      break label$4;
     case 5:
      strcpy($5 + 16 | 0 | 0, 74757 | 0) | 0;
      break label$4;
     default:
      break label$5;
     };
    }
   }
   HEAP32[($5 + 12 | 0) >> 2] = strlen(HEAP32[($5 + 280 | 0) >> 2] | 0 | 0) | 0;
   $68 = ($5 + 16 | 0) + (strlen($5 + 16 | 0 | 0) | 0) | 0;
   $69 = HEAP32[($5 + 280 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     if (!((HEAP32[($5 + 12 | 0) >> 2] | 0) >>> 0 < 244 >>> 0 & 1 | 0)) {
      break label$13
     }
     $78 = HEAP32[($5 + 12 | 0) >> 2] | 0;
     break label$12;
    }
    $78 = 244;
   }
   __memcpy($68 | 0, $69 | 0, $78 | 0) | 0;
   strcat($5 + 16 | 0 | 0, 75713 | 0) | 0;
   vprintf($5 + 16 | 0 | 0, HEAP32[($5 + 276 | 0) >> 2] | 0 | 0) | 0;
   fflush(HEAP32[(0 + 83680 | 0) >> 2] | 0 | 0) | 0;
   if (!((HEAP32[($5 + 284 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
    break label$1
   }
   exit(1 | 0);
   wasm2js_trap();
  }
  __stack_pointer = $5 + 288 | 0;
  return;
 }
 
 function SaveFileData($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $83 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 88 | 0) >> 2] = $0;
  HEAP32[($5 + 84 | 0) >> 2] = $1;
  HEAP32[($5 + 80 | 0) >> 2] = $2;
  HEAP8[($5 + 79 | 0) >> 0] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($5 + 88 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      if (!((HEAP32[(0 + 102792 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[($5 + 95 | 0) >> 0] = (FUNCTION_TABLE[HEAP32[(0 + 102792 | 0) >> 2] | 0 | 0](HEAP32[($5 + 88 | 0) >> 2] | 0, HEAP32[($5 + 84 | 0) >> 2] | 0, HEAP32[($5 + 80 | 0) >> 2] | 0) | 0) & 1 | 0;
      break label$1;
     }
     HEAP32[($5 + 72 | 0) >> 2] = fopen(HEAP32[($5 + 88 | 0) >> 2] | 0 | 0, 71634 | 0) | 0;
     label$5 : {
      label$6 : {
       if (!((HEAP32[($5 + 72 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$6
       }
       HEAP32[($5 + 68 | 0) >> 2] = fwrite(HEAP32[($5 + 84 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($5 + 80 | 0) >> 2] | 0 | 0, HEAP32[($5 + 72 | 0) >> 2] | 0 | 0) | 0;
       label$7 : {
        label$8 : {
         if (HEAP32[($5 + 68 | 0) >> 2] | 0) {
          break label$8
         }
         HEAP32[$5 >> 2] = HEAP32[($5 + 88 | 0) >> 2] | 0;
         TraceLog(4 | 0, 70264 | 0, $5 | 0);
         break label$7;
        }
        label$9 : {
         label$10 : {
          if (!((HEAP32[($5 + 68 | 0) >> 2] | 0 | 0) != (HEAP32[($5 + 80 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$10
          }
          HEAP32[($5 + 16 | 0) >> 2] = HEAP32[($5 + 88 | 0) >> 2] | 0;
          TraceLog(4 | 0, 68689 | 0, $5 + 16 | 0 | 0);
          break label$9;
         }
         HEAP32[($5 + 32 | 0) >> 2] = HEAP32[($5 + 88 | 0) >> 2] | 0;
         TraceLog(3 | 0, 65746 | 0, $5 + 32 | 0 | 0);
        }
       }
       HEAP32[($5 + 64 | 0) >> 2] = fclose(HEAP32[($5 + 72 | 0) >> 2] | 0 | 0) | 0;
       label$11 : {
        if (HEAP32[($5 + 64 | 0) >> 2] | 0) {
         break label$11
        }
        HEAP8[($5 + 79 | 0) >> 0] = 1;
       }
       break label$5;
      }
      HEAP32[($5 + 48 | 0) >> 2] = HEAP32[($5 + 88 | 0) >> 2] | 0;
      TraceLog(4 | 0, 70231 | 0, $5 + 48 | 0 | 0);
     }
     break label$2;
    }
    TraceLog(4 | 0, 70619 | 0, 0 | 0);
   }
   HEAP8[($5 + 95 | 0) >> 0] = (HEAPU8[($5 + 79 | 0) >> 0] | 0) & 1 | 0;
  }
  $83 = (HEAPU8[($5 + 95 | 0) >> 0] | 0) & 1 | 0;
  __stack_pointer = $5 + 96 | 0;
  return $83 | 0;
 }
 
 function __getTypeName($0) {
  $0 = $0 | 0;
  return strdup(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function _embind_initialize_bindings() {
  var $0 = 0;
  label$1 : {
   $0 = HEAP32[(0 + 102796 | 0) >> 2] | 0;
   if (!$0) {
    break label$1
   }
   label$2 : while (1) {
    FUNCTION_TABLE[HEAP32[$0 >> 2] | 0 | 0]();
    $0 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function embind_init_builtin_28_29() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  _embind_register_void(84456 | 0, 70614 | 0);
  _embind_register_bool(84468 | 0, 68925 | 0, 1 | 0, 1 | 0, 0 | 0);
  _embind_register_integer(84480 | 0, 68507 | 0, 1 | 0, -128 | 0, 127 | 0);
  _embind_register_integer(84504 | 0, 68500 | 0, 1 | 0, -128 | 0, 127 | 0);
  _embind_register_integer(84492 | 0, 68498 | 0, 1 | 0, 0 | 0, 255 | 0);
  _embind_register_integer(84516 | 0, 67122 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  _embind_register_integer(84528 | 0, 67113 | 0, 2 | 0, 0 | 0, 65535 | 0);
  _embind_register_integer(84540 | 0, 67164 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  _embind_register_integer(84552 | 0, 67155 | 0, 4 | 0, 0 | 0, -1 | 0);
  _embind_register_integer(84564 | 0, 69553 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  _embind_register_integer(84576 | 0, 69544 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  legalfunc$_embind_register_bigint(84588 | 0, 67274 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  legalfunc$_embind_register_bigint(84600 | 0, 67273 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  _embind_register_float(84612 | 0, 67240 | 0, 4 | 0);
  _embind_register_float(84624 | 0, 70298 | 0, 8 | 0);
  _embind_register_std_string(79292 | 0, 69571 | 0);
  _embind_register_std_string(79364 | 0, 73102 | 0);
  _embind_register_std_wstring(79436 | 0, 4 | 0, 69558 | 0);
  _embind_register_std_wstring(79512 | 0, 2 | 0, 69583 | 0);
  _embind_register_std_wstring(79588 | 0, 4 | 0, 69598 | 0);
  _embind_register_emval(79616 | 0, 69006 | 0);
  _embind_register_memory_view(79656 | 0, 0 | 0, 73033 | 0);
  _embind_register_memory_view(79696 | 0, 0 | 0, 73135 | 0);
  _embind_register_memory_view(79736 | 0, 1 | 0, 73063 | 0);
  _embind_register_memory_view(79776 | 0, 2 | 0, 72598 | 0);
  _embind_register_memory_view(79816 | 0, 3 | 0, 72629 | 0);
  _embind_register_memory_view(79856 | 0, 4 | 0, 72669 | 0);
  _embind_register_memory_view(79896 | 0, 5 | 0, 72698 | 0);
  _embind_register_memory_view(79936 | 0, 4 | 0, 73172 | 0);
  _embind_register_memory_view(79976 | 0, 5 | 0, 73202 | 0);
  _embind_register_memory_view(79696 | 0, 0 | 0, 72800 | 0);
  _embind_register_memory_view(79736 | 0, 1 | 0, 72767 | 0);
  _embind_register_memory_view(79776 | 0, 2 | 0, 72866 | 0);
  _embind_register_memory_view(79816 | 0, 3 | 0, 72832 | 0);
  _embind_register_memory_view(79856 | 0, 4 | 0, 73e3 | 0);
  _embind_register_memory_view(79896 | 0, 5 | 0, 72966 | 0);
  _embind_register_memory_view(80016 | 0, 8 | 0, 72933 | 0);
  _embind_register_memory_view(80056 | 0, 9 | 0, 72899 | 0);
  _embind_register_memory_view(80096 | 0, 6 | 0, 72736 | 0);
  _embind_register_memory_view(80136 | 0, 7 | 0, 73241 | 0);
 }
 
 function _GLOBAL__sub_I_bind_cpp() {
  HEAP32[(0 + 102800 | 0) >> 2] = 28;
  HEAP32[(0 + 102804 | 0) >> 2] = 0;
  embind_init_builtin_28_29();
  HEAP32[(0 + 102804 | 0) >> 2] = HEAP32[(0 + 102796 | 0) >> 2] | 0;
  HEAP32[(0 + 102796 | 0) >> 2] = 102800;
 }
 
 function emscripten_GetProcAddress($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $0 = strcpy(dlmalloc((strlen($0 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $0 | 0) | 0;
   $1 = strstr($0 | 0, 72053 | 0) | 0;
   if (!$1) {
    break label$1
   }
   HEAP8[$1 >> 0] = 0;
  }
  label$2 : {
   $1 = strstr($0 | 0, 72469 | 0) | 0;
   if (!$1) {
    break label$2
   }
   HEAP8[$1 >> 0] = 0;
  }
  label$3 : {
   $1 = strstr($0 | 0, 72143 | 0) | 0;
   if (!$1) {
    break label$3
   }
   HEAP8[$1 >> 0] = 0;
  }
  label$4 : {
   $1 = strstr($0 | 0, 72278 | 0) | 0;
   if (!$1) {
    break label$4
   }
   HEAP8[$1 >> 0] = 0;
  }
  label$5 : {
   $1 = strstr($0 | 0, 72177 | 0) | 0;
   if (!$1) {
    break label$5
   }
   HEAP8[$1 >> 0] = 0;
  }
  label$6 : {
   $1 = emscripten_webgl1_get_proc_address($0 | 0) | 0;
   if ($1) {
    break label$6
   }
   $1 = _webgl1_match_ext_proc_address_without_suffix($0 | 0) | 0;
  }
  dlfree($0 | 0);
  return $1 | 0;
 }
 
 function glfwGetProcAddress($0) {
  $0 = $0 | 0;
  return emscripten_GetProcAddress($0 | 0) | 0 | 0;
 }
 
 function _webgl1_match_ext_proc_address_without_suffix($0) {
  $0 = $0 | 0;
  label$1 : {
   if (strcmp($0 | 0, 67702 | 0) | 0) {
    break label$1
   }
   return 29 | 0;
  }
  label$2 : {
   if (strcmp($0 | 0, 67715 | 0) | 0) {
    break label$2
   }
   return 30 | 0;
  }
  label$3 : {
   if (strcmp($0 | 0, 65561 | 0) | 0) {
    break label$3
   }
   return 31 | 0;
  }
  label$4 : {
   if (strcmp($0 | 0, 65571 | 0) | 0) {
    break label$4
   }
   return 32 | 0;
  }
  label$5 : {
   if (strcmp($0 | 0, 65584 | 0) | 0) {
    break label$5
   }
   return 33 | 0;
  }
  label$6 : {
   if (strcmp($0 | 0, 68070 | 0) | 0) {
    break label$6
   }
   return 34 | 0;
  }
  label$7 : {
   if (strcmp($0 | 0, 66503 | 0) | 0) {
    break label$7
   }
   return 35 | 0;
  }
  label$8 : {
   if (strcmp($0 | 0, 66536 | 0) | 0) {
    break label$8
   }
   return 36 | 0;
  }
  label$9 : {
   if (strcmp($0 | 0, 66516 | 0) | 0) {
    break label$9
   }
   return 37 | 0;
  }
  label$10 : {
   if (strcmp($0 | 0, 67081 | 0) | 0) {
    break label$10
   }
   return 38 | 0;
  }
  label$11 : {
   if (strcmp($0 | 0, 67059 | 0) | 0) {
    break label$11
   }
   return 39 | 0;
  }
  label$12 : {
   if (strcmp($0 | 0, 66298 | 0) | 0) {
    break label$12
   }
   return 40 | 0;
  }
  label$13 : {
   if (strcmp($0 | 0, 67350 | 0) | 0) {
    break label$13
   }
   return 41 | 0;
  }
  label$14 : {
   if (strcmp($0 | 0, 67332 | 0) | 0) {
    break label$14
   }
   return 42 | 0;
  }
  label$15 : {
   if (strcmp($0 | 0, 66282 | 0) | 0) {
    break label$15
   }
   return 43 | 0;
  }
  label$16 : {
   if (strcmp($0 | 0, 67594 | 0) | 0) {
    break label$16
   }
   return 44 | 0;
  }
  label$17 : {
   if (strcmp($0 | 0, 71363 | 0) | 0) {
    break label$17
   }
   return 45 | 0;
  }
  label$18 : {
   if (strcmp($0 | 0, 71385 | 0) | 0) {
    break label$18
   }
   return 46 | 0;
  }
  return (strcmp($0 | 0, 67999 | 0) | 0 ? 0 : 47) | 0;
 }
 
 function emscripten_webgl1_get_proc_address($0) {
  $0 = $0 | 0;
  label$1 : {
   if (strcmp($0 | 0, 70187 | 0) | 0) {
    break label$1
   }
   return 48 | 0;
  }
  label$2 : {
   if (strcmp($0 | 0, 68386 | 0) | 0) {
    break label$2
   }
   return 49 | 0;
  }
  label$3 : {
   if (strcmp($0 | 0, 68668 | 0) | 0) {
    break label$3
   }
   return 50 | 0;
  }
  label$4 : {
   if (strcmp($0 | 0, 68316 | 0) | 0) {
    break label$4
   }
   return 51 | 0;
  }
  label$5 : {
   if (strcmp($0 | 0, 68287 | 0) | 0) {
    break label$5
   }
   return 52 | 0;
  }
  label$6 : {
   if (strcmp($0 | 0, 68252 | 0) | 0) {
    break label$6
   }
   return 53 | 0;
  }
  label$7 : {
   if (strcmp($0 | 0, 70203 | 0) | 0) {
    break label$7
   }
   return 54 | 0;
  }
  label$8 : {
   if (strcmp($0 | 0, 68057 | 0) | 0) {
    break label$8
   }
   return 55 | 0;
  }
  label$9 : {
   if (strcmp($0 | 0, 68611 | 0) | 0) {
    break label$9
   }
   return 56 | 0;
  }
  label$10 : {
   if (strcmp($0 | 0, 69883 | 0) | 0) {
    break label$10
   }
   return 57 | 0;
  }
  label$11 : {
   if (strcmp($0 | 0, 71588 | 0) | 0) {
    break label$11
   }
   return 58 | 0;
  }
  label$12 : {
   if (strcmp($0 | 0, 69951 | 0) | 0) {
    break label$12
   }
   return 59 | 0;
  }
  label$13 : {
   if (strcmp($0 | 0, 71659 | 0) | 0) {
    break label$13
   }
   return 60 | 0;
  }
  label$14 : {
   if (strcmp($0 | 0, 71672 | 0) | 0) {
    break label$14
   }
   return 61 | 0;
  }
  label$15 : {
   if (strcmp($0 | 0, 67384 | 0) | 0) {
    break label$15
   }
   return 62 | 0;
  }
  label$16 : {
   if (strcmp($0 | 0, 68512 | 0) | 0) {
    break label$16
   }
   return 63 | 0;
  }
  label$17 : {
   if (strcmp($0 | 0, 68044 | 0) | 0) {
    break label$17
   }
   return 64 | 0;
  }
  label$18 : {
   if (strcmp($0 | 0, 69719 | 0) | 0) {
    break label$18
   }
   return 65 | 0;
  }
  label$19 : {
   if (strcmp($0 | 0, 68930 | 0) | 0) {
    break label$19
   }
   return 66 | 0;
  }
  label$20 : {
   if (strcmp($0 | 0, 69035 | 0) | 0) {
    break label$20
   }
   return 67 | 0;
  }
  label$21 : {
   if (strcmp($0 | 0, 68446 | 0) | 0) {
    break label$21
   }
   return 68 | 0;
  }
  label$22 : {
   if (strcmp($0 | 0, 72352 | 0) | 0) {
    break label$22
   }
   return 69 | 0;
  }
  label$23 : {
   if (strcmp($0 | 0, 72411 | 0) | 0) {
    break label$23
   }
   return 70 | 0;
  }
  label$24 : {
   if (strcmp($0 | 0, 72322 | 0) | 0) {
    break label$24
   }
   return 71 | 0;
  }
  label$25 : {
   if (strcmp($0 | 0, 72375 | 0) | 0) {
    break label$25
   }
   return 72 | 0;
  }
  label$26 : {
   if (strcmp($0 | 0, 68878 | 0) | 0) {
    break label$26
   }
   return 73 | 0;
  }
  label$27 : {
   if (strcmp($0 | 0, 68431 | 0) | 0) {
    break label$27
   }
   return 74 | 0;
  }
  label$28 : {
   if (strcmp($0 | 0, 70588 | 0) | 0) {
    break label$28
   }
   return 75 | 0;
  }
  label$29 : {
   if (strcmp($0 | 0, 67621 | 0) | 0) {
    break label$29
   }
   return 76 | 0;
  }
  label$30 : {
   if (strcmp($0 | 0, 67573 | 0) | 0) {
    break label$30
   }
   return 77 | 0;
  }
  label$31 : {
   if (strcmp($0 | 0, 68862 | 0) | 0) {
    break label$31
   }
   return 78 | 0;
  }
  label$32 : {
   if (strcmp($0 | 0, 67533 | 0) | 0) {
    break label$32
   }
   return 79 | 0;
  }
  label$33 : {
   if (strcmp($0 | 0, 68416 | 0) | 0) {
    break label$33
   }
   return 80 | 0;
  }
  label$34 : {
   if (strcmp($0 | 0, 67685 | 0) | 0) {
    break label$34
   }
   return 81 | 0;
  }
  label$35 : {
   if (strcmp($0 | 0, 71576 | 0) | 0) {
    break label$35
   }
   return 82 | 0;
  }
  label$36 : {
   if (strcmp($0 | 0, 69061 | 0) | 0) {
    break label$36
   }
   return 83 | 0;
  }
  label$37 : {
   if (strcmp($0 | 0, 69733 | 0) | 0) {
    break label$37
   }
   return 84 | 0;
  }
  label$38 : {
   if (strcmp($0 | 0, 68401 | 0) | 0) {
    break label$38
   }
   return 85 | 0;
  }
  label$39 : {
   if (strcmp($0 | 0, 70305 | 0) | 0) {
    break label$39
   }
   return 86 | 0;
  }
  label$40 : {
   if (strcmp($0 | 0, 66316 | 0) | 0) {
    break label$40
   }
   return 87 | 0;
  }
  label$41 : {
   if (strcmp($0 | 0, 67371 | 0) | 0) {
    break label$41
   }
   return 88 | 0;
  }
  label$42 : {
   if (strcmp($0 | 0, 67409 | 0) | 0) {
    break label$42
   }
   return 89 | 0;
  }
  label$43 : {
   if (strcmp($0 | 0, 70315 | 0) | 0) {
    break label$43
   }
   return 90 | 0;
  }
  label$44 : {
   if (strcmp($0 | 0, 66343 | 0) | 0) {
    break label$44
   }
   return 91 | 0;
  }
  label$45 : {
   if (strcmp($0 | 0, 69393 | 0) | 0) {
    break label$45
   }
   return 92 | 0;
  }
  label$46 : {
   if (strcmp($0 | 0, 69385 | 0) | 0) {
    break label$46
   }
   return 93 | 0;
  }
  label$47 : {
   if (strcmp($0 | 0, 68226 | 0) | 0) {
    break label$47
   }
   return 94 | 0;
  }
  label$48 : {
   if (strcmp($0 | 0, 72299 | 0) | 0) {
    break label$48
   }
   return 95 | 0;
  }
  label$49 : {
   if (strcmp($0 | 0, 70576 | 0) | 0) {
    break label$49
   }
   return 96 | 0;
  }
  label$50 : {
   if (strcmp($0 | 0, 67608 | 0) | 0) {
    break label$50
   }
   return 97 | 0;
  }
  label$51 : {
   if (strcmp($0 | 0, 68552 | 0) | 0) {
    break label$51
   }
   return 98 | 0;
  }
  label$52 : {
   if (strcmp($0 | 0, 67555 | 0) | 0) {
    break label$52
   }
   return 99 | 0;
  }
  label$53 : {
   if (strcmp($0 | 0, 67514 | 0) | 0) {
    break label$53
   }
   return 100 | 0;
  }
  label$54 : {
   if (strcmp($0 | 0, 67671 | 0) | 0) {
    break label$54
   }
   return 101 | 0;
  }
  label$55 : {
   if (strcmp($0 | 0, 71637 | 0) | 0) {
    break label$55
   }
   return 102 | 0;
  }
  label$56 : {
   if (strcmp($0 | 0, 68749 | 0) | 0) {
    break label$56
   }
   return 103 | 0;
  }
  label$57 : {
   if (strcmp($0 | 0, 67637 | 0) | 0) {
    break label$57
   }
   return 104 | 0;
  }
  label$58 : {
   if (strcmp($0 | 0, 68648 | 0) | 0) {
    break label$58
   }
   return 105 | 0;
  }
  label$59 : {
   if (strcmp($0 | 0, 66489 | 0) | 0) {
    break label$59
   }
   return 106 | 0;
  }
  label$60 : {
   if (strcmp($0 | 0, 66659 | 0) | 0) {
    break label$60
   }
   return 107 | 0;
  }
  label$61 : {
   if (strcmp($0 | 0, 68021 | 0) | 0) {
    break label$61
   }
   return 108 | 0;
  }
  label$62 : {
   if (strcmp($0 | 0, 66437 | 0) | 0) {
    break label$62
   }
   return 109 | 0;
  }
  label$63 : {
   if (strcmp($0 | 0, 66592 | 0) | 0) {
    break label$63
   }
   return 110 | 0;
  }
  label$64 : {
   if (strcmp($0 | 0, 66475 | 0) | 0) {
    break label$64
   }
   return 111 | 0;
  }
  label$65 : {
   if (strcmp($0 | 0, 66711 | 0) | 0) {
    break label$65
   }
   return 112 | 0;
  }
  label$66 : {
   if (strcmp($0 | 0, 69505 | 0) | 0) {
    break label$66
   }
   return 113 | 0;
  }
  label$67 : {
   if (strcmp($0 | 0, 66630 | 0) | 0) {
    break label$67
   }
   return 114 | 0;
  }
  label$68 : {
   if (strcmp($0 | 0, 66682 | 0) | 0) {
    break label$68
   }
   return 115 | 0;
  }
  label$69 : {
   if (strcmp($0 | 0, 69486 | 0) | 0) {
    break label$69
   }
   return 116 | 0;
  }
  label$70 : {
   if (strcmp($0 | 0, 67246 | 0) | 0) {
    break label$70
   }
   return 117 | 0;
  }
  label$71 : {
   if (strcmp($0 | 0, 70507 | 0) | 0) {
    break label$71
   }
   return 118 | 0;
  }
  label$72 : {
   if (strcmp($0 | 0, 69613 | 0) | 0) {
    break label$72
   }
   return 119 | 0;
  }
  label$73 : {
   if (strcmp($0 | 0, 66798 | 0) | 0) {
    break label$73
   }
   return 120 | 0;
  }
  label$74 : {
   if (strcmp($0 | 0, 66555 | 0) | 0) {
    break label$74
   }
   return 121 | 0;
  }
  label$75 : {
   if (strcmp($0 | 0, 66835 | 0) | 0) {
    break label$75
   }
   return 122 | 0;
  }
  label$76 : {
   if (strcmp($0 | 0, 66696 | 0) | 0) {
    break label$76
   }
   return 123 | 0;
  }
  label$77 : {
   if (strcmp($0 | 0, 68627 | 0) | 0) {
    break label$77
   }
   return 124 | 0;
  }
  label$78 : {
   if (strcmp($0 | 0, 66850 | 0) | 0) {
    break label$78
   }
   return 125 | 0;
  }
  label$79 : {
   if (strcmp($0 | 0, 66726 | 0) | 0) {
    break label$79
   }
   return 126 | 0;
  }
  label$80 : {
   if (strcmp($0 | 0, 66449 | 0) | 0) {
    break label$80
   }
   return 127 | 0;
  }
  label$81 : {
   if (strcmp($0 | 0, 67148 | 0) | 0) {
    break label$81
   }
   return 128 | 0;
  }
  label$82 : {
   if (strcmp($0 | 0, 68305 | 0) | 0) {
    break label$82
   }
   return 129 | 0;
  }
  label$83 : {
   if (strcmp($0 | 0, 71329 | 0) | 0) {
    break label$83
   }
   return 130 | 0;
  }
  label$84 : {
   if (strcmp($0 | 0, 68271 | 0) | 0) {
    break label$84
   }
   return 131 | 0;
  }
  label$85 : {
   if (strcmp($0 | 0, 68836 | 0) | 0) {
    break label$85
   }
   return 132 | 0;
  }
  label$86 : {
   if (strcmp($0 | 0, 68209 | 0) | 0) {
    break label$86
   }
   return 133 | 0;
  }
  label$87 : {
   if (strcmp($0 | 0, 68375 | 0) | 0) {
    break label$87
   }
   return 134 | 0;
  }
  label$88 : {
   if (strcmp($0 | 0, 70175 | 0) | 0) {
    break label$88
   }
   return 135 | 0;
  }
  label$89 : {
   if (strcmp($0 | 0, 69373 | 0) | 0) {
    break label$89
   }
   return 136 | 0;
  }
  label$90 : {
   if (strcmp($0 | 0, 68848 | 0) | 0) {
    break label$90
   }
   return 137 | 0;
  }
  label$91 : {
   if (strcmp($0 | 0, 69094 | 0) | 0) {
    break label$91
   }
   return 138 | 0;
  }
  label$92 : {
   if (strcmp($0 | 0, 67182 | 0) | 0) {
    break label$92
   }
   return 139 | 0;
  }
  label$93 : {
   if (strcmp($0 | 0, 67658 | 0) | 0) {
    break label$93
   }
   return 140 | 0;
  }
  label$94 : {
   if (strcmp($0 | 0, 68185 | 0) | 0) {
    break label$94
   }
   return 141 | 0;
  }
  label$95 : {
   if (strcmp($0 | 0, 70324 | 0) | 0) {
    break label$95
   }
   return 142 | 0;
  }
  label$96 : {
   if (strcmp($0 | 0, 70346 | 0) | 0) {
    break label$96
   }
   return 143 | 0;
  }
  label$97 : {
   if (strcmp($0 | 0, 67989 | 0) | 0) {
    break label$97
   }
   return 144 | 0;
  }
  label$98 : {
   if (strcmp($0 | 0, 65595 | 0) | 0) {
    break label$98
   }
   return 145 | 0;
  }
  label$99 : {
   if (strcmp($0 | 0, 70525 | 0) | 0) {
    break label$99
   }
   return 146 | 0;
  }
  label$100 : {
   if (strcmp($0 | 0, 71562 | 0) | 0) {
    break label$100
   }
   return 147 | 0;
  }
  label$101 : {
   if (strcmp($0 | 0, 69929 | 0) | 0) {
    break label$101
   }
   return 148 | 0;
  }
  label$102 : {
   if (strcmp($0 | 0, 69047 | 0) | 0) {
    break label$102
   }
   return 149 | 0;
  }
  label$103 : {
   if (strcmp($0 | 0, 69907 | 0) | 0) {
    break label$103
   }
   return 150 | 0;
  }
  label$104 : {
   if (strcmp($0 | 0, 68569 | 0) | 0) {
    break label$104
   }
   return 151 | 0;
  }
  label$105 : {
   if (strcmp($0 | 0, 69863 | 0) | 0) {
    break label$105
   }
   return 152 | 0;
  }
  label$106 : {
   if (strcmp($0 | 0, 72339 | 0) | 0) {
    break label$106
   }
   return 153 | 0;
  }
  label$107 : {
   if (strcmp($0 | 0, 69678 | 0) | 0) {
    break label$107
   }
   return 154 | 0;
  }
  label$108 : {
   if (strcmp($0 | 0, 66818 | 0) | 0) {
    break label$108
   }
   return 155 | 0;
  }
  label$109 : {
   if (strcmp($0 | 0, 69073 | 0) | 0) {
    break label$109
   }
   return 156 | 0;
  }
  label$110 : {
   if (strcmp($0 | 0, 66575 | 0) | 0) {
    break label$110
   }
   return 157 | 0;
  }
  label$111 : {
   if (strcmp($0 | 0, 72395 | 0) | 0) {
    break label$111
   }
   return 158 | 0;
  }
  label$112 : {
   if (strcmp($0 | 0, 69834 | 0) | 0) {
    break label$112
   }
   return 159 | 0;
  }
  label$113 : {
   if (strcmp($0 | 0, 67020 | 0) | 0) {
    break label$113
   }
   return 160 | 0;
  }
  label$114 : {
   if (strcmp($0 | 0, 69144 | 0) | 0) {
    break label$114
   }
   return 161 | 0;
  }
  label$115 : {
   if (strcmp($0 | 0, 66785 | 0) | 0) {
    break label$115
   }
   return 162 | 0;
  }
  label$116 : {
   if (strcmp($0 | 0, 69805 | 0) | 0) {
    break label$116
   }
   return 163 | 0;
  }
  label$117 : {
   if (strcmp($0 | 0, 66989 | 0) | 0) {
    break label$117
   }
   return 164 | 0;
  }
  label$118 : {
   if (strcmp($0 | 0, 69132 | 0) | 0) {
    break label$118
   }
   return 165 | 0;
  }
  label$119 : {
   if (strcmp($0 | 0, 66772 | 0) | 0) {
    break label$119
   }
   return 166 | 0;
  }
  label$120 : {
   if (strcmp($0 | 0, 69776 | 0) | 0) {
    break label$120
   }
   return 167 | 0;
  }
  label$121 : {
   if (strcmp($0 | 0, 66939 | 0) | 0) {
    break label$121
   }
   return 168 | 0;
  }
  label$122 : {
   if (strcmp($0 | 0, 69120 | 0) | 0) {
    break label$122
   }
   return 169 | 0;
  }
  label$123 : {
   if (strcmp($0 | 0, 66759 | 0) | 0) {
    break label$123
   }
   return 170 | 0;
  }
  label$124 : {
   if (strcmp($0 | 0, 69747 | 0) | 0) {
    break label$124
   }
   return 171 | 0;
  }
  label$125 : {
   if (strcmp($0 | 0, 66889 | 0) | 0) {
    break label$125
   }
   return 172 | 0;
  }
  label$126 : {
   if (strcmp($0 | 0, 69108 | 0) | 0) {
    break label$126
   }
   return 173 | 0;
  }
  label$127 : {
   if (strcmp($0 | 0, 66746 | 0) | 0) {
    break label$127
   }
   return 174 | 0;
  }
  label$128 : {
   if (strcmp($0 | 0, 66970 | 0) | 0) {
    break label$128
   }
   return 175 | 0;
  }
  label$129 : {
   if (strcmp($0 | 0, 66920 | 0) | 0) {
    break label$129
   }
   return 176 | 0;
  }
  label$130 : {
   if (strcmp($0 | 0, 66870 | 0) | 0) {
    break label$130
   }
   return 177 | 0;
  }
  label$131 : {
   if (strcmp($0 | 0, 68912 | 0) | 0) {
    break label$131
   }
   return 178 | 0;
  }
  label$132 : {
   if (strcmp($0 | 0, 68894 | 0) | 0) {
    break label$132
   }
   return 179 | 0;
  }
  label$133 : {
   if (strcmp($0 | 0, 69846 | 0) | 0) {
    break label$133
   }
   return 180 | 0;
  }
  label$134 : {
   if (strcmp($0 | 0, 67033 | 0) | 0) {
    break label$134
   }
   return 181 | 0;
  }
  label$135 : {
   if (strcmp($0 | 0, 69817 | 0) | 0) {
    break label$135
   }
   return 182 | 0;
  }
  label$136 : {
   if (strcmp($0 | 0, 67002 | 0) | 0) {
    break label$136
   }
   return 183 | 0;
  }
  label$137 : {
   if (strcmp($0 | 0, 69788 | 0) | 0) {
    break label$137
   }
   return 184 | 0;
  }
  label$138 : {
   if (strcmp($0 | 0, 66952 | 0) | 0) {
    break label$138
   }
   return 185 | 0;
  }
  label$139 : {
   if (strcmp($0 | 0, 69759 | 0) | 0) {
    break label$139
   }
   return 186 | 0;
  }
  label$140 : {
   if (strcmp($0 | 0, 66902 | 0) | 0) {
    break label$140
   }
   return 187 | 0;
  }
  label$141 : {
   if (strcmp($0 | 0, 68085 | 0) | 0) {
    break label$141
   }
   return 188 | 0;
  }
  label$142 : {
   if (strcmp($0 | 0, 67102 | 0) | 0) {
    break label$142
   }
   return 189 | 0;
  }
  label$143 : {
   if (strcmp($0 | 0, 71927 | 0) | 0) {
    break label$143
   }
   return 29 | 0;
  }
  label$144 : {
   if (strcmp($0 | 0, 71943 | 0) | 0) {
    break label$144
   }
   return 30 | 0;
  }
  label$145 : {
   if (strcmp($0 | 0, 71774 | 0) | 0) {
    break label$145
   }
   return 31 | 0;
  }
  label$146 : {
   if (strcmp($0 | 0, 71787 | 0) | 0) {
    break label$146
   }
   return 32 | 0;
  }
  label$147 : {
   if (strcmp($0 | 0, 71803 | 0) | 0) {
    break label$147
   }
   return 33 | 0;
  }
  label$148 : {
   if (strcmp($0 | 0, 71987 | 0) | 0) {
    break label$148
   }
   return 34 | 0;
  }
  label$149 : {
   if (strcmp($0 | 0, 71817 | 0) | 0) {
    break label$149
   }
   return 35 | 0;
  }
  label$150 : {
   if (strcmp($0 | 0, 71856 | 0) | 0) {
    break label$150
   }
   return 36 | 0;
  }
  label$151 : {
   if (strcmp($0 | 0, 71833 | 0) | 0) {
    break label$151
   }
   return 37 | 0;
  }
  label$152 : {
   if (strcmp($0 | 0, 71903 | 0) | 0) {
    break label$152
   }
   return 38 | 0;
  }
  label$153 : {
   if (strcmp($0 | 0, 71878 | 0) | 0) {
    break label$153
   }
   return 39 | 0;
  }
  label$154 : {
   if (strcmp($0 | 0, 72081 | 0) | 0) {
    break label$154
   }
   return 40 | 0;
  }
  label$155 : {
   if (strcmp($0 | 0, 72123 | 0) | 0) {
    break label$155
   }
   return 41 | 0;
  }
  label$156 : {
   if (strcmp($0 | 0, 72102 | 0) | 0) {
    break label$156
   }
   return 42 | 0;
  }
  label$157 : {
   if (strcmp($0 | 0, 72062 | 0) | 0) {
    break label$157
   }
   return 43 | 0;
  }
  label$158 : {
   if (strcmp($0 | 0, 72164 | 0) | 0) {
    break label$158
   }
   return 44 | 0;
  }
  label$159 : {
   if (strcmp($0 | 0, 72228 | 0) | 0) {
    break label$159
   }
   return 45 | 0;
  }
  label$160 : {
   if (strcmp($0 | 0, 72255 | 0) | 0) {
    break label$160
   }
   return 46 | 0;
  }
  return (strcmp($0 | 0, 72201 | 0) | 0 ? 0 : 47) | 0;
 }
 
 function __cxa_atexit($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return 0 | 0;
 }
 
 function abs($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0 >> 31 | 0;
  return ($0 ^ $1 | 0) - $1 | 0 | 0;
 }
 
 function acosf($0) {
  $0 = Math_fround($0);
  var $3 = Math_fround(0), $2 = 0, $1 = 0, $4 = Math_fround(0);
  label$1 : {
   $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
   $2 = $1 & 2147483647 | 0;
   if ($2 >>> 0 < 1065353216 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($2 | 0) != (1065353216 | 0)) {
     break label$2
    }
    return Math_fround(($1 | 0) > (-1 | 0) ? Math_fround(0.0) : Math_fround(3.141592502593994));
   }
   return Math_fround(Math_fround(Math_fround(0.0) / Math_fround($0 - $0)));
  }
  label$3 : {
   label$4 : {
    if ($2 >>> 0 > 1056964607 >>> 0) {
     break label$4
    }
    $3 = Math_fround(1.570796251296997);
    if ($2 >>> 0 < 847249409 >>> 0) {
     break label$3
    }
    return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround($0 * Math_fround(R(Math_fround(Math_fround($0 * $0)))))) - $0) + Math_fround(1.570796251296997)));
   }
   label$5 : {
    if (($1 | 0) > (-1 | 0)) {
     break label$5
    }
    $0 = Math_fround(Math_fround($0 + Math_fround(1.0)) * Math_fround(.5));
    $3 = Math_fround(sqrtf(Math_fround($0)));
    $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($3 + Math_fround(Math_fround($3 * Math_fround(R(Math_fround($0)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround(Math_fround($0 + $0));
   }
   $3 = Math_fround(Math_fround(Math_fround(1.0) - $0) * Math_fround(.5));
   $4 = Math_fround(sqrtf(Math_fround($3)));
   $0 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(2)) & -4096 | 0), wasm2js_scratch_load_f32());
   $0 = Math_fround(Math_fround(Math_fround($4 * Math_fround(R(Math_fround($3)))) + Math_fround(Math_fround($3 - Math_fround($0 * $0)) / Math_fround($4 + $0))) + $0);
   $3 = Math_fround($0 + $0);
  }
  return Math_fround($3);
 }
 
 function R($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0))));
 }
 
 function atan2f($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0, $4 = 0, $6 = Math_fround(0), $5 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if (((__FLOAT_BITS(Math_fround($1)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0) {
     break label$2
    }
    if (((__FLOAT_BITS(Math_fround($0)) | 0) & 2147483647 | 0) >>> 0 < 2139095041 >>> 0) {
     break label$1
    }
   }
   return Math_fround(Math_fround($0 + $1));
  }
  label$3 : {
   $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
   if (($2 | 0) != (1065353216 | 0)) {
    break label$3
   }
   return Math_fround(Math_fround(atanf(Math_fround($0))));
  }
  $3 = ($2 >>> 30 | 0) & 2 | 0;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $5 = $3 | ($4 >>> 31 | 0) | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     $4 = $4 & 2147483647 | 0;
     if ($4) {
      break label$6
     }
     $6 = $0;
     label$7 : {
      switch ($5 | 0) {
      case 2:
       return Math_fround(Math_fround(3.1415927410125732));
      case 3:
       break label$7;
      default:
       break label$5;
      };
     }
     return Math_fround(Math_fround(-3.1415927410125732));
    }
    label$9 : {
     $2 = $2 & 2147483647 | 0;
     if (($2 | 0) == (2139095040 | 0)) {
      break label$9
     }
     label$10 : {
      if ($2) {
       break label$10
      }
      return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
     }
     label$11 : {
      label$12 : {
       if (($4 | 0) == (2139095040 | 0)) {
        break label$12
       }
       if (($2 + 218103808 | 0) >>> 0 >= $4 >>> 0) {
        break label$11
       }
      }
      return Math_fround((wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.5707963705062866)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
     }
     label$13 : {
      label$14 : {
       if (!$3) {
        break label$14
       }
       $6 = Math_fround(0.0);
       if (($4 + 218103808 | 0) >>> 0 < $2 >>> 0) {
        break label$13
       }
      }
      $6 = Math_fround(atanf(Math_fround(Math_fround(fabsf(Math_fround(Math_fround($0 / $1)))))));
     }
     label$15 : {
      switch ($5 | 0) {
      case 1:
       return Math_fround(Math_fround(-$6));
      case 2:
       return Math_fround(Math_fround(Math_fround(3.1415927410125732) - Math_fround($6 + Math_fround(8.742277657347586e-08))));
      case 0:
       break label$5;
      default:
       break label$15;
      };
     }
     return Math_fround(Math_fround(Math_fround($6 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732)));
    }
    if (($4 | 0) == (2139095040 | 0)) {
     break label$4
    }
    $6 = Math_fround(HEAPF32[(($5 << 2 | 0) + 80160 | 0) >> 2]);
   }
   return Math_fround($6);
  }
  return Math_fround(Math_fround(HEAPF32[(($5 << 2 | 0) + 80144 | 0) >> 2]));
 }
 
 function __FLOAT_BITS($0) {
  $0 = Math_fround($0);
  return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function atanf($0) {
  $0 = Math_fround($0);
  var $2 = 0, $5 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $1 = 0, $6 = Math_fround(0);
  label$1 : {
   $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
   $2 = $1 & 2147483647 | 0;
   if ($2 >>> 0 < 1283457024 >>> 0) {
    break label$1
   }
   return Math_fround(((__FLOAT_BITS_1(Math_fround($0)) | 0) & 2147483647 | 0) >>> 0 > 2139095040 >>> 0 ? $0 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32(Math_fround(1.570796251296997)), wasm2js_scratch_load_i32(2)) & 2147483647 | 0 | ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
  }
  label$2 : {
   label$3 : {
    label$4 : {
     if ($2 >>> 0 > 1054867455 >>> 0) {
      break label$4
     }
     $3 = -1;
     if ($2 >>> 0 >= 964689920 >>> 0) {
      break label$3
     }
     break label$2;
    }
    $0 = Math_fround(fabsf(Math_fround($0)));
    label$5 : {
     if ($2 >>> 0 > 1066926079 >>> 0) {
      break label$5
     }
     label$6 : {
      if ($2 >>> 0 > 1060110335 >>> 0) {
       break label$6
      }
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $3 = 0;
      break label$3;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $3 = 1;
     break label$3;
    }
    label$7 : {
     if ($2 >>> 0 > 1075576831 >>> 0) {
      break label$7
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $3 = 2;
     break label$3;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $3 = 3;
   }
   $4 = Math_fround($0 * $0);
   $5 = Math_fround($4 * $4);
   $6 = Math_fround($5 * Math_fround(Math_fround($5 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $5 = Math_fround($4 * Math_fround(Math_fround($5 * Math_fround(Math_fround($5 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   label$8 : {
    if ($2 >>> 0 > 1054867455 >>> 0) {
     break label$8
    }
    return Math_fround(Math_fround($0 - Math_fround($0 * Math_fround($6 + $5))));
   }
   $2 = $3 << 2 | 0;
   $0 = Math_fround(Math_fround(HEAPF32[($2 + 80176 | 0) >> 2]) - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $5)) - Math_fround(HEAPF32[($2 + 80192 | 0) >> 2])) - $0));
   $0 = ($1 | 0) < (0 | 0) ? Math_fround(-$0) : $0;
  }
  return Math_fround($0);
 }
 
 function __FLOAT_BITS_1($0) {
  $0 = Math_fround($0);
  return (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) | 0;
 }
 
 function dummy($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __rem_pio2_large($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $21 = 0.0, $11 = 0, $6 = 0, $5 = 0, $22 = 0.0, $13 = 0, $14 = 0, $8 = 0, $9 = 0, $20 = 0, $10 = 0, $18 = 0, $12 = 0, $23 = 0.0, $7 = 0, $16 = 0, $19 = 0, $15 = 0, $17 = 0, $206 = 0, $209 = 0, $521 = 0.0, $559 = 0.0;
  $5 = __stack_pointer - 560 | 0;
  __stack_pointer = $5;
  $6 = ($2 + -3 | 0 | 0) / (24 | 0) | 0;
  $7 = ($6 | 0) > (0 | 0) ? $6 : 0;
  $8 = Math_imul($7, -24) + $2 | 0;
  label$1 : {
   $9 = HEAP32[(($4 << 2 | 0) + 80208 | 0) >> 2] | 0;
   $10 = $3 + -1 | 0;
   if (($9 + $10 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11 = $9 + $3 | 0;
   $2 = $7 - $10 | 0;
   $6 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2 | 0) >= (0 | 0)) {
       break label$4
      }
      $21 = 0.0;
      break label$3;
     }
     $21 = +(HEAP32[(($2 << 2 | 0) + 80224 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = $21;
    $2 = $2 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($11 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12 = $8 + -24 | 0;
  $11 = 0;
  $13 = ($9 | 0) > (0 | 0) ? $9 : 0;
  $14 = ($3 | 0) < (1 | 0);
  label$5 : while (1) {
   label$6 : {
    label$7 : {
     if (!$14) {
      break label$7
     }
     $21 = 0.0;
     break label$6;
    }
    $6 = $11 + $10 | 0;
    $2 = 0;
    $21 = 0.0;
    label$8 : while (1) {
     $21 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $21;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $21;
   $2 = ($11 | 0) == ($13 | 0);
   $11 = $11 + 1 | 0;
   if (!$2) {
    continue label$5
   }
   break label$5;
  };
  $15 = 47 - $8 | 0;
  $16 = 48 - $8 | 0;
  $17 = $8 + -25 | 0;
  $11 = $9;
  label$9 : {
   label$10 : while (1) {
    $21 = +HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3];
    $2 = 0;
    $6 = $11;
    label$11 : {
     $10 = ($11 | 0) < (1 | 0);
     if ($10) {
      break label$11
     }
     label$12 : while (1) {
      $13 = $2 << 2 | 0;
      label$13 : {
       label$14 : {
        $22 = $21 * 5.9604644775390625e-08;
        if (!(Math_abs($22) < 2147483648.0)) {
         break label$14
        }
        $14 = ~~$22;
        break label$13;
       }
       $14 = -2147483648;
      }
      $13 = ($5 + 480 | 0) + $13 | 0;
      label$15 : {
       label$16 : {
        $22 = +($14 | 0);
        $21 = $22 * -16777216.0 + $21;
        if (!(Math_abs($21) < 2147483648.0)) {
         break label$16
        }
        $14 = ~~$21;
        break label$15;
       }
       $14 = -2147483648;
      }
      HEAP32[$13 >> 2] = $14;
      $6 = $6 + -1 | 0;
      $21 = +HEAPF64[($5 + ($6 << 3 | 0) | 0) >> 3] + $22;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($11 | 0)) {
       continue label$12
      }
      break label$12;
     };
    }
    $21 = +scalbn(+$21, $12 | 0);
    label$17 : {
     label$18 : {
      $21 = $21 + +floor(+($21 * .125)) * -8.0;
      if (!(Math_abs($21) < 2147483648.0)) {
       break label$18
      }
      $18 = ~~$21;
      break label$17;
     }
     $18 = -2147483648;
    }
    $21 = $21 - +($18 | 0);
    label$19 : {
     label$20 : {
      label$21 : {
       label$22 : {
        label$23 : {
         $19 = ($12 | 0) < (1 | 0);
         if ($19) {
          break label$23
         }
         $2 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
         $206 = $2;
         $2 = HEAP32[$2 >> 2] | 0;
         $209 = $2;
         $2 = $2 >> $16 | 0;
         $6 = $209 - ($2 << $16 | 0) | 0;
         HEAP32[$206 >> 2] = $6;
         $20 = $6 >> $15 | 0;
         $18 = $2 + $18 | 0;
         break label$22;
        }
        if ($12) {
         break label$21
        }
        $20 = (HEAP32[((($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20 | 0) < (1 | 0)) {
        break label$19
       }
       break label$20;
      }
      $20 = 2;
      if ($21 >= .5) {
       break label$20
      }
      $20 = 0;
      break label$19;
     }
     $2 = 0;
     $14 = 0;
     label$24 : {
      if ($10) {
       break label$24
      }
      label$25 : while (1) {
       $10 = ($5 + 480 | 0) + ($2 << 2 | 0) | 0;
       $6 = HEAP32[$10 >> 2] | 0;
       $13 = 16777215;
       label$26 : {
        label$27 : {
         if ($14) {
          break label$27
         }
         $13 = 16777216;
         if ($6) {
          break label$27
         }
         $14 = 0;
         break label$26;
        }
        HEAP32[$10 >> 2] = $13 - $6 | 0;
        $14 = 1;
       }
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     label$28 : {
      if ($19) {
       break label$28
      }
      $2 = 8388607;
      label$29 : {
       switch ($17 | 0) {
       case 1:
        $2 = 4194303;
        break;
       case 0:
        break label$29;
       default:
        break label$28;
       };
      }
      $6 = (($11 << 2 | 0) + ($5 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) & $2 | 0;
     }
     $18 = $18 + 1 | 0;
     if (($20 | 0) != (2 | 0)) {
      break label$19
     }
     $21 = 1.0 - $21;
     $20 = 2;
     if (!$14) {
      break label$19
     }
     $21 = $21 - +scalbn(+(1.0), $12 | 0);
    }
    label$31 : {
     if ($21 != 0.0) {
      break label$31
     }
     $6 = 0;
     $2 = $11;
     label$32 : {
      if (($2 | 0) <= ($9 | 0)) {
       break label$32
      }
      label$33 : while (1) {
       $2 = $2 + -1 | 0;
       $6 = HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | $6 | 0;
       if (($2 | 0) > ($9 | 0)) {
        continue label$33
       }
       break label$33;
      };
      if (!$6) {
       break label$32
      }
      $8 = $12;
      label$34 : while (1) {
       $8 = $8 + -24 | 0;
       $11 = $11 + -1 | 0;
       if (!(HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$34
       }
       break label$9;
      };
     }
     $2 = 1;
     label$35 : while (1) {
      $6 = $2;
      $2 = $2 + 1 | 0;
      if (!(HEAP32[(($5 + 480 | 0) + (($9 - $6 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$35
      }
      break label$35;
     };
     $13 = $6 + $11 | 0;
     label$36 : while (1) {
      $6 = $11 + $3 | 0;
      $11 = $11 + 1 | 0;
      HEAPF64[(($5 + 320 | 0) + ($6 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11 + $7 | 0) << 2 | 0) + 80224 | 0) >> 2] | 0 | 0);
      $2 = 0;
      $21 = 0.0;
      label$37 : {
       if (($3 | 0) < (1 | 0)) {
        break label$37
       }
       label$38 : while (1) {
        $21 = +HEAPF64[($0 + ($2 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5 + 320 | 0) + (($6 - $2 | 0) << 3 | 0) | 0) >> 3] + $21;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($3 | 0)) {
         continue label$38
        }
        break label$38;
       };
      }
      HEAPF64[($5 + ($11 << 3 | 0) | 0) >> 3] = $21;
      if (($11 | 0) < ($13 | 0)) {
       continue label$36
      }
      break label$36;
     };
     $11 = $13;
     continue label$10;
    }
    break label$10;
   };
   label$39 : {
    label$40 : {
     $21 = +scalbn(+$21, 24 - $8 | 0 | 0);
     if (!($21 >= 16777216.0)) {
      break label$40
     }
     $3 = $11 << 2 | 0;
     label$41 : {
      label$42 : {
       $22 = $21 * 5.9604644775390625e-08;
       if (!(Math_abs($22) < 2147483648.0)) {
        break label$42
       }
       $2 = ~~$22;
       break label$41;
      }
      $2 = -2147483648;
     }
     $3 = ($5 + 480 | 0) + $3 | 0;
     label$43 : {
      label$44 : {
       $21 = +($2 | 0) * -16777216.0 + $21;
       if (!(Math_abs($21) < 2147483648.0)) {
        break label$44
       }
       $6 = ~~$21;
       break label$43;
      }
      $6 = -2147483648;
     }
     HEAP32[$3 >> 2] = $6;
     $11 = $11 + 1 | 0;
     break label$39;
    }
    label$45 : {
     label$46 : {
      if (!(Math_abs($21) < 2147483648.0)) {
       break label$46
      }
      $2 = ~~$21;
      break label$45;
     }
     $2 = -2147483648;
    }
    $8 = $12;
   }
   HEAP32[(($5 + 480 | 0) + ($11 << 2 | 0) | 0) >> 2] = $2;
  }
  $21 = +scalbn(+(1.0), $8 | 0);
  label$47 : {
   if (($11 | 0) <= (-1 | 0)) {
    break label$47
   }
   $3 = $11;
   label$48 : while (1) {
    $2 = $3;
    HEAPF64[($5 + ($2 << 3 | 0) | 0) >> 3] = $21 * +(HEAP32[(($5 + 480 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0 | 0);
    $3 = $2 + -1 | 0;
    $21 = $21 * 5.9604644775390625e-08;
    if ($2) {
     continue label$48
    }
    break label$48;
   };
   if (($11 | 0) <= (-1 | 0)) {
    break label$47
   }
   $6 = $11;
   label$49 : while (1) {
    $21 = 0.0;
    $2 = 0;
    label$50 : {
     $13 = $11 - $6 | 0;
     $0 = ($9 | 0) < ($13 | 0) ? $9 : $13;
     if (($0 | 0) < (0 | 0)) {
      break label$50
     }
     label$51 : while (1) {
      $21 = +HEAPF64[(($2 << 3 | 0) + 82992 | 0) >> 3] * +HEAPF64[($5 + (($2 + $6 | 0) << 3 | 0) | 0) >> 3] + $21;
      $3 = ($2 | 0) != ($0 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$51
      }
      break label$51;
     };
    }
    HEAPF64[(($5 + 160 | 0) + ($13 << 3 | 0) | 0) >> 3] = $21;
    $2 = ($6 | 0) > (0 | 0);
    $6 = $6 + -1 | 0;
    if ($2) {
     continue label$49
    }
    break label$49;
   };
  }
  label$52 : {
   label$53 : {
    label$54 : {
     switch ($4 | 0) {
     case 3:
      $23 = 0.0;
      label$57 : {
       if (($11 | 0) < (1 | 0)) {
        break label$57
       }
       $21 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$58 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $22 = +HEAPF64[$6 >> 3];
        $521 = $22;
        $22 = $22 + $21;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $21 + ($521 - $22);
        HEAPF64[$6 >> 3] = $22;
        $6 = $2 >>> 0 > 1 >>> 0;
        $21 = $22;
        $2 = $3;
        if ($6) {
         continue label$58
        }
        break label$58;
       };
       if (($11 | 0) < (2 | 0)) {
        break label$57
       }
       $21 = +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
       $2 = $11;
       label$59 : while (1) {
        $3 = $2 + -1 | 0;
        $6 = ($5 + 160 | 0) + ($3 << 3 | 0) | 0;
        $22 = +HEAPF64[$6 >> 3];
        $559 = $22;
        $22 = $22 + $21;
        HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3] = $21 + ($559 - $22);
        HEAPF64[$6 >> 3] = $22;
        $6 = $2 >>> 0 > 2 >>> 0;
        $21 = $22;
        $2 = $3;
        if ($6) {
         continue label$59
        }
        break label$59;
       };
       $23 = 0.0;
       if (($11 | 0) <= (1 | 0)) {
        break label$57
       }
       label$60 : while (1) {
        $23 = $23 + +HEAPF64[(($5 + 160 | 0) + ($11 << 3 | 0) | 0) >> 3];
        $2 = ($11 | 0) > (2 | 0);
        $11 = $11 + -1 | 0;
        if ($2) {
         continue label$60
        }
        break label$60;
       };
      }
      $21 = +HEAPF64[($5 + 160 | 0) >> 3];
      if ($20) {
       break label$53
      }
      HEAPF64[$1 >> 3] = $21;
      $21 = +HEAPF64[($5 + 168 | 0) >> 3];
      HEAPF64[($1 + 16 | 0) >> 3] = $23;
      HEAPF64[($1 + 8 | 0) >> 3] = $21;
      break label$52;
     case 0:
      $21 = 0.0;
      label$61 : {
       if (($11 | 0) < (0 | 0)) {
        break label$61
       }
       label$62 : while (1) {
        $2 = $11;
        $11 = $2 + -1 | 0;
        $21 = $21 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
        if ($2) {
         continue label$62
        }
        break label$62;
       };
      }
      HEAPF64[$1 >> 3] = $20 ? -$21 : $21;
      break label$52;
     case 1:
     case 2:
      break label$54;
     default:
      break label$52;
     };
    }
    $21 = 0.0;
    label$63 : {
     if (($11 | 0) < (0 | 0)) {
      break label$63
     }
     $3 = $11;
     label$64 : while (1) {
      $2 = $3;
      $3 = $2 + -1 | 0;
      $21 = $21 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      if ($2) {
       continue label$64
      }
      break label$64;
     };
    }
    HEAPF64[$1 >> 3] = $20 ? -$21 : $21;
    $21 = +HEAPF64[($5 + 160 | 0) >> 3] - $21;
    $2 = 1;
    label$65 : {
     if (($11 | 0) < (1 | 0)) {
      break label$65
     }
     label$66 : while (1) {
      $21 = $21 + +HEAPF64[(($5 + 160 | 0) + ($2 << 3 | 0) | 0) >> 3];
      $3 = ($2 | 0) != ($11 | 0);
      $2 = $2 + 1 | 0;
      if ($3) {
       continue label$66
      }
      break label$66;
     };
    }
    HEAPF64[($1 + 8 | 0) >> 3] = $20 ? -$21 : $21;
    break label$52;
   }
   HEAPF64[$1 >> 3] = -$21;
   $21 = +HEAPF64[($5 + 168 | 0) >> 3];
   HEAPF64[($1 + 16 | 0) >> 3] = -$23;
   HEAPF64[($1 + 8 | 0) >> 3] = -$21;
  }
  __stack_pointer = $5 + 560 | 0;
  return $18 & 7 | 0 | 0;
 }
 
 function __cosdf($0) {
  $0 = +$0;
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround(Math_fround($0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1.0))));
 }
 
 function __sindf($0) {
  $0 = +$0;
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $1 * $0;
  return Math_fround(Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0)));
 }
 
 function __rem_pio2f($0, $1) {
  $0 = Math_fround($0);
  $1 = $1 | 0;
  var $4 = 0, $7 = 0.0, $2 = 0, $3 = 0, $6 = 0.0, $8 = 0.0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if ($4 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $6 = +$0;
    $7 = $6 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $8 = $6 + $7 * -1.5707963109016418 + $7 * -1.5893254773528196e-08;
    HEAPF64[$1 >> 3] = $8;
    $3 = $8 < -.7853981852531433;
    label$3 : {
     label$4 : {
      if (!(Math_abs($7) < 2147483648.0)) {
       break label$4
      }
      $4 = ~~$7;
      break label$3;
     }
     $4 = -2147483648;
    }
    label$5 : {
     if (!$3) {
      break label$5
     }
     $7 = $7 + -1.0;
     HEAPF64[$1 >> 3] = $6 + $7 * -1.5707963109016418 + $7 * -1.5893254773528196e-08;
     $4 = $4 + -1 | 0;
     break label$1;
    }
    if (!($8 > .7853981852531433)) {
     break label$1
    }
    $7 = $7 + 1.0;
    HEAPF64[$1 >> 3] = $6 + $7 * -1.5707963109016418 + $7 * -1.5893254773528196e-08;
    $4 = $4 + 1 | 0;
    break label$1;
   }
   label$6 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$6
    }
    HEAPF64[$1 >> 3] = +Math_fround($0 - $0);
    $4 = 0;
    break label$1;
   }
   $5 = ($4 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(2, $4 - ($5 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4 = __rem_pio2_large($2 + 8 | 0 | 0, $2 | 0, $5 | 0, 1 | 0, 0 | 0) | 0;
   $7 = +HEAPF64[$2 >> 3];
   label$7 : {
    if (($3 | 0) > (-1 | 0)) {
     break label$7
    }
    HEAPF64[$1 >> 3] = -$7;
    $4 = 0 - $4 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $7;
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function cosf($0) {
  $0 = Math_fround($0);
  var $4 = Math_fround(0), $1 = 0, $3 = 0, $2 = 0, $5 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $3 = $2 & 2147483647 | 0;
    if ($3 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4 = Math_fround(1.0);
    if ($3 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4 = Math_fround(__cosdf(+(+$0)));
    break label$1;
   }
   label$3 : {
    if ($3 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    label$4 : {
     if ($3 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4 = Math_fround(-Math_fround(__cosdf(+((($2 | 0) < (0 | 0) ? 3.141592653589793 : -3.141592653589793) + +$0))));
     break label$1;
    }
    $5 = +$0;
    label$5 : {
     if (($2 | 0) > (-1 | 0)) {
      break label$5
     }
     $4 = Math_fround(__sindf(+($5 + 1.5707963267948966)));
     break label$1;
    }
    $4 = Math_fround(__sindf(+(1.5707963267948966 - $5)));
    break label$1;
   }
   label$6 : {
    if ($3 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4 = Math_fround(__cosdf(+((($2 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0)));
     break label$1;
    }
    label$8 : {
     if (($2 | 0) > (-1 | 0)) {
      break label$8
     }
     $4 = Math_fround(__sindf(+(-4.71238898038469 - +$0)));
     break label$1;
    }
    $4 = Math_fround(__sindf(+(+$0 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4 = Math_fround($0 - $0);
    break label$1;
   }
   label$10 : {
    switch ((__rem_pio2f(Math_fround($0), $1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $4 = Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $4 = Math_fround(__sindf(+-+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $4 = Math_fround(-Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3]))));
     break label$1;
    default:
     break label$10;
    };
   }
   $4 = Math_fround(__sindf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
  }
  __stack_pointer = $1 + 16 | 0;
  return Math_fround($4);
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0 & 3 | 0) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($2) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break label$4
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $3 = $0 + $2 | 0;
    if (($1 - $3 | 0) >>> 0 > (0 - ($2 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return __memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $3 = $0;
       break label$3;
      }
      label$7 : {
       if ($0 & 3 | 0) {
        break label$7
       }
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      label$8 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = $3 + 1 | 0;
       if (!($3 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4) {
       break label$9
      }
      label$10 : {
       if (!($3 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $0 + $2 | 0;
        HEAP8[$3 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($3 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$1
     }
     label$13 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function __memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP8[$0 >> 0] = $1;
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __errno_location() {
  return 102808 | 0;
 }
 
 function __time($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $2 = 0, $2$hi = 0, $1 = 0.0, $7 = 0, $8 = 0;
  label$1 : {
   label$2 : {
    $1 = +emscripten_date_now() / 1.0e3;
    if (!(Math_abs($1) < 9223372036854775808.0)) {
     break label$2
    }
    i64toi32_i32$0 = $1;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $7 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $7 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $8 = $7;
    } else {
     $8 = 0
    }
    i64toi32_i32$1 = $8;
    $2 = ~~i64toi32_i32$0 >>> 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = -2147483648;
   $2 = 0;
   $2$hi = i64toi32_i32$1;
  }
  label$3 : {
   if (!$0) {
    break label$3
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = $0;
   HEAP32[i64toi32_i32$2 >> 2] = $2;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function __clock_gettime($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, $2 = 0.0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $4 = 0, $3 = 0.0, $9 = 0, $10 = 0, $4$hi = 0;
  label$1 : {
   if (HEAPU8[(0 + 102812 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP8[(0 + 102813 | 0) >> 0] = _emscripten_get_now_is_monotonic() | 0;
   HEAP8[102812 >> 0] = 1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      switch ($0 | 0) {
      case 0:
       break label$3;
      case 1:
      case 4:
       break label$5;
      default:
       break label$4;
      };
     }
     if (!(HEAPU8[(0 + 102813 | 0) >> 0] | 0)) {
      break label$4
     }
     $2 = +emscripten_get_now();
     break label$2;
    }
    HEAP32[(__errno_location() | 0) >> 2] = 28;
    return -1 | 0;
   }
   $2 = +emscripten_date_now();
  }
  label$6 : {
   label$7 : {
    $3 = $2 / 1.0e3;
    if (!(Math_abs($3) < 9223372036854775808.0)) {
     break label$7
    }
    i64toi32_i32$0 = $3;
    if (Math_abs(i64toi32_i32$0) >= 1.0) {
     if (i64toi32_i32$0 > 0.0) {
      $9 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
     } else {
      $9 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
     }
     $10 = $9;
    } else {
     $10 = 0
    }
    i64toi32_i32$1 = $10;
    $4 = ~~i64toi32_i32$0 >>> 0;
    $4$hi = i64toi32_i32$1;
    break label$6;
   }
   i64toi32_i32$1 = -2147483648;
   $4 = 0;
   $4$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $1;
  HEAP32[i64toi32_i32$2 >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  label$8 : {
   label$9 : {
    i64toi32_i32$2 = 0;
    i64toi32_i32$2 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, 1e3 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $2 = ($2 - (+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 | 0))) * 1.0e3 * 1.0e3;
    if (!(Math_abs($2) < 2147483648.0)) {
     break label$9
    }
    $0 = ~~$2;
    break label$8;
   }
   $0 = -2147483648;
  }
  HEAP32[($1 + 8 | 0) >> 2] = $0;
  return 0 | 0;
 }
 
 function fabsf($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_abs($0)));
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function dummy_1($0) {
  $0 = $0 | 0;
 }
 
 function fclose($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $5 = 0, $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1 = 1;
    break label$1;
   }
   $1 = !(__lockfile($0 | 0) | 0);
  }
  $2 = fflush($0 | 0) | 0;
  $3 = FUNCTION_TABLE[HEAP32[($0 + 12 | 0) >> 2] | 0 | 0]($0) | 0;
  label$3 : {
   if ($1) {
    break label$3
   }
   __unlockfile($0 | 0);
  }
  label$4 : {
   if ((HEAPU8[$0 >> 0] | 0) & 1 | 0) {
    break label$4
   }
   dummy_1($0 | 0);
   $1 = __ofl_lock() | 0;
   label$5 : {
    $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
    if (!$4) {
     break label$5
    }
    HEAP32[($4 + 56 | 0) >> 2] = HEAP32[($0 + 56 | 0) >> 2] | 0;
   }
   label$6 : {
    $5 = HEAP32[($0 + 56 | 0) >> 2] | 0;
    if (!$5) {
     break label$6
    }
    HEAP32[($5 + 52 | 0) >> 2] = $4;
   }
   label$7 : {
    if ((HEAP32[$1 >> 2] | 0 | 0) != ($0 | 0)) {
     break label$7
    }
    HEAP32[$1 >> 2] = $5;
   }
   __ofl_unlock();
   dlfree(HEAP32[($0 + 96 | 0) >> 2] | 0 | 0);
   dlfree($0 | 0);
  }
  return $3 | $2 | 0 | 0;
 }
 
 function fflush($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$0 = 0, $3 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   $1 = 0;
   label$2 : {
    if (!(HEAP32[(0 + 86696 | 0) >> 2] | 0)) {
     break label$2
    }
    $1 = fflush(HEAP32[(0 + 86696 | 0) >> 2] | 0 | 0) | 0;
   }
   label$3 : {
    if (!(HEAP32[(0 + 86848 | 0) >> 2] | 0)) {
     break label$3
    }
    $1 = fflush(HEAP32[(0 + 86848 | 0) >> 2] | 0 | 0) | 0 | $1 | 0;
   }
   label$4 : {
    $0 = HEAP32[(__ofl_lock() | 0) >> 2] | 0;
    if (!$0) {
     break label$4
    }
    label$5 : while (1) {
     $2 = 0;
     label$6 : {
      if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$6
      }
      $2 = __lockfile($0 | 0) | 0;
     }
     label$7 : {
      if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
      $1 = fflush($0 | 0) | 0 | $1 | 0;
     }
     label$8 : {
      if (!$2) {
       break label$8
      }
      __unlockfile($0 | 0);
     }
     $0 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     if ($0) {
      continue label$5
     }
     break label$5;
    };
   }
   __ofl_unlock();
   return $1 | 0;
  }
  $2 = 0;
  label$9 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$9
   }
   $2 = __lockfile($0 | 0) | 0;
  }
  label$10 : {
   label$11 : {
    label$12 : {
     if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
     if (HEAP32[($0 + 20 | 0) >> 2] | 0) {
      break label$12
     }
     $1 = -1;
     if ($2) {
      break label$11
     }
     break label$10;
    }
    label$13 : {
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if (($1 | 0) == ($3 | 0)) {
      break label$13
     }
     i64toi32_i32$1 = $1 - $3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1 = 0;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0;
    i64toi32_i32$1 = 0;
    HEAP32[($0 + 4 | 0) >> 2] = 0;
    HEAP32[($0 + 8 | 0) >> 2] = i64toi32_i32$1;
    if (!$2) {
     break label$10
    }
   }
   __unlockfile($0 | 0);
  }
  return $1 | 0;
 }
 
 function floor($0) {
  $0 = +$0;
  return +Math_floor($0);
 }
 
 function __fmodeflags($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 2;
  label$1 : {
   if (strchr($0 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1 = (HEAPU8[$0 >> 0] | 0 | 0) != (114 | 0);
  }
  $1 = strchr($0 | 0, 120 | 0) | 0 ? $1 | 128 | 0 : $1;
  $1 = strchr($0 | 0, 101 | 0) | 0 ? $1 | 524288 | 0 : $1;
  $0 = HEAPU8[$0 >> 0] | 0;
  $1 = ($0 | 0) == (114 | 0) ? $1 : $1 | 64 | 0;
  $1 = ($0 | 0) == (119 | 0) ? $1 | 512 | 0 : $1;
  return (($0 | 0) == (97 | 0) ? $1 | 1024 | 0 : $1) | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __lseek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $4 = $3 + 16 | 0;
  $7 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break label$5
       }
       $5 = $4;
       break label$4;
      }
      label$6 : while (1) {
       $1 = HEAP32[($3 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$3
       }
       label$7 : {
        if (($1 | 0) > (-1 | 0)) {
         break label$7
        }
        $5 = $4;
        break label$2;
       }
       $8 = HEAP32[($4 + 4 | 0) >> 2] | 0;
       $9 = $1 >>> 0 > $8 >>> 0;
       $5 = $4 + ($9 << 3 | 0) | 0;
       $8 = $1 - ($9 ? $8 : 0) | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $8 | 0;
       $4 = $4 + ($9 ? 12 : 4) | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) - $8 | 0;
       $6 = $6 - $1 | 0;
       $4 = $5;
       $7 = $7 - $9 | 0;
       if (!(__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $4 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if (($6 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
    HEAP32[($0 + 28 | 0) >> 2] = $1;
    HEAP32[($0 + 20 | 0) >> 2] = $1;
    HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
    $1 = $2;
    break label$1;
   }
   $1 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $1 = $2 - (HEAP32[($5 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $5 = 0, $3 = 0, $4 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  $4 = 0;
  $5 = HEAP32[($0 + 48 | 0) >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $2 - (($5 | 0) != (0 | 0)) | 0;
  $6 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $5;
  HEAP32[($3 + 24 | 0) >> 2] = $6;
  $5 = 32;
  label$1 : {
   label$2 : {
    label$3 : {
     if (__wasi_syscall_ret(__wasi_fd_read(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $3 + 16 | 0 | 0, 2 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
     if (($5 | 0) > (0 | 0)) {
      break label$2
     }
     $5 = $5 ? 32 : 16;
    }
    HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | $5 | 0;
    break label$1;
   }
   $4 = $5;
   $6 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   if ($5 >>> 0 <= $6 >>> 0) {
    break label$1
   }
   $4 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   HEAP32[($0 + 4 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $4 + ($5 - $6 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[(($2 + $1 | 0) + -1 | 0) >> 0] = HEAPU8[$4 >> 0] | 0;
   }
   $4 = $2;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(dummy(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function __fdopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $34 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (strchr(71655 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[(__errno_location() | 0) >> 2] = 28;
      break label$3;
     }
     $3 = dlmalloc(1176 | 0) | 0;
     if ($3) {
      break label$2
     }
    }
    $3 = 0;
    break label$1;
   }
   __memset($3 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if (strchr($1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3 >> 2] = (HEAPU8[$1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1 = HEAP32[$3 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1 = __syscall_fcntl64($0 | 0, 3 | 0, 0 | 0) | 0;
     if ($1 & 1024 | 0) {
      break label$8
     }
     i64toi32_i32$1 = $1 | 1024 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $34 = i64toi32_i32$1;
     i64toi32_i32$1 = $2;
     HEAP32[($2 + 16 | 0) >> 2] = $34;
     HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$0;
     __syscall_fcntl64($0 | 0, 4 | 0, $2 + 16 | 0 | 0) | 0;
    }
    $1 = HEAP32[$3 >> 2] | 0 | 128 | 0;
    HEAP32[$3 >> 2] = $1;
   }
   HEAP32[($3 + 80 | 0) >> 2] = -1;
   HEAP32[($3 + 48 | 0) >> 2] = 1024;
   HEAP32[($3 + 60 | 0) >> 2] = $0;
   HEAP32[($3 + 44 | 0) >> 2] = $3 + 152 | 0;
   label$9 : {
    if ($1 & 8 | 0) {
     break label$9
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $2;
    HEAP32[$2 >> 2] = $2 + 24 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = i64toi32_i32$0;
    if (__syscall_ioctl($0 | 0, 21523 | 0, $2 | 0) | 0) {
     break label$9
    }
    HEAP32[($3 + 80 | 0) >> 2] = 10;
   }
   HEAP32[($3 + 40 | 0) >> 2] = 190;
   HEAP32[($3 + 36 | 0) >> 2] = 191;
   HEAP32[($3 + 32 | 0) >> 2] = 192;
   HEAP32[($3 + 12 | 0) >> 2] = 193;
   label$10 : {
    if (HEAPU8[(0 + 102817 | 0) >> 0] | 0) {
     break label$10
    }
    HEAP32[($3 + 76 | 0) >> 2] = -1;
   }
   $3 = __ofl_add($3 | 0) | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  return $3 | 0;
 }
 
 function fopen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     if (strchr(71655 | 0, HEAP8[$1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[(__errno_location() | 0) >> 2] = 28;
     break label$2;
    }
    $3 = __fmodeflags($1 | 0) | 0;
    HEAP32[$2 >> 2] = 438;
    HEAP32[($2 + 4 | 0) >> 2] = 0;
    $4 = 0;
    $0 = __syscall_ret(__syscall_openat(-100 | 0, $0 | 0, $3 | 32768 | 0 | 0, $2 | 0) | 0 | 0) | 0;
    if (($0 | 0) < (0 | 0)) {
     break label$1
    }
    $4 = __fdopen($0 | 0, $1 | 0) | 0;
    if ($4) {
     break label$1
    }
    __wasi_fd_close($0 | 0) | 0;
   }
   $4 = 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $4 | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    label$6 : while (1) {
     label$7 : {
      $3 = $4;
      if ($3) {
       break label$7
      }
      $3 = 0;
      break label$4;
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   __memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $3 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = Math_imul($2, $1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
    break label$1;
   }
   $5 = __lockfile($3 | 0) | 0;
   $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
   if (!$5) {
    break label$1
   }
   __unlockfile($3 | 0);
  }
  label$3 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$3
   }
   return ($1 ? $2 : 0) | 0;
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function getcwd($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $4 = 0, $5 = 0, $3 = 0;
  $2 = __stack_pointer;
  $3 = $2;
  $4 = 4096;
  $5 = $2 - ($0 ? 16 : 4096) | 0;
  __stack_pointer = $5;
  $2 = $5;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $4 = $1;
    $2 = $0;
    if ($4) {
     break label$2
    }
    HEAP32[(__errno_location() | 0) >> 2] = 28;
    $0 = 0;
    break label$1;
   }
   $0 = 0;
   $4 = __syscall_ret(__syscall_getcwd($2 | 0, $4 | 0) | 0 | 0) | 0;
   if (($4 | 0) < (0 | 0)) {
    break label$1
   }
   label$3 : {
    label$4 : {
     if (!$4) {
      break label$4
     }
     if ((HEAPU8[$2 >> 0] | 0 | 0) == (47 | 0)) {
      break label$3
     }
    }
    HEAP32[(__errno_location() | 0) >> 2] = 44;
    break label$1;
   }
   $0 = $2;
   if (($2 | 0) != ($5 | 0)) {
    break label$1
   }
   $0 = strdup($5 | 0) | 0;
  }
  __stack_pointer = $3;
  return $0 | 0;
 }
 
 function emscripten_futex_wake($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 0 | 0;
 }
 
 function dummy_2($0) {
  $0 = +$0;
 }
 
 function _emscripten_yield($0) {
  $0 = +$0;
  dummy_2(+$0);
 }
 
 function __lock($0) {
  $0 = $0 | 0;
 }
 
 function __unlock($0) {
  $0 = $0 | 0;
 }
 
 function emscripten_thread_sleep($0) {
  $0 = +$0;
  var $2 = 0.0, $1 = 0.0;
  $1 = +emscripten_get_now();
  $2 = $1;
  label$1 : while (1) {
   _emscripten_yield(+$2);
   $2 = +emscripten_get_now();
   if ($2 - $1 < $0) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function __math_invalidf($0) {
  $0 = Math_fround($0);
  $0 = Math_fround($0 - $0);
  return Math_fround(Math_fround($0 / $0));
 }
 
 function __lseek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $2 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2 ? -1 : $1;
  i64toi32_i32$2 = $2 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function memcmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1 | $0 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0 >> 2] | 0 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3 = HEAPU8[$0 >> 0] | 0;
     $4 = HEAPU8[$1 >> 0] | 0;
     if (($3 | 0) != ($4 | 0)) {
      break label$5
     }
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3 - $4 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function __clock_nanosleep($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $7$hi = 0, $4 = 0, $5 = 0, $7 = 0, $8$hi = 0, i64toi32_i32$5 = 0, $6 = 0, $8 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = 28;
  label$1 : {
   if (($0 | 0) == (3 | 0)) {
    break label$1
   }
   if (!$2) {
    break label$1
   }
   $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
   if ($6 >>> 0 > 999999999 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
    $16 = 1
   } else {
    if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $17 = 0
     } else {
      $17 = 1
     }
     $18 = $17;
    } else {
     $18 = 0
    }
    $16 = $18;
   }
   if ($16) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!($1 & 1 | 0)) {
      break label$3
     }
     __clock_gettime($0 | 0, $4 | 0) | 0;
     i64toi32_i32$3 = $2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $7 = i64toi32_i32$2;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $8 = i64toi32_i32$1;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $8;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
      $19 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $20 = 0
       } else {
        $20 = 1
       }
       $21 = $20;
      } else {
       $21 = 0
      }
      $19 = $21;
     }
     if ($19) {
      break label$2
     }
     label$4 : {
      label$5 : {
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$0 = $7;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8;
       if ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0) {
        break label$5
       }
       $2 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
       break label$4;
      }
      $5 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      $2 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      if (($5 | 0) >= ($2 | 0)) {
       break label$2
      }
     }
     $6 = $2 - $5 | 0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$1 = $7;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$5 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $7 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = 0;
    emscripten_thread_sleep(+((+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +($7$hi | 0)) * 1.0e3 + +($6 | 0) / 1.0e6));
   }
   $5 = 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5 | 0;
 }
 
 function nanosleep($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __syscall_ret(0 - (__clock_nanosleep(0 | 0, 0 | 0, $0 | 0, $1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function __ofl_lock() {
  __lock(102872 | 0);
  return 102876 | 0;
 }
 
 function __ofl_unlock() {
  __unlock(102872 | 0);
 }
 
 function __ofl_add($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __ofl_lock() | 0;
  HEAP32[($0 + 56 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
  label$1 : {
   $2 = HEAP32[$1 >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP32[($2 + 52 | 0) >> 2] = $0;
  }
  HEAP32[$1 >> 2] = $0;
  __ofl_unlock();
  return $0 | 0;
 }
 
 function __math_xflowf($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  return Math_fround(Math_fround(Math_fround(fp_barrierf(Math_fround($0 ? Math_fround(-$1) : $1))) * $1));
 }
 
 function fp_barrierf($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF32[($1 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
 }
 
 function __math_oflowf($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround(__math_xflowf($0 | 0, Math_fround(Math_fround(1584563250285286751870879.0e5)))));
 }
 
 function __math_uflowf($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround(__math_xflowf($0 | 0, Math_fround(Math_fround(2.524354896707238e-29)))));
 }
 
 function powf($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $4 = 0, $3 = 0, $6 = Math_fround(0), $2 = 0, $5 = 0, $7 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0;
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
  $3 = zeroinfnan($2 | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
       if (($4 + -2139095040 | 0) >>> 0 < -2130706432 >>> 0) {
        break label$5
       }
       $5 = 0;
       if ($3) {
        break label$4
       }
       break label$2;
      }
      if (!$3) {
       break label$3
      }
     }
     $6 = Math_fround(1.0);
     if (($4 | 0) == (1065353216 | 0)) {
      break label$1
     }
     $3 = $2 << 1 | 0;
     if (!$3) {
      break label$1
     }
     label$6 : {
      label$7 : {
       $4 = $4 << 1 | 0;
       if ($4 >>> 0 > -16777216 >>> 0) {
        break label$7
       }
       if ($3 >>> 0 < -16777215 >>> 0) {
        break label$6
       }
      }
      return Math_fround(Math_fround($0 + $1));
     }
     if (($4 | 0) == (2130706432 | 0)) {
      break label$1
     }
     return Math_fround($4 >>> 0 > 2130706431 >>> 0 ^ ($2 | 0) > (-1 | 0) | 0 ? Math_fround(0.0) : Math_fround($1 * $1));
    }
    label$8 : {
     if (!(zeroinfnan($4 | 0) | 0)) {
      break label$8
     }
     $6 = Math_fround($0 * $0);
     label$9 : {
      if (($4 | 0) > (-1 | 0)) {
       break label$9
      }
      $6 = (checkint($2 | 0) | 0 | 0) == (1 | 0) ? Math_fround(-$6) : $6;
     }
     if (($2 | 0) > (-1 | 0)) {
      break label$1
     }
     return Math_fround(Math_fround(fp_barrierf_1(Math_fround(Math_fround(Math_fround(1.0) / $6)))));
    }
    $5 = 0;
    label$10 : {
     if (($4 | 0) > (-1 | 0)) {
      break label$10
     }
     label$11 : {
      $3 = checkint($2 | 0) | 0;
      if ($3) {
       break label$11
      }
      return Math_fround(Math_fround(__math_invalidf(Math_fround($0))));
     }
     $4 = $4 & 2147483647 | 0;
     $5 = (($3 | 0) == (1 | 0)) << 16 | 0;
    }
    if ($4 >>> 0 > 8388607 >>> 0) {
     break label$2
    }
    $4 = ((wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647 | 0) + -192937984 | 0;
   }
   label$12 : {
    $7 = +log2_inline($4 | 0) * +$1;
    wasm2js_scratch_store_f64(+$7);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147450880;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 1079967744;
    i64toi32_i32$3 = 1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$12
    }
    label$13 : {
     if (!($7 > 127.99999995700433)) {
      break label$13
     }
     return Math_fround(Math_fround(__math_oflowf($5 | 0)));
    }
    if (!($7 <= -150.0)) {
     break label$12
    }
    return Math_fround(Math_fround(__math_uflowf($5 | 0)));
   }
   $6 = Math_fround(exp2_inline(+$7, $5 | 0));
  }
  return Math_fround($6);
 }
 
 function zeroinfnan($0) {
  $0 = $0 | 0;
  return (($0 << 1 | 0) + 16777216 | 0) >>> 0 < 16777217 >>> 0 | 0;
 }
 
 function checkint($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = 0;
  label$1 : {
   $2 = ($0 >>> 23 | 0) & 255 | 0;
   if ($2 >>> 0 < 127 >>> 0) {
    break label$1
   }
   $1 = 2;
   if ($2 >>> 0 > 150 >>> 0) {
    break label$1
   }
   $1 = 0;
   $2 = 1 << (150 - $2 | 0) | 0;
   if (($2 + -1 | 0) & $0 | 0) {
    break label$1
   }
   $1 = $2 & $0 | 0 ? 1 : 2;
  }
  return $1 | 0;
 }
 
 function fp_barrierf_1($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF32[($1 + 12 | 0) >> 2] = $0;
  return Math_fround(Math_fround(HEAPF32[($1 + 12 | 0) >> 2]));
 }
 
 function log2_inline($0) {
  $0 = $0 | 0;
  var $2 = 0.0, $1 = 0, $3 = 0.0, $12 = 0.0;
  $1 = $0 + -1060306944 | 0;
  $12 = +(wasm2js_scratch_store_i32(2, $0 - ($1 & -8388608 | 0) | 0), wasm2js_scratch_load_f32());
  $0 = ($1 >>> 15 | 0) & 240 | 0;
  $2 = $12 * +HEAPF64[($0 + 83384 | 0) >> 3] + -1.0;
  $3 = $2 * $2;
  return +((+HEAPF64[(0 + 83640 | 0) >> 3] * $2 + +HEAPF64[(0 + 83648 | 0) >> 3]) * ($3 * $3) + ((+HEAPF64[(0 + 83656 | 0) >> 3] * $2 + +HEAPF64[(0 + 83664 | 0) >> 3]) * $3 + (+HEAPF64[(0 + 83672 | 0) >> 3] * $2 + (+HEAPF64[($0 + 83392 | 0) >> 3] + +($1 >> 23 | 0 | 0)))));
 }
 
 function exp2_inline($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $4$hi = 0, $17 = 0, $27 = 0.0, $32$hi = 0, $34$hi = 0, $40 = 0, $40$hi = 0;
  $2 = +HEAPF64[(0 + 83312 | 0) >> 3];
  $3 = $2 + $0;
  $0 = $0 - ($3 - $2);
  $27 = (+HEAPF64[(0 + 83320 | 0) >> 3] * $0 + +HEAPF64[(0 + 83328 | 0) >> 3]) * ($0 * $0) + (+HEAPF64[(0 + 83336 | 0) >> 3] * $0 + 1.0);
  wasm2js_scratch_store_f64(+$3);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $32$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = $32$hi;
  i64toi32_i32$3 = $1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
   $17 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
  }
  $34$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$5 = (($4 & 31 | 0) << 3 | 0) + 83056 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
  $40 = i64toi32_i32$2;
  $40$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $34$hi;
  i64toi32_i32$5 = $17;
  i64toi32_i32$2 = $40$hi;
  i64toi32_i32$3 = $40;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return Math_fround(Math_fround($27 * +wasm2js_scratch_load_f64()));
 }
 
 function __syscall_getpid() {
  return 42 | 0;
 }
 
 function getpid() {
  return __syscall_getpid() | 0 | 0;
 }
 
 function __get_tp() {
  return 102880 | 0;
 }
 
 function init_pthread_self() {
  HEAP32[(0 + 102976 | 0) >> 2] = 102848;
  HEAP32[(0 + 102904 | 0) >> 2] = getpid() | 0;
 }
 
 function srand($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 103016 | 0) >> 2] = $0 + -1 | 0;
  HEAP32[(i64toi32_i32$1 + 103020 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function round($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3 = 0.0, $1 = 0, $1$hi = 0, $14 = 0, $2 = 0, $15 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $16 = 0.0, $18 = 0.0, $42 = 0.0, $44 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $14 & 2047 | 0;
   if ($2 >>> 0 > 1074 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($2 >>> 0 > 1021 >>> 0) {
     break label$2
    }
    return +($0 * 0.0);
   }
   label$3 : {
    label$4 : {
     $16 = $0;
     $18 = -$0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $15 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $17 = 0
       } else {
        $17 = 1
       }
       $19 = $17;
      } else {
       $19 = 0
      }
      $15 = $19;
     }
     $0 = $15 ? $16 : $18;
     $3 = $0 + 4503599627370496.0 + -4503599627370496.0 - $0;
     if (!($3 > .5)) {
      break label$4
     }
     $0 = $0 + $3 + -1.0;
     break label$3;
    }
    $0 = $0 + $3;
    if (!($3 <= -.5)) {
     break label$3
    }
    $0 = $0 + 1.0;
   }
   $42 = $0;
   $44 = -$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $20 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $21 = 0
     } else {
      $21 = 1
     }
     $22 = $21;
    } else {
     $22 = 0
    }
    $20 = $22;
   }
   $0 = $20 ? $42 : $44;
  }
  return +$0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   label$4 : {
    if ($1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) > (-2960 | 0) ? $1 : -2960) + 1938 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function sinf($0) {
  $0 = Math_fround($0);
  var $1 = 0, $3 = 0, $4 = 0.0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $3 = $2 & 2147483647 | 0;
    if ($3 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0 = Math_fround(__sindf(+(+$0)));
    break label$1;
   }
   label$3 : {
    if ($3 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4 = +$0;
    label$4 : {
     if ($3 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (($2 | 0) > (-1 | 0)) {
       break label$5
      }
      $0 = Math_fround(-Math_fround(__cosdf(+($4 + 1.5707963267948966))));
      break label$1;
     }
     $0 = Math_fround(__cosdf(+($4 + -1.5707963267948966)));
     break label$1;
    }
    $0 = Math_fround(__sindf(+-((($2 | 0) > (-1 | 0) ? -3.141592653589793 : 3.141592653589793) + $4)));
    break label$1;
   }
   label$6 : {
    if ($3 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     $4 = +$0;
     label$8 : {
      if (($2 | 0) > (-1 | 0)) {
       break label$8
      }
      $0 = Math_fround(__cosdf(+($4 + 4.71238898038469)));
      break label$1;
     }
     $0 = Math_fround(-Math_fround(__cosdf(+($4 + -4.71238898038469))));
     break label$1;
    }
    $0 = Math_fround(__sindf(+((($2 | 0) < (0 | 0) ? 6.283185307179586 : -6.283185307179586) + +$0)));
    break label$1;
   }
   label$9 : {
    if ($3 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0 = Math_fround($0 - $0);
    break label$1;
   }
   label$10 : {
    switch ((__rem_pio2f(Math_fround($0), $1 + 8 | 0 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0 = Math_fround(__sindf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 1:
     $0 = Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3])));
     break label$1;
    case 2:
     $0 = Math_fround(__sindf(+-+HEAPF64[($1 + 8 | 0) >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $0 = Math_fround(-Math_fround(__cosdf(+(+HEAPF64[($1 + 8 | 0) >> 3]))));
  }
  __stack_pointer = $1 + 16 | 0;
  return Math_fround($0);
 }
 
 function sprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function sqrtf($0) {
  $0 = Math_fround($0);
  return Math_fround(Math_fround(Math_sqrt($0)));
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function strcat($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  strcpy($0 + (strlen($0 | 0) | 0) | 0 | 0, $1 | 0) | 0;
  return $0 | 0;
 }
 
 function strchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __strchrnul($0 | 0, $1 | 0) | 0;
  return ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0) ? $0 : 0) | 0;
 }
 
 function __strchrnul($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    $2 = $1 & 255 | 0;
    if (!$2) {
     break label$2
    }
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3 = HEAPU8[$0 >> 0] | 0;
      if (!$3) {
       break label$1
      }
      if (($3 | 0) == ($1 & 255 | 0 | 0)) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      if ($0 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3 = HEAP32[$0 >> 2] | 0;
     if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2 = Math_imul($2, 16843009);
     label$6 : while (1) {
      $3 = $3 ^ $2 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      $0 = $0 + 4 | 0;
      if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3 = $0;
      $2 = HEAPU8[$3 >> 0] | 0;
      if (!$2) {
       break label$7
      }
      $0 = $3 + 1 | 0;
      if (($2 | 0) != ($1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3 | 0;
   }
   return $0 + (strlen($0 | 0) | 0) | 0 | 0;
  }
  return $0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function __stpcpy($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!(($1 ^ $0 | 0) & 3 | 0)) {
      break label$3
     }
     $2 = HEAPU8[$1 >> 0] | 0;
     break label$2;
    }
    label$4 : {
     if (!($1 & 3 | 0)) {
      break label$4
     }
     label$5 : while (1) {
      $2 = HEAPU8[$1 >> 0] | 0;
      HEAP8[$0 >> 0] = $2;
      if (!$2) {
       break label$1
      }
      $0 = $0 + 1 | 0;
      $1 = $1 + 1 | 0;
      if ($1 & 3 | 0) {
       continue label$5
      }
      break label$5;
     };
    }
    $2 = HEAP32[$1 >> 2] | 0;
    if ((($2 ^ -1 | 0) & ($2 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$6 : while (1) {
     HEAP32[$0 >> 2] = $2;
     $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $0 = $0 + 4 | 0;
     $1 = $1 + 4 | 0;
     if (!((($2 ^ -1 | 0) & ($2 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   HEAP8[$0 >> 0] = $2;
   if (!($2 & 255 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($0 + 1 | 0) >> 0] = $2;
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    if ($2) {
     continue label$7
    }
    break label$7;
   };
  }
  return $0 | 0;
 }
 
 function strcpy($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  __stpcpy($0 | 0, $1 | 0) | 0;
  return $0 | 0;
 }
 
 function strdup($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = (strlen($0 | 0) | 0) + 1 | 0;
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  return __memcpy($2 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    $1 = $0;
    label$3 : while (1) {
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (HEAPU8[$1 >> 0] | 0) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function __stpncpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($1 ^ $0 | 0) & 3 | 0) {
       break label$4
      }
      $3 = ($2 | 0) != (0 | 0);
      label$5 : {
       if (!($1 & 3 | 0)) {
        break label$5
       }
       if (!$2) {
        break label$5
       }
       label$6 : while (1) {
        $3 = HEAPU8[$1 >> 0] | 0;
        HEAP8[$0 >> 0] = $3;
        if (!$3) {
         break label$1
        }
        $0 = $0 + 1 | 0;
        $2 = $2 + -1 | 0;
        $3 = ($2 | 0) != (0 | 0);
        $1 = $1 + 1 | 0;
        if (!($1 & 3 | 0)) {
         break label$5
        }
        if ($2) {
         continue label$6
        }
        break label$6;
       };
      }
      if (!$3) {
       break label$2
      }
      if (!(HEAPU8[$1 >> 0] | 0)) {
       break label$1
      }
      if ($2 >>> 0 < 4 >>> 0) {
       break label$4
      }
      label$7 : while (1) {
       $3 = HEAP32[$1 >> 2] | 0;
       if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
        break label$3
       }
       HEAP32[$0 >> 2] = $3;
       $0 = $0 + 4 | 0;
       $1 = $1 + 4 | 0;
       $2 = $2 + -4 | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$7
       }
       break label$7;
      };
     }
     if (!$2) {
      break label$2
     }
    }
    label$8 : while (1) {
     $3 = HEAPU8[$1 >> 0] | 0;
     HEAP8[$0 >> 0] = $3;
     if (!$3) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue label$8
     }
     break label$8;
    };
   }
   $2 = 0;
  }
  __memset($0 | 0, 0 | 0, $2 | 0) | 0;
  return $0 | 0;
 }
 
 function strncpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  __stpncpy($0 | 0, $1 | 0, $2 | 0) | 0;
  return $0 | 0;
 }
 
 function strcspn($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     $3 = HEAP8[$1 >> 0] | 0;
     if (!$3) {
      break label$3
     }
     if (HEAPU8[($1 + 1 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4 = __strchrnul($0 | 0, $3 | 0) | 0;
    break label$1;
   }
   __memset($2 | 0, 0 | 0, 32 | 0) | 0;
   label$4 : {
    $3 = HEAPU8[$1 >> 0] | 0;
    if (!$3) {
     break label$4
    }
    label$5 : while (1) {
     $4 = $2 + (($3 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 0 | (1 << $3 | 0) | 0;
     $3 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
     $1 = $1 + 1 | 0;
     if ($3) {
      continue label$5
     }
     break label$5;
    };
   }
   $4 = $0;
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   $1 = $0;
   label$6 : while (1) {
    label$7 : {
     if (!(((HEAP32[($2 + (($3 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $3 | 0) & 1 | 0)) {
      break label$7
     }
     $4 = $1;
     break label$1;
    }
    $3 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $4 = $1 + 1 | 0;
    $1 = $4;
    if ($3) {
     continue label$6
    }
    break label$6;
   };
  }
  __stack_pointer = $2 + 32 | 0;
  return $4 - $0 | 0 | 0;
 }
 
 function strpbrk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = $0 + (strcspn($0 | 0, $1 | 0) | 0) | 0;
  return (HEAPU8[$0 >> 0] | 0 ? $0 : 0) | 0;
 }
 
 function __memrchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $1 = $1 & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2) {
     break label$2
    }
    return 0 | 0;
   }
   $2 = $2 + -1 | 0;
   $3 = $0 + $2 | 0;
   if ((HEAPU8[$3 >> 0] | 0 | 0) != ($1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $3 | 0;
 }
 
 function strrchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return __memrchr($0 | 0, $1 | 0, (strlen($0 | 0) | 0) + 1 | 0 | 0) | 0 | 0;
 }
 
 function memchr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0 & 3 | 0)) {
      break label$3
     }
     if (!$2) {
      break label$3
     }
     $4 = $1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0 >> 0] | 0 | 0) == ($4 | 0)) {
       break label$2
      }
      $2 = $2 + -1 | 0;
      $3 = ($2 | 0) != (0 | 0);
      $0 = $0 + 1 | 0;
      if (!($0 & 3 | 0)) {
       break label$3
      }
      if ($2) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3) {
     break label$1
    }
    label$5 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) == ($1 & 255 | 0 | 0)) {
      break label$5
     }
     if ($2 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $4 = Math_imul($1 & 255 | 0, 16843009);
     label$6 : while (1) {
      $3 = (HEAP32[$0 >> 2] | 0) ^ $4 | 0;
      if ((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$2
      }
      $0 = $0 + 4 | 0;
      $2 = $2 + -4 | 0;
      if ($2 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   $3 = $1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0 >> 0] | 0 | 0) != ($3 | 0)) {
      break label$8
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP8[$1 >> 0] | 0;
   if ($2) {
    break label$1
   }
   return $0 | 0;
  }
  $3 = 0;
  label$2 : {
   $0 = strchr($0 | 0, $2 | 0) | 0;
   if (!$0) {
    break label$2
   }
   label$3 : {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    if ($2) {
     break label$3
    }
    return $0 | 0;
   }
   if (!(HEAPU8[($0 + 1 | 0) >> 0] | 0)) {
    break label$2
   }
   label$4 : {
    if (HEAPU8[($1 + 2 | 0) >> 0] | 0) {
     break label$4
    }
    return twobyte_strstr($0 | 0, HEAPU8[$1 >> 0] | 0 | 0, $2 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0 + 2 | 0) >> 0] | 0)) {
    break label$2
   }
   label$5 : {
    if (HEAPU8[($1 + 3 | 0) >> 0] | 0) {
     break label$5
    }
    return threebyte_strstr($0 | 0, $1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0 + 3 | 0) >> 0] | 0)) {
    break label$2
   }
   label$6 : {
    if (HEAPU8[($1 + 4 | 0) >> 0] | 0) {
     break label$6
    }
    return fourbyte_strstr($0 | 0, $1 | 0) | 0 | 0;
   }
   $3 = twoway_strstr($0 | 0, $1 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function twobyte_strstr($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0;
  $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
  $4 = ($3 | 0) != (0 | 0);
  label$1 : {
   if (!$3) {
    break label$1
   }
   $5 = (HEAPU8[$0 >> 0] | 0) << 8 | 0 | $3 | 0;
   $1 = ($1 & 255 | 0) << 8 | 0 | ($2 & 255 | 0) | 0;
   if (($5 | 0) == ($1 | 0)) {
    break label$1
   }
   $2 = $0 + 1 | 0;
   label$2 : while (1) {
    $0 = $2;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    $4 = ($3 | 0) != (0 | 0);
    if (!$3) {
     break label$1
    }
    $2 = $0 + 1 | 0;
    $5 = ($5 << 8 | 0) & 65280 | 0 | $3 | 0;
    if (($5 | 0) != ($1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return ($4 ? $0 : 0) | 0;
 }
 
 function threebyte_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0, $5 = 0;
  $2 = $0 + 2 | 0;
  $3 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
  $4 = ($3 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    $3 = (HEAPU8[($0 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0 >> 0] | 0) << 24 | 0) | 0 | ($3 << 8 | 0) | 0;
    $5 = (HEAPU8[($1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($3 | 0) == ($5 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1 = $2 + 1 | 0;
     $0 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
     $4 = ($0 | 0) != (0 | 0);
     if (!$0) {
      break label$1
     }
     $2 = $1;
     $3 = ($3 | $0 | 0) << 8 | 0;
     if (($3 | 0) != ($5 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $1 = $2;
  }
  return ($4 ? $1 + -2 | 0 : 0) | 0;
 }
 
 function fourbyte_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $5 = 0, $6 = 0, $4 = 0;
  $2 = $0 + 3 | 0;
  $3 = HEAPU8[($0 + 3 | 0) >> 0] | 0;
  $4 = ($3 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    if (!$3) {
     break label$2
    }
    $5 = (HEAPU8[($0 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3 | 0;
    $6 = $1;
    $0 = HEAPU8[$6 >> 0] | 0 | ((HEAPU8[($6 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1 = $0 << 24 | 0 | (($0 & 65280 | 0) << 8 | 0) | 0 | (($0 >>> 8 | 0) & 65280 | 0 | ($0 >>> 24 | 0) | 0) | 0;
    if (($5 | 0) == ($1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $3 = $2 + 1 | 0;
     $0 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
     $4 = ($0 | 0) != (0 | 0);
     if (!$0) {
      break label$1
     }
     $2 = $3;
     $5 = $5 << 8 | 0 | $0 | 0;
     if (($5 | 0) != ($1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $3 = $2;
  }
  return ($4 ? $3 + -3 | 0 : 0) | 0;
 }
 
 function twoway_strstr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $6 = 0, $8 = 0, $3 = 0, $7 = 0, $2 = 0, $5 = 0, $11 = 0, $10 = 0, $9 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12 = 0, $13 = 0, $14 = 0;
  $2 = __stack_pointer - 1056 | 0;
  __stack_pointer = $2;
  i64toi32_i32$1 = $2 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 1032 | 0) >> 2] = 0;
  HEAP32[($2 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 1024 | 0) >> 2] = 0;
  HEAP32[($2 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $4 = HEAPU8[$1 >> 0] | 0;
        if ($4) {
         break label$6
        }
        $5 = -1;
        $6 = 1;
        break label$5;
       }
       label$7 : while (1) {
        if (!(HEAPU8[($0 + $3 | 0) >> 0] | 0)) {
         break label$2
        }
        $3 = $3 + 1 | 0;
        HEAP32[($2 + (($4 & 255 | 0) << 2 | 0) | 0) >> 2] = $3;
        $6 = ($2 + 1024 | 0) + (($4 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 0 | (1 << $4 | 0) | 0;
        $4 = HEAPU8[($1 + $3 | 0) >> 0] | 0;
        if ($4) {
         continue label$7
        }
        break label$7;
       };
       $6 = 1;
       $5 = -1;
       if ($3 >>> 0 > 1 >>> 0) {
        break label$4
       }
      }
      $7 = -1;
      $8 = 1;
      break label$3;
     }
     $8 = 0;
     $9 = 1;
     $4 = 1;
     label$8 : while (1) {
      label$9 : {
       label$10 : {
        $7 = HEAPU8[($1 + ($4 + $5 | 0) | 0) >> 0] | 0;
        $10 = HEAPU8[($1 + $6 | 0) >> 0] | 0;
        if (($7 | 0) != ($10 | 0)) {
         break label$10
        }
        label$11 : {
         if (($4 | 0) != ($9 | 0)) {
          break label$11
         }
         $8 = $9 + $8 | 0;
         $4 = 1;
         break label$9;
        }
        $4 = $4 + 1 | 0;
        break label$9;
       }
       label$12 : {
        if ($7 >>> 0 <= $10 >>> 0) {
         break label$12
        }
        $9 = $6 - $5 | 0;
        $4 = 1;
        $8 = $6;
        break label$9;
       }
       $4 = 1;
       $5 = $8;
       $8 = $8 + 1 | 0;
       $9 = 1;
      }
      $6 = $4 + $8 | 0;
      if ($6 >>> 0 < $3 >>> 0) {
       continue label$8
      }
      break label$8;
     };
     $8 = 1;
     $7 = -1;
     label$13 : {
      if ($3 >>> 0 > 1 >>> 0) {
       break label$13
      }
      $6 = $9;
      break label$3;
     }
     $6 = 0;
     $11 = 1;
     $4 = 1;
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $10 = HEAPU8[($1 + ($4 + $7 | 0) | 0) >> 0] | 0;
        $12 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
        if (($10 | 0) != ($12 | 0)) {
         break label$16
        }
        label$17 : {
         if (($4 | 0) != ($11 | 0)) {
          break label$17
         }
         $6 = $11 + $6 | 0;
         $4 = 1;
         break label$15;
        }
        $4 = $4 + 1 | 0;
        break label$15;
       }
       label$18 : {
        if ($10 >>> 0 >= $12 >>> 0) {
         break label$18
        }
        $11 = $8 - $7 | 0;
        $4 = 1;
        $6 = $8;
        break label$15;
       }
       $4 = 1;
       $7 = $6;
       $6 = $6 + 1 | 0;
       $11 = 1;
      }
      $8 = $4 + $6 | 0;
      if ($8 >>> 0 < $3 >>> 0) {
       continue label$14
      }
      break label$14;
     };
     $6 = $9;
     $8 = $11;
    }
    label$19 : {
     label$20 : {
      $4 = ($7 + 1 | 0) >>> 0 > ($5 + 1 | 0) >>> 0;
      $13 = $4 ? $8 : $6;
      $11 = $4 ? $7 : $5;
      $10 = $11 + 1 | 0;
      if (!(memcmp($1 | 0, $1 + $13 | 0 | 0, $10 | 0) | 0)) {
       break label$20
      }
      $4 = $3 + ($11 ^ -1 | 0) | 0;
      $13 = ($11 >>> 0 > $4 >>> 0 ? $11 : $4) + 1 | 0;
      $14 = 0;
      break label$19;
     }
     $14 = $3 - $13 | 0;
    }
    $9 = $3 + -1 | 0;
    $12 = $3 | 63 | 0;
    $7 = 0;
    $6 = $0;
    label$21 : while (1) {
     label$22 : {
      if (($0 - $6 | 0) >>> 0 >= $3 >>> 0) {
       break label$22
      }
      label$23 : {
       $4 = memchr($0 | 0, 0 | 0, $12 | 0) | 0;
       if (!$4) {
        break label$23
       }
       $0 = $4;
       if (($4 - $6 | 0) >>> 0 < $3 >>> 0) {
        break label$2
       }
       break label$22;
      }
      $0 = $0 + $12 | 0;
     }
     label$24 : {
      label$25 : {
       label$26 : {
        $4 = HEAPU8[($6 + $9 | 0) >> 0] | 0;
        if (((HEAP32[(($2 + 1024 | 0) + (($4 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $4 | 0) & 1 | 0) {
         break label$26
        }
        $4 = $3;
        break label$25;
       }
       label$27 : {
        $4 = HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] | 0;
        if (($3 | 0) == ($4 | 0)) {
         break label$27
        }
        $4 = $3 - $4 | 0;
        $4 = $4 >>> 0 > $7 >>> 0 ? $4 : $7;
        break label$25;
       }
       $4 = $10;
       label$28 : {
        label$29 : {
         $8 = $4 >>> 0 > $7 >>> 0 ? $4 : $7;
         $5 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
         if (!$5) {
          break label$29
         }
         label$30 : while (1) {
          if (($5 & 255 | 0 | 0) != (HEAPU8[($6 + $8 | 0) >> 0] | 0 | 0)) {
           break label$28
          }
          $8 = $8 + 1 | 0;
          $5 = HEAPU8[($1 + $8 | 0) >> 0] | 0;
          if ($5) {
           continue label$30
          }
          break label$30;
         };
         $4 = $10;
        }
        label$31 : while (1) {
         if ($4 >>> 0 <= $7 >>> 0) {
          break label$1
         }
         $4 = $4 + -1 | 0;
         if ((HEAPU8[($1 + $4 | 0) >> 0] | 0 | 0) == (HEAPU8[($6 + $4 | 0) >> 0] | 0 | 0)) {
          continue label$31
         }
         break label$31;
        };
        $4 = $13;
        $7 = $14;
        break label$24;
       }
       $4 = $8 - $11 | 0;
      }
      $7 = 0;
     }
     $6 = $6 + $4 | 0;
     continue label$21;
    };
   }
   $6 = 0;
  }
  __stack_pointer = $2 + 1056 | 0;
  return $6 | 0;
 }
 
 function __syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[(__errno_location() | 0) >> 2] = 0 - $0 | 0;
   $0 = -1;
  }
  return $0 | 0;
 }
 
 function isupper($0) {
  $0 = $0 | 0;
  return ($0 + -65 | 0) >>> 0 < 26 >>> 0 | 0;
 }
 
 function tolower($0) {
  $0 = $0 | 0;
  return (isupper($0 | 0) | 0 ? $0 | 32 | 0 : $0) | 0;
 }
 
 function isdigit($0) {
  $0 = $0 | 0;
  return ($0 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function strnlen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = memchr($0 | 0, 0 | 0, $1 | 0) | 0;
  return ($2 ? $2 - $0 | 0 : $1) | 0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, $8 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 204 | 0) >> 2] = $2;
  $6 = 0;
  __memset($5 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5 + 200 | 0) >> 2] = HEAP32[($5 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((printf_core(0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $4 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6 = __lockfile($0 | 0) | 0;
   }
   $7 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0 >> 2] = $7 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0 + 48 | 0) >> 2] = 80;
       HEAP32[($0 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
       HEAP32[($0 + 44 | 0) >> 2] = $5;
       break label$7;
      }
      $8 = 0;
      if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2 = -1;
     if (__towrite($0 | 0) | 0) {
      break label$5
     }
    }
    $2 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
   }
   $4 = $7 & 32 | 0;
   label$9 : {
    if (!$8) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = 0;
    HEAP32[($0 + 44 | 0) >> 2] = $8;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2 = $3 ? $2 : -1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 | $4 | 0;
   $4 = $3 & 32 | 0 ? -1 : $2;
   if (!$6) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $5 + 208 | 0;
  return $4 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $12 = 0, $7 = 0, $15 = 0, $20 = 0, i64toi32_i32$1 = 0, $17 = 0, $18 = 0, $14 = 0, $13 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11 = 0, $16 = 0, $19 = 0, $22 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9 = 0, $24 = 0, $10 = 0, $25 = 0, $25$hi = 0, $21 = 0, $23 = 0, $33 = 0, $34 = 0, $35 = 0, $8 = 0, $272 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $1;
  $8 = $7 + 55 | 0;
  $9 = $7 + 56 | 0;
  $10 = 0;
  $11 = 0;
  $12 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $13 = $1;
       if (($12 | 0) > ($11 ^ 2147483647 | 0 | 0)) {
        break label$4
       }
       $11 = $12 + $11 | 0;
       $12 = $13;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $14 = HEAPU8[$12 >> 0] | 0;
            if (!$14) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $14 = $14 & 255 | 0;
                if ($14) {
                 break label$14
                }
                $1 = $12;
                break label$13;
               }
               if (($14 | 0) != (37 | 0)) {
                break label$12
               }
               $14 = $12;
               label$15 : while (1) {
                label$16 : {
                 if ((HEAPU8[($14 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                  break label$16
                 }
                 $1 = $14;
                 break label$13;
                }
                $12 = $12 + 1 | 0;
                $15 = HEAPU8[($14 + 2 | 0) >> 0] | 0;
                $1 = $14 + 2 | 0;
                $14 = $1;
                if (($15 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $12 = $12 - $13 | 0;
              $14 = $11 ^ 2147483647 | 0;
              if (($12 | 0) > ($14 | 0)) {
               break label$4
              }
              label$17 : {
               if (!$0) {
                break label$17
               }
               out($0 | 0, $13 | 0, $12 | 0);
              }
              if ($12) {
               continue label$5
              }
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              $12 = $1 + 1 | 0;
              $16 = -1;
              label$18 : {
               if (!(isdigit(HEAP8[($1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$18
               }
               if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$18
               }
               $12 = $1 + 3 | 0;
               $16 = (HEAP8[($1 + 1 | 0) >> 0] | 0) + -48 | 0;
               $10 = 1;
              }
              HEAP32[($7 + 76 | 0) >> 2] = $12;
              $17 = 0;
              label$19 : {
               label$20 : {
                $18 = HEAP8[$12 >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 <= 31 >>> 0) {
                 break label$20
                }
                $15 = $12;
                break label$19;
               }
               $17 = 0;
               $15 = $12;
               $1 = 1 << $1 | 0;
               if (!($1 & 75913 | 0)) {
                break label$19
               }
               label$21 : while (1) {
                $15 = $12 + 1 | 0;
                HEAP32[($7 + 76 | 0) >> 2] = $15;
                $17 = $1 | $17 | 0;
                $18 = HEAP8[($12 + 1 | 0) >> 0] | 0;
                $1 = $18 + -32 | 0;
                if ($1 >>> 0 >= 32 >>> 0) {
                 break label$19
                }
                $12 = $15;
                $1 = 1 << $1 | 0;
                if ($1 & 75913 | 0) {
                 continue label$21
                }
                break label$21;
               };
              }
              label$22 : {
               label$23 : {
                if (($18 | 0) != (42 | 0)) {
                 break label$23
                }
                label$24 : {
                 label$25 : {
                  if (!(isdigit(HEAP8[($15 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$25
                  }
                  if ((HEAPU8[($15 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$25
                  }
                  HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $18 = $15 + 3 | 0;
                  $19 = HEAP32[((((HEAP8[($15 + 1 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  $10 = 1;
                  break label$24;
                 }
                 if ($10) {
                  break label$9
                 }
                 $18 = $15 + 1 | 0;
                 label$26 : {
                  if ($0) {
                   break label$26
                  }
                  HEAP32[($7 + 76 | 0) >> 2] = $18;
                  $10 = 0;
                  $19 = 0;
                  break label$22;
                 }
                 $12 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $12 + 4 | 0;
                 $19 = HEAP32[$12 >> 2] | 0;
                 $10 = 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $18;
                if (($19 | 0) > (-1 | 0)) {
                 break label$22
                }
                $19 = 0 - $19 | 0;
                $17 = $17 | 8192 | 0;
                break label$22;
               }
               $19 = getint($7 + 76 | 0 | 0) | 0;
               if (($19 | 0) < (0 | 0)) {
                break label$4
               }
               $18 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              $12 = 0;
              $20 = -1;
              label$27 : {
               label$28 : {
                if ((HEAPU8[$18 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$28
                }
                $1 = $18;
                $21 = 0;
                break label$27;
               }
               label$29 : {
                if ((HEAPU8[($18 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$29
                }
                label$30 : {
                 label$31 : {
                  if (!(isdigit(HEAP8[($18 + 2 | 0) >> 0] | 0 | 0) | 0)) {
                   break label$31
                  }
                  if ((HEAPU8[($18 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$31
                  }
                  HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $1 = $18 + 4 | 0;
                  $20 = HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  break label$30;
                 }
                 if ($10) {
                  break label$9
                 }
                 $1 = $18 + 2 | 0;
                 label$32 : {
                  if ($0) {
                   break label$32
                  }
                  $20 = 0;
                  break label$30;
                 }
                 $15 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $15 + 4 | 0;
                 $20 = HEAP32[$15 >> 2] | 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $1;
                $21 = ($20 ^ -1 | 0) >>> 31 | 0;
                break label$27;
               }
               HEAP32[($7 + 76 | 0) >> 2] = $18 + 1 | 0;
               $21 = 1;
               $20 = getint($7 + 76 | 0 | 0) | 0;
               $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              label$33 : while (1) {
               $15 = $12;
               $22 = 28;
               $18 = $1;
               $12 = HEAP8[$18 >> 0] | 0;
               if (($12 + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $1 = $18 + 1 | 0;
               $12 = HEAPU8[(($12 + Math_imul($15, 58) | 0) + 83631 | 0) >> 0] | 0;
               if (($12 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$33
               }
               break label$33;
              };
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              label$34 : {
               label$35 : {
                label$36 : {
                 if (($12 | 0) == (27 | 0)) {
                  break label$36
                 }
                 if (!$12) {
                  break label$3
                 }
                 label$37 : {
                  if (($16 | 0) < (0 | 0)) {
                   break label$37
                  }
                  HEAP32[($4 + ($16 << 2 | 0) | 0) >> 2] = $12;
                  i64toi32_i32$2 = $3 + ($16 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7;
                  HEAP32[($7 + 64 | 0) >> 2] = $272;
                  HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$35;
                 }
                 if (!$0) {
                  break label$6
                 }
                 pop_arg($7 + 64 | 0 | 0, $12 | 0, $2 | 0, $6 | 0);
                 break label$34;
                }
                if (($16 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $12 = 0;
               if (!$0) {
                continue label$5
               }
              }
              $23 = $17 & -65537 | 0;
              $17 = $17 & 8192 | 0 ? $23 : $17;
              $16 = 0;
              $24 = 66369;
              $22 = $9;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $12 = HEAP8[$18 >> 0] | 0;
                              $12 = $15 ? (($12 & 15 | 0 | 0) == (3 | 0) ? $12 & -33 | 0 : $12) : $12;
                              switch ($12 + -88 | 0 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             $22 = $9;
                             label$54 : {
                              switch ($12 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($12 | 0) == (83 | 0)) {
                              break label$43
                             }
                             break label$8;
                            }
                            $16 = 0;
                            $24 = 66369;
                            i64toi32_i32$2 = $7;
                            i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                            $25 = i64toi32_i32$1;
                            $25$hi = i64toi32_i32$0;
                            break label$46;
                           }
                           $12 = 0;
                           label$55 : {
                            switch ($15 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 1] = $11;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 0] = $11;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20 = $20 >>> 0 > 8 >>> 0 ? $20 : 8;
                          $17 = $17 | 8 | 0;
                          $12 = 120;
                         }
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $13 = fmt_x(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0, $12 & 32 | 0 | 0) | 0;
                         $16 = 0;
                         $24 = 66369;
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$45
                         }
                         if (!($17 & 8 | 0)) {
                          break label$45
                         }
                         $24 = ($12 >>> 4 | 0) + 66369 | 0;
                         $16 = 2;
                         break label$45;
                        }
                        $16 = 0;
                        $24 = 66369;
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $13 = fmt_o(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0) | 0;
                        if (!($17 & 8 | 0)) {
                         break label$45
                        }
                        $12 = $9 - $13 | 0;
                        $20 = ($20 | 0) > ($12 | 0) ? $20 : $12 + 1 | 0;
                        break label$45;
                       }
                       label$62 : {
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $25 = i64toi32_i32$1;
                        $25$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $33 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $34 = 0
                          } else {
                           $34 = 1
                          }
                          $35 = $34;
                         } else {
                          $35 = 0
                         }
                         $33 = $35;
                        }
                        if ($33) {
                         break label$62
                        }
                        i64toi32_i32$2 = $25$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $25$hi;
                        i64toi32_i32$1 = $25;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $25 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $25$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7;
                        HEAP32[($7 + 64 | 0) >> 2] = $25;
                        HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $16 = 1;
                        $24 = 66369;
                        break label$46;
                       }
                       label$63 : {
                        if (!($17 & 2048 | 0)) {
                         break label$63
                        }
                        $16 = 1;
                        $24 = 66370;
                        break label$46;
                       }
                       $16 = $17 & 1 | 0;
                       $24 = $16 ? 66371 : 66369;
                      }
                      i64toi32_i32$5 = $25$hi;
                      $13 = fmt_u($25 | 0, i64toi32_i32$5 | 0, $9 | 0) | 0;
                     }
                     label$64 : {
                      if (!$21) {
                       break label$64
                      }
                      if (($20 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $17 = $21 ? $17 & -65537 | 0 : $17;
                     label$65 : {
                      i64toi32_i32$2 = $7;
                      i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                      $25 = i64toi32_i32$5;
                      $25$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$65
                      }
                      if ($20) {
                       break label$65
                      }
                      $13 = $9;
                      $22 = $13;
                      $20 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $25$hi;
                     $12 = ($9 - $13 | 0) + !($25 | i64toi32_i32$2 | 0) | 0;
                     $20 = ($20 | 0) > ($12 | 0) ? $20 : $12;
                     break label$8;
                    }
                    $12 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    $13 = $12 ? $12 : 73875;
                    $12 = strnlen($13 | 0, ($20 >>> 0 < 2147483647 >>> 0 ? $20 : 2147483647) | 0) | 0;
                    $22 = $13 + $12 | 0;
                    label$66 : {
                     if (($20 | 0) <= (-1 | 0)) {
                      break label$66
                     }
                     $17 = $23;
                     $20 = $12;
                     break label$7;
                    }
                    $17 = $23;
                    $20 = $12;
                    if (HEAPU8[$22 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$67 : {
                    if (!$20) {
                     break label$67
                    }
                    $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    break label$41;
                   }
                   $12 = 0;
                   pad($0 | 0, 32 | 0, $19 | 0, 0 | 0, $17 | 0);
                   break label$40;
                  }
                  HEAP32[($7 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7;
                  i64toi32_i32$2 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                  HEAP32[($7 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7 + 64 | 0) >> 2] = $7 + 8 | 0;
                  $14 = $7 + 8 | 0;
                  $20 = -1;
                 }
                 $12 = 0;
                 label$68 : {
                  label$69 : while (1) {
                   $15 = HEAP32[$14 >> 2] | 0;
                   if (!$15) {
                    break label$68
                   }
                   label$70 : {
                    $15 = wctomb($7 + 4 | 0 | 0, $15 | 0) | 0;
                    $13 = ($15 | 0) < (0 | 0);
                    if ($13) {
                     break label$70
                    }
                    if ($15 >>> 0 > ($20 - $12 | 0) >>> 0) {
                     break label$70
                    }
                    $14 = $14 + 4 | 0;
                    $12 = $15 + $12 | 0;
                    if ($20 >>> 0 > $12 >>> 0) {
                     continue label$69
                    }
                    break label$68;
                   }
                   break label$69;
                  };
                  if ($13) {
                   break label$2
                  }
                 }
                 $22 = 61;
                 if (($12 | 0) < (0 | 0)) {
                  break label$3
                 }
                 pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 | 0);
                 label$71 : {
                  if ($12) {
                   break label$71
                  }
                  $12 = 0;
                  break label$40;
                 }
                 $15 = 0;
                 $14 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                 label$72 : while (1) {
                  $13 = HEAP32[$14 >> 2] | 0;
                  if (!$13) {
                   break label$40
                  }
                  $13 = wctomb($7 + 4 | 0 | 0, $13 | 0) | 0;
                  $15 = $13 + $15 | 0;
                  if ($15 >>> 0 > $12 >>> 0) {
                   break label$40
                  }
                  out($0 | 0, $7 + 4 | 0 | 0, $13 | 0);
                  $14 = $14 + 4 | 0;
                  if ($15 >>> 0 < $12 >>> 0) {
                   continue label$72
                  }
                  break label$72;
                 };
                }
                pad($0 | 0, 32 | 0, $19 | 0, $12 | 0, $17 ^ 8192 | 0 | 0);
                $12 = ($19 | 0) > ($12 | 0) ? $19 : $12;
                continue label$5;
               }
               label$73 : {
                if (!$21) {
                 break label$73
                }
                if (($20 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22 = 61;
               $12 = FUNCTION_TABLE[$5 | 0]($0, +HEAPF64[($7 + 64 | 0) >> 3], $19, $20, $17, $12) | 0;
               if (($12 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7;
              i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
              HEAP8[($7 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20 = 1;
              $13 = $8;
              $22 = $9;
              $17 = $23;
              break label$7;
             }
             $14 = HEAPU8[($12 + 1 | 0) >> 0] | 0;
             $12 = $12 + 1 | 0;
             continue label$11;
            };
           }
           if ($0) {
            break label$1
           }
           if (!$10) {
            break label$6
           }
           $12 = 1;
           label$74 : {
            label$75 : while (1) {
             $14 = HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0;
             if (!$14) {
              break label$74
             }
             pop_arg($3 + ($12 << 3 | 0) | 0 | 0, $14 | 0, $2 | 0, $6 | 0);
             $11 = 1;
             $12 = $12 + 1 | 0;
             if (($12 | 0) != (10 | 0)) {
              continue label$75
             }
             break label$1;
            };
           }
           $11 = 1;
           if ($12 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           label$76 : while (1) {
            if (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) {
             break label$9
            }
            $11 = 1;
            $12 = $12 + 1 | 0;
            if (($12 | 0) == (10 | 0)) {
             break label$1
            }
            continue label$76;
           };
          }
          $22 = 28;
          break label$3;
         }
         $22 = $9;
        }
        $18 = $22 - $13 | 0;
        $20 = ($20 | 0) > ($18 | 0) ? $20 : $18;
        if (($20 | 0) > ($16 ^ 2147483647 | 0 | 0)) {
         break label$4
        }
        $22 = 61;
        $15 = $16 + $20 | 0;
        $12 = ($19 | 0) > ($15 | 0) ? $19 : $15;
        if (($12 | 0) > ($14 | 0)) {
         break label$3
        }
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 | 0);
        out($0 | 0, $24 | 0, $16 | 0);
        pad($0 | 0, 48 | 0, $12 | 0, $15 | 0, $17 ^ 65536 | 0 | 0);
        pad($0 | 0, 48 | 0, $20 | 0, $18 | 0, 0 | 0);
        out($0 | 0, $13 | 0, $18 | 0);
        pad($0 | 0, 32 | 0, $12 | 0, $15 | 0, $17 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11 = 0;
      break label$1;
     }
     $22 = 61;
    }
    HEAP32[(__errno_location() | 0) >> 2] = $22;
   }
   $11 = -1;
  }
  __stack_pointer = $7 + 80 | 0;
  return $11 | 0;
 }
 
 function out($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   __fwritex($1 | 0, $2 | 0, $0 | 0) | 0;
  }
 }
 
 function getint($0) {
  $0 = $0 | 0;
  var $1 = 0, $3 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if (isdigit(HEAP8[(HEAP32[$0 >> 2] | 0) >> 0] | 0 | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : while (1) {
   $2 = HEAP32[$0 >> 2] | 0;
   $3 = -1;
   label$3 : {
    if ($1 >>> 0 > 214748364 >>> 0) {
     break label$3
    }
    $3 = (HEAP8[$2 >> 0] | 0) + -48 | 0;
    $1 = Math_imul($1, 10);
    $3 = ($3 | 0) > ($1 ^ 2147483647 | 0 | 0) ? -1 : $3 + $1 | 0;
   }
   HEAP32[$0 >> 2] = $2 + 1 | 0;
   $1 = $3;
   if (isdigit(HEAP8[($2 + 1 | 0) >> 0] | 0 | 0) | 0) {
    continue label$2
   }
   break label$2;
  };
  return $3 | 0;
 }
 
 function pop_arg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0, $29 = 0, $37 = 0, $45 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $87 = 0, $97 = 0, $105 = 0, $115 = 0, $125 = 0, $133 = 0, $141 = 0;
  label$1 : {
   switch ($1 + -9 | 0 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    return;
   case 1:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $29;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $45;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $55;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $63;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $71;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $79;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $97 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $97;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $105;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $115;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $125;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $133;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $141;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function fmt_x($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $3 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = HEAPU8[(($0 & 15 | 0) + 84160 | 0) >> 0] | 0 | $2 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $10;
    $0$hi = i64toi32_i32$0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_o($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9 = 0, $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = $0 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $9;
    $0$hi = i64toi32_i32$0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_u($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$3 = 0, $2 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4 = 0, $16 = 0, $16$hi = 0, $5 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2 = $0;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16;
    i64toi32_i32$5 = ($0 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1 >> 0] = $0 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0 = $2;
    $0$hi = i64toi32_i32$2;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3 = $2;
   if (!$3) {
    break label$4
   }
   label$5 : while (1) {
    $1 = $1 + -1 | 0;
    $4 = ($3 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1 >> 0] = $3 - Math_imul($4, 10) | 0 | 48 | 0;
    $5 = $3 >>> 0 > 9 >>> 0;
    $3 = $4;
    if ($5) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 | 0;
 }
 
 function pad($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   if ($4 & 73728 | 0) {
    break label$1
   }
   $3 = $2 - $3 | 0;
   $2 = $3 >>> 0 < 256 >>> 0;
   __memset($5 | 0, $1 & 255 | 0 | 0, ($2 ? $3 : 256) | 0) | 0;
   label$2 : {
    if ($2) {
     break label$2
    }
    label$3 : while (1) {
     out($0 | 0, $5 | 0, 256 | 0);
     $3 = $3 + -256 | 0;
     if ($3 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   out($0 | 0, $5 | 0, $3 | 0);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function vfprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 196 | 0, 197 | 0) | 0 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $18 = 0, $21 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $15 = 0, i64toi32_i32$4 = 0, $22 = 0, $23 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $17 = 0, $19 = 0, $8 = 0, $26 = 0.0, $24 = 0, $13 = 0, $24$hi = 0, $14 = 0, $16 = 0, $9 = 0, $20 = 0, $7 = 0, $45 = 0, $46 = 0, $47 = 0, $25$hi = 0, $48 = 0, $25 = 0, $167 = 0, $169$hi = 0, $171$hi = 0, $173 = 0, $173$hi = 0, $175$hi = 0, $179 = 0, $179$hi = 0, $388 = 0.0, $852 = 0;
  $6 = __stack_pointer - 560 | 0;
  __stack_pointer = $6;
  $7 = 0;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46 = 0
      } else {
       $46 = 1
      }
      $47 = $46;
     } else {
      $47 = 0
     }
     $45 = $47;
    }
    if ($45) {
     break label$2
    }
    $8 = 1;
    $9 = 66379;
    $1 = -$1;
    i64toi32_i32$2 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4 & 2048 | 0)) {
     break label$3
    }
    $8 = 1;
    $9 = 66382;
    break label$1;
   }
   $8 = $4 & 1 | 0;
   $9 = $8 ? 66385 : 66380;
   $7 = !$8;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10 = $8 + 3 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $10 | 0, $4 & -65537 | 0 | 0);
    out($0 | 0, $9 | 0, $8 | 0);
    $11 = $5 & 32 | 0;
    out($0 | 0, ($1 != $1 ? ($11 ? 68745 : 72160) : $11 ? 69694 : 72197) | 0, 3 | 0);
    pad($0 | 0, 32 | 0, $2 | 0, $10 | 0, $4 ^ 8192 | 0 | 0);
    $12 = ($10 | 0) > ($2 | 0) ? $10 : $2;
    break label$4;
   }
   $13 = $6 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1 = +frexp(+$1, $6 + 44 | 0 | 0);
       $1 = $1 + $1;
       if ($1 == 0.0) {
        break label$9
       }
       $10 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       HEAP32[($6 + 44 | 0) >> 2] = $10 + -1 | 0;
       $14 = $5 | 32 | 0;
       if (($14 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $14 = $5 | 32 | 0;
      if (($14 | 0) == (97 | 0)) {
       break label$6
      }
      $15 = ($3 | 0) < (0 | 0) ? 6 : $3;
      $16 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $16 = $10 + -29 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = $16;
     $15 = ($3 | 0) < (0 | 0) ? 6 : $3;
     $1 = $1 * 268435456.0;
    }
    $17 = ($6 + 48 | 0) + (($16 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11 = $17;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1 < 4294967296.0 & $1 >= 0.0 | 0)) {
        break label$12
       }
       $10 = ~~$1 >>> 0;
       break label$11;
      }
      $10 = 0;
     }
     HEAP32[$11 >> 2] = $10;
     $11 = $11 + 4 | 0;
     $1 = ($1 - +($10 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($16 | 0) >= (1 | 0)) {
       break label$14
      }
      $3 = $16;
      $10 = $11;
      $18 = $17;
      break label$13;
     }
     $18 = $17;
     $3 = $16;
     label$15 : while (1) {
      $3 = ($3 | 0) < (29 | 0) ? $3 : 29;
      label$16 : {
       $10 = $11 + -4 | 0;
       if ($10 >>> 0 < $18 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25 = $3;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $167 = $10;
        i64toi32_i32$0 = $10;
        i64toi32_i32$1 = HEAP32[$10 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $169$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $169$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $171$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $173 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $173$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $171$hi;
        i64toi32_i32$1 = $48;
        i64toi32_i32$2 = $173$hi;
        i64toi32_i32$3 = $173;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $175$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179 = i64toi32_i32$1;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $175$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $179$hi;
        i64toi32_i32$3 = $179;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$167 >> 2] = i64toi32_i32$2;
        $10 = $10 + -4 | 0;
        if ($10 >>> 0 >= $18 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $10 = $24;
       if (!$10) {
        break label$16
       }
       $18 = $18 + -4 | 0;
       HEAP32[$18 >> 2] = $10;
      }
      label$18 : {
       label$19 : while (1) {
        $10 = $11;
        if ($10 >>> 0 <= $18 >>> 0) {
         break label$18
        }
        $11 = $10 + -4 | 0;
        if (!(HEAP32[$11 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) - $3 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $11 = $10;
      if (($3 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3 | 0) > (-1 | 0)) {
      break label$20
     }
     $19 = ((($15 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $20 = ($14 | 0) == (102 | 0);
     label$21 : while (1) {
      $11 = 0 - $3 | 0;
      $21 = ($11 | 0) < (9 | 0) ? $11 : 9;
      label$22 : {
       label$23 : {
        if ($18 >>> 0 < $10 >>> 0) {
         break label$23
        }
        $11 = HEAP32[$18 >> 2] | 0;
        break label$22;
       }
       $22 = 1e9 >>> $21 | 0;
       $23 = (-1 << $21 | 0) ^ -1 | 0;
       $3 = 0;
       $11 = $18;
       label$24 : while (1) {
        $12 = HEAP32[$11 >> 2] | 0;
        HEAP32[$11 >> 2] = ($12 >>> $21 | 0) + $3 | 0;
        $3 = Math_imul($12 & $23 | 0, $22);
        $11 = $11 + 4 | 0;
        if ($11 >>> 0 < $10 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $11 = HEAP32[$18 >> 2] | 0;
       if (!$3) {
        break label$22
       }
       HEAP32[$10 >> 2] = $3;
       $10 = $10 + 4 | 0;
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + $21 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $18 = $18 + (!$11 << 2 | 0) | 0;
      $11 = $20 ? $17 : $18;
      $10 = (($10 - $11 | 0) >> 2 | 0 | 0) > ($19 | 0) ? $11 + ($19 << 2 | 0) | 0 : $10;
      if (($3 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3 = 0;
    label$25 : {
     if ($18 >>> 0 >= $10 >>> 0) {
      break label$25
     }
     $3 = Math_imul(($17 - $18 | 0) >> 2 | 0, 9);
     $11 = 10;
     $12 = HEAP32[$18 >> 2] | 0;
     if ($12 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3 = $3 + 1 | 0;
      $11 = Math_imul($11, 10);
      if ($12 >>> 0 >= $11 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $11 = ($15 - (($14 | 0) == (102 | 0) ? 0 : $3) | 0) - (($15 | 0) != (0 | 0) & ($14 | 0) == (103 | 0) | 0) | 0;
     if (($11 | 0) >= (Math_imul(($10 - $17 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $12 = $11 + 9216 | 0;
     $22 = ($12 | 0) / (9 | 0) | 0;
     $21 = (($22 << 2 | 0) + (($6 + 48 | 0) + (($16 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $11 = 10;
     label$28 : {
      $12 = $12 - Math_imul($22, 9) | 0;
      if (($12 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $11 = Math_imul($11, 10);
       $12 = $12 + 1 | 0;
       if (($12 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $23 = $21 + 4 | 0;
     label$30 : {
      label$31 : {
       $12 = HEAP32[$21 >> 2] | 0;
       $19 = ($12 >>> 0) / ($11 >>> 0) | 0;
       $22 = $12 - Math_imul($19, $11) | 0;
       if ($22) {
        break label$31
       }
       if (($23 | 0) == ($10 | 0)) {
        break label$30
       }
      }
      label$32 : {
       label$33 : {
        if ($19 & 1 | 0) {
         break label$33
        }
        $1 = 9007199254740992.0;
        if (($11 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($21 >>> 0 <= $18 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($21 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1 = 9007199254740994.0;
      }
      $388 = ($23 | 0) == ($10 | 0) ? 1.0 : 1.5;
      $23 = $11 >>> 1 | 0;
      $26 = $22 >>> 0 < $23 >>> 0 ? .5 : ($22 | 0) == ($23 | 0) ? $388 : 1.5;
      label$34 : {
       if ($7) {
        break label$34
       }
       if ((HEAPU8[$9 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $26 = -$26;
       $1 = -$1;
      }
      $12 = $12 - $22 | 0;
      HEAP32[$21 >> 2] = $12;
      if ($1 + $26 == $1) {
       break label$30
      }
      $11 = $12 + $11 | 0;
      HEAP32[$21 >> 2] = $11;
      label$35 : {
       if ($11 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$21 >> 2] = 0;
        label$37 : {
         $21 = $21 + -4 | 0;
         if ($21 >>> 0 >= $18 >>> 0) {
          break label$37
         }
         $18 = $18 + -4 | 0;
         HEAP32[$18 >> 2] = 0;
        }
        $11 = (HEAP32[$21 >> 2] | 0) + 1 | 0;
        HEAP32[$21 >> 2] = $11;
        if ($11 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3 = Math_imul(($17 - $18 | 0) >> 2 | 0, 9);
      $11 = 10;
      $12 = HEAP32[$18 >> 2] | 0;
      if ($12 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3 = $3 + 1 | 0;
       $11 = Math_imul($11, 10);
       if ($12 >>> 0 >= $11 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $11 = $21 + 4 | 0;
     $10 = $10 >>> 0 > $11 >>> 0 ? $11 : $10;
    }
    label$39 : {
     label$40 : while (1) {
      $11 = $10;
      $12 = $10 >>> 0 <= $18 >>> 0;
      if ($12) {
       break label$39
      }
      $10 = $11 + -4 | 0;
      if (!(HEAP32[$10 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($14 | 0) == (103 | 0)) {
       break label$42
      }
      $21 = $4 & 8 | 0;
      break label$41;
     }
     $10 = $15 ? $15 : 1;
     $21 = ($10 | 0) > ($3 | 0) & ($3 | 0) > (-5 | 0) | 0;
     $15 = ($21 ? $3 ^ -1 | 0 : -1) + $10 | 0;
     $5 = ($21 ? -1 : -2) + $5 | 0;
     $21 = $4 & 8 | 0;
     if ($21) {
      break label$41
     }
     $10 = -9;
     label$43 : {
      if ($12) {
       break label$43
      }
      $21 = HEAP32[($11 + -4 | 0) >> 2] | 0;
      if (!$21) {
       break label$43
      }
      $12 = 10;
      $10 = 0;
      if (($21 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $22 = $10;
       $10 = $10 + 1 | 0;
       $12 = Math_imul($12, 10);
       if (!(($21 >>> 0) % ($12 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $10 = $22 ^ -1 | 0;
     }
     $12 = Math_imul(($11 - $17 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $21 = 0;
      $10 = ($12 + $10 | 0) + -9 | 0;
      $10 = ($10 | 0) > (0 | 0) ? $10 : 0;
      $15 = ($15 | 0) < ($10 | 0) ? $15 : $10;
      break label$41;
     }
     $21 = 0;
     $10 = (($3 + $12 | 0) + $10 | 0) + -9 | 0;
     $10 = ($10 | 0) > (0 | 0) ? $10 : 0;
     $15 = ($15 | 0) < ($10 | 0) ? $15 : $10;
    }
    $12 = -1;
    $22 = $15 | $21 | 0;
    if (($15 | 0) > (($22 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $23 = ($15 + (($22 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $20 = $5 & -33 | 0;
      if (($20 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3 | 0) > ($23 ^ 2147483647 | 0 | 0)) {
       break label$4
      }
      $10 = ($3 | 0) > (0 | 0) ? $3 : 0;
      break label$46;
     }
     label$48 : {
      $10 = $3 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $10 = fmt_u(($3 ^ $10 | 0) - $10 | 0 | 0, i64toi32_i32$4 | 0, $13 | 0) | 0;
      if (($13 - $10 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $10 = $10 + -1 | 0;
       HEAP8[$10 >> 0] = 48;
       if (($13 - $10 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $19 = $10 + -2 | 0;
     HEAP8[$19 >> 0] = $5;
     $12 = -1;
     HEAP8[($10 + -1 | 0) >> 0] = ($3 | 0) < (0 | 0) ? 45 : 43;
     $10 = $13 - $19 | 0;
     if (($10 | 0) > ($23 ^ 2147483647 | 0 | 0)) {
      break label$4
     }
    }
    $12 = -1;
    $10 = $10 + $23 | 0;
    if (($10 | 0) > ($8 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $23 = $10 + $8 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $23 | 0, $4 | 0);
    out($0 | 0, $9 | 0, $8 | 0);
    pad($0 | 0, 48 | 0, $2 | 0, $23 | 0, $4 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($20 | 0) != (70 | 0)) {
         break label$53
        }
        $21 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $12 = $18 >>> 0 > $17 >>> 0 ? $17 : $18;
        $18 = $12;
        label$54 : while (1) {
         i64toi32_i32$5 = $18;
         i64toi32_i32$4 = HEAP32[$18 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $10 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($18 | 0) == ($12 | 0)) {
            break label$56
           }
           if ($10 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $10 = $10 + -1 | 0;
            HEAP8[$10 >> 0] = 48;
            if ($10 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($10 | 0) != ($3 | 0)) {
           break label$55
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $10 = $21;
         }
         out($0 | 0, $10 | 0, $3 - $10 | 0 | 0);
         $18 = $18 + 4 | 0;
         if ($18 >>> 0 <= $17 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$22) {
          break label$58
         }
         out($0 | 0, 73593 | 0, 1 | 0);
        }
        if ($18 >>> 0 >= $11 >>> 0) {
         break label$52
        }
        if (($15 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $18;
          i64toi32_i32$0 = HEAP32[$18 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10 = fmt_u(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3 | 0) | 0;
          if ($10 >>> 0 <= ($6 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $10 = $10 + -1 | 0;
           HEAP8[$10 >> 0] = 48;
           if ($10 >>> 0 > ($6 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         out($0 | 0, $10 | 0, (($15 | 0) < (9 | 0) ? $15 : 9) | 0);
         $10 = $15 + -9 | 0;
         $18 = $18 + 4 | 0;
         if ($18 >>> 0 >= $11 >>> 0) {
          break label$51
         }
         $12 = ($15 | 0) > (9 | 0);
         $15 = $10;
         if ($12) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($15 | 0) < (0 | 0)) {
         break label$62
        }
        $22 = $11 >>> 0 > $18 >>> 0 ? $11 : $18 + 4 | 0;
        $17 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $11 = $18;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $11;
          i64toi32_i32$4 = HEAP32[$11 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $10 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
          if (($10 | 0) != ($3 | 0)) {
           break label$64
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $10 = $17;
         }
         label$65 : {
          label$66 : {
           if (($11 | 0) == ($18 | 0)) {
            break label$66
           }
           if ($10 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $10 = $10 + -1 | 0;
            HEAP8[$10 >> 0] = 48;
            if ($10 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          out($0 | 0, $10 | 0, 1 | 0);
          $10 = $10 + 1 | 0;
          if (!($15 | $21 | 0)) {
           break label$65
          }
          out($0 | 0, 73593 | 0, 1 | 0);
         }
         $12 = $3 - $10 | 0;
         out($0 | 0, $10 | 0, (($15 | 0) < ($12 | 0) ? $15 : $12) | 0);
         $15 = $15 - $12 | 0;
         $11 = $11 + 4 | 0;
         if ($11 >>> 0 >= $22 >>> 0) {
          break label$62
         }
         if (($15 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       pad($0 | 0, 48 | 0, $15 + 18 | 0 | 0, 18 | 0, 0 | 0);
       out($0 | 0, $19 | 0, $13 - $19 | 0 | 0);
       break label$50;
      }
      $10 = $15;
     }
     pad($0 | 0, 48 | 0, $10 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    pad($0 | 0, 32 | 0, $2 | 0, $23 | 0, $4 ^ 8192 | 0 | 0);
    $12 = ($23 | 0) > ($2 | 0) ? $23 : $2;
    break label$4;
   }
   $23 = $9 + ((($5 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $10 = 12 - $3 | 0;
    $26 = 16.0;
    label$69 : while (1) {
     $26 = $26 * 16.0;
     $10 = $10 + -1 | 0;
     if ($10) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$23 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1 = -($26 + (-$1 - $26));
     break label$68;
    }
    $1 = $1 + $26 - $26;
   }
   label$71 : {
    $10 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $852 = $10;
    $10 = $10 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $10 = fmt_u(($852 ^ $10 | 0) - $10 | 0 | 0, i64toi32_i32$0 | 0, $13 | 0) | 0;
    if (($10 | 0) != ($13 | 0)) {
     break label$71
    }
    HEAP8[($6 + 15 | 0) >> 0] = 48;
    $10 = $6 + 15 | 0;
   }
   $21 = $8 | 2 | 0;
   $18 = $5 & 32 | 0;
   $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
   $22 = $10 + -2 | 0;
   HEAP8[$22 >> 0] = $5 + 15 | 0;
   HEAP8[($10 + -1 | 0) >> 0] = ($11 | 0) < (0 | 0) ? 45 : 43;
   $12 = $4 & 8 | 0;
   $11 = $6 + 16 | 0;
   label$72 : while (1) {
    $10 = $11;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1) < 2147483648.0)) {
       break label$74
      }
      $11 = ~~$1;
      break label$73;
     }
     $11 = -2147483648;
    }
    HEAP8[$10 >> 0] = HEAPU8[($11 + 84160 | 0) >> 0] | 0 | $18 | 0;
    $1 = ($1 - +($11 | 0)) * 16.0;
    label$75 : {
     $11 = $10 + 1 | 0;
     if (($11 - ($6 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($12) {
       break label$76
      }
      if (($3 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($10 + 1 | 0) >> 0] = 46;
     $11 = $10 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $12 = -1;
   $18 = $13 - $22 | 0;
   $19 = $21 + $18 | 0;
   if ((2147483645 - $19 | 0 | 0) < ($3 | 0)) {
    break label$4
   }
   $10 = $11 - ($6 + 16 | 0) | 0;
   $3 = $3 ? (($10 + -2 | 0 | 0) < ($3 | 0) ? $3 + 2 | 0 : $10) : $10;
   $11 = $19 + $3 | 0;
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
   out($0 | 0, $23 | 0, $21 | 0);
   pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
   out($0 | 0, $6 + 16 | 0 | 0, $10 | 0);
   pad($0 | 0, 48 | 0, $3 - $10 | 0 | 0, 0 | 0, 0 | 0);
   out($0 | 0, $22 | 0, $18 | 0);
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
   $12 = ($11 | 0) > ($2 | 0) ? $11 : $2;
  }
  __stack_pointer = $6 + 560 | 0;
  return $12 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $12 = 0, $12$hi = 0, $15 = 0, $15$hi = 0;
  $2 = ((HEAP32[$1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1 >> 2] = $2 + 16 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0 >> 3] = +__trunctfdf2($12 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$1 | 0);
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function vprintf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return vfprintf(86552 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $5 = $1 ? $0 : $4 + 158 | 0;
  HEAP32[($4 + 148 | 0) >> 2] = $5;
  $0 = -1;
  $6 = $1 + -1 | 0;
  HEAP32[($4 + 152 | 0) >> 2] = $6 >>> 0 > $1 >>> 0 ? 0 : $6;
  $4 = __memset($4 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($4 + 76 | 0) >> 2] = -1;
  HEAP32[($4 + 36 | 0) >> 2] = 198;
  HEAP32[($4 + 80 | 0) >> 2] = -1;
  HEAP32[($4 + 44 | 0) >> 2] = $4 + 159 | 0;
  HEAP32[($4 + 84 | 0) >> 2] = $4 + 148 | 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[(__errno_location() | 0) >> 2] = 61;
    break label$1;
   }
   HEAP8[$5 >> 0] = 0;
   $0 = vfprintf($4 | 0, $2 | 0, $3 | 0) | 0;
  }
  __stack_pointer = $4 + 160 | 0;
  return $0 | 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $6 = (HEAP32[($0 + 20 | 0) >> 2] | 0) - $5 | 0;
   $6 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
   if (!$6) {
    break label$1
   }
   __memcpy(HEAP32[$3 >> 2] | 0 | 0, $5 | 0, $6 | 0) | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $6 | 0;
   $4 = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $6 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $4;
  }
  $6 = HEAP32[$3 >> 2] | 0;
  label$2 : {
   $4 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
   if (!$4) {
    break label$2
   }
   __memcpy($6 | 0, $1 | 0, $4 | 0) | 0;
   $6 = (HEAP32[$3 >> 2] | 0) + $4 | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $4 | 0;
  }
  HEAP8[$6 >> 0] = 0;
  $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $3;
  HEAP32[($0 + 20 | 0) >> 2] = $3;
  return $2 | 0;
 }
 
 function vsprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return vsnprintf($0 | 0, 2147483647 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = $0;
  return -1 | 0;
 }
 
 function wcrtomb($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = 1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[((__get_tp() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[(__errno_location() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0 + 1 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0 + 2 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0 + 3 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 25;
    }
    $3 = -1;
   }
   return $3 | 0;
  }
  HEAP8[$0 >> 0] = $1;
  return 1 | 0;
 }
 
 function wctomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return wcrtomb($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[(0 + 86700 | 0) >> 2] | 0;
  $2 = ($0 + 7 | 0) & -8 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 86700 | 0) >> 2] = $0;
   return $1 | 0;
  }
  HEAP32[(__errno_location() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $8 = 0, $3 = 0, $2 = 0, $11 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9 = 0, i64toi32_i32$2 = 0, $10 = 0, $1 = 0, $79 = 0, $191 = 0, $1104 = 0, $1106 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            if ($0 >>> 0 > 244 >>> 0) {
             break label$10
            }
            label$11 : {
             $2 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
             $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
             $4 = $3 >>> 3 | 0;
             $0 = $2 >>> $4 | 0;
             if (!($0 & 3 | 0)) {
              break label$11
             }
             label$12 : {
              label$13 : {
               $5 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
               $4 = $5 << 3 | 0;
               $0 = $4 + 104096 | 0;
               $4 = HEAP32[($4 + 104104 | 0) >> 2] | 0;
               $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
               if (($0 | 0) != ($3 | 0)) {
                break label$13
               }
               HEAP32[(0 + 104056 | 0) >> 2] = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
               break label$12;
              }
              HEAP32[($3 + 12 | 0) >> 2] = $0;
              HEAP32[($0 + 8 | 0) >> 2] = $3;
             }
             $0 = $4 + 8 | 0;
             $5 = $5 << 3 | 0;
             HEAP32[($4 + 4 | 0) >> 2] = $5 | 3 | 0;
             $4 = $4 + $5 | 0;
             HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
             break label$1;
            }
            $6 = HEAP32[(0 + 104064 | 0) >> 2] | 0;
            if ($3 >>> 0 <= $6 >>> 0) {
             break label$9
            }
            label$14 : {
             if (!$0) {
              break label$14
             }
             label$15 : {
              label$16 : {
               $79 = $0 << $4 | 0;
               $0 = 2 << $4 | 0;
               $0 = $79 & ($0 | (0 - $0 | 0) | 0) | 0;
               $4 = __wasm_ctz_i32($0 & (0 - $0 | 0) | 0 | 0) | 0;
               $0 = $4 << 3 | 0;
               $5 = $0 + 104096 | 0;
               $0 = HEAP32[($0 + 104104 | 0) >> 2] | 0;
               $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if (($5 | 0) != ($7 | 0)) {
                break label$16
               }
               $2 = $2 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
               HEAP32[(0 + 104056 | 0) >> 2] = $2;
               break label$15;
              }
              HEAP32[($7 + 12 | 0) >> 2] = $5;
              HEAP32[($5 + 8 | 0) >> 2] = $7;
             }
             HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
             $7 = $0 + $3 | 0;
             $4 = $4 << 3 | 0;
             $5 = $4 - $3 | 0;
             HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
             HEAP32[($0 + $4 | 0) >> 2] = $5;
             label$17 : {
              if (!$6) {
               break label$17
              }
              $3 = ($6 & -8 | 0) + 104096 | 0;
              $4 = HEAP32[(0 + 104076 | 0) >> 2] | 0;
              label$18 : {
               label$19 : {
                $8 = 1 << ($6 >>> 3 | 0) | 0;
                if ($2 & $8 | 0) {
                 break label$19
                }
                HEAP32[(0 + 104056 | 0) >> 2] = $2 | $8 | 0;
                $8 = $3;
                break label$18;
               }
               $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
              }
              HEAP32[($3 + 8 | 0) >> 2] = $4;
              HEAP32[($8 + 12 | 0) >> 2] = $4;
              HEAP32[($4 + 12 | 0) >> 2] = $3;
              HEAP32[($4 + 8 | 0) >> 2] = $8;
             }
             $0 = $0 + 8 | 0;
             HEAP32[(0 + 104076 | 0) >> 2] = $7;
             HEAP32[(0 + 104064 | 0) >> 2] = $5;
             break label$1;
            }
            $9 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
            if (!$9) {
             break label$9
            }
            $7 = HEAP32[(((__wasm_ctz_i32($9 & (0 - $9 | 0) | 0 | 0) | 0) << 2 | 0) + 104360 | 0) >> 2] | 0;
            $4 = ((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
            $5 = $7;
            label$20 : {
             label$21 : while (1) {
              label$22 : {
               $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
               if ($0) {
                break label$22
               }
               $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
               if (!$0) {
                break label$20
               }
              }
              $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
              $191 = $5;
              $5 = $5 >>> 0 < $4 >>> 0;
              $4 = $5 ? $191 : $4;
              $7 = $5 ? $0 : $7;
              $5 = $0;
              continue label$21;
             };
            }
            $10 = HEAP32[($7 + 24 | 0) >> 2] | 0;
            label$23 : {
             $8 = HEAP32[($7 + 12 | 0) >> 2] | 0;
             if (($8 | 0) == ($7 | 0)) {
              break label$23
             }
             $0 = HEAP32[($7 + 8 | 0) >> 2] | 0;
             HEAP32[(0 + 104072 | 0) >> 2] | 0;
             HEAP32[($0 + 12 | 0) >> 2] = $8;
             HEAP32[($8 + 8 | 0) >> 2] = $0;
             break label$2;
            }
            label$24 : {
             $5 = $7 + 20 | 0;
             $0 = HEAP32[$5 >> 2] | 0;
             if ($0) {
              break label$24
             }
             $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
             if (!$0) {
              break label$8
             }
             $5 = $7 + 16 | 0;
            }
            label$25 : while (1) {
             $11 = $5;
             $8 = $0;
             $5 = $0 + 20 | 0;
             $0 = HEAP32[$5 >> 2] | 0;
             if ($0) {
              continue label$25
             }
             $5 = $8 + 16 | 0;
             $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
             if ($0) {
              continue label$25
             }
             break label$25;
            };
            HEAP32[$11 >> 2] = 0;
            break label$2;
           }
           $3 = -1;
           if ($0 >>> 0 > -65 >>> 0) {
            break label$9
           }
           $0 = $0 + 11 | 0;
           $3 = $0 & -8 | 0;
           $6 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
           if (!$6) {
            break label$9
           }
           $11 = 0;
           label$26 : {
            if ($3 >>> 0 < 256 >>> 0) {
             break label$26
            }
            $11 = 31;
            if ($3 >>> 0 > 16777215 >>> 0) {
             break label$26
            }
            $0 = Math_clz32($0 >>> 8 | 0);
            $11 = ((($3 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
           }
           $4 = 0 - $3 | 0;
           label$27 : {
            label$28 : {
             label$29 : {
              label$30 : {
               $5 = HEAP32[(($11 << 2 | 0) + 104360 | 0) >> 2] | 0;
               if ($5) {
                break label$30
               }
               $0 = 0;
               $8 = 0;
               break label$29;
              }
              $0 = 0;
              $7 = $3 << (($11 | 0) == (31 | 0) ? 0 : 25 - ($11 >>> 1 | 0) | 0) | 0;
              $8 = 0;
              label$31 : while (1) {
               label$32 : {
                $2 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                if ($2 >>> 0 >= $4 >>> 0) {
                 break label$32
                }
                $4 = $2;
                $8 = $5;
                if ($4) {
                 break label$32
                }
                $4 = 0;
                $8 = $5;
                $0 = $5;
                break label$28;
               }
               $2 = HEAP32[($5 + 20 | 0) >> 2] | 0;
               $5 = HEAP32[(($5 + (($7 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
               $0 = $2 ? (($2 | 0) == ($5 | 0) ? $0 : $2) : $0;
               $7 = $7 << 1 | 0;
               if ($5) {
                continue label$31
               }
               break label$31;
              };
             }
             label$33 : {
              if ($0 | $8 | 0) {
               break label$33
              }
              $8 = 0;
              $0 = 2 << $11 | 0;
              $0 = ($0 | (0 - $0 | 0) | 0) & $6 | 0;
              if (!$0) {
               break label$9
              }
              $0 = HEAP32[(((__wasm_ctz_i32($0 & (0 - $0 | 0) | 0 | 0) | 0) << 2 | 0) + 104360 | 0) >> 2] | 0;
             }
             if (!$0) {
              break label$27
             }
            }
            label$34 : while (1) {
             $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
             $7 = $2 >>> 0 < $4 >>> 0;
             label$35 : {
              $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
              if ($5) {
               break label$35
              }
              $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
             }
             $4 = $7 ? $2 : $4;
             $8 = $7 ? $0 : $8;
             $0 = $5;
             if ($0) {
              continue label$34
             }
             break label$34;
            };
           }
           if (!$8) {
            break label$9
           }
           if ($4 >>> 0 >= ((HEAP32[(0 + 104064 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
            break label$9
           }
           $11 = HEAP32[($8 + 24 | 0) >> 2] | 0;
           label$36 : {
            $7 = HEAP32[($8 + 12 | 0) >> 2] | 0;
            if (($7 | 0) == ($8 | 0)) {
             break label$36
            }
            $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
            HEAP32[(0 + 104072 | 0) >> 2] | 0;
            HEAP32[($0 + 12 | 0) >> 2] = $7;
            HEAP32[($7 + 8 | 0) >> 2] = $0;
            break label$3;
           }
           label$37 : {
            $5 = $8 + 20 | 0;
            $0 = HEAP32[$5 >> 2] | 0;
            if ($0) {
             break label$37
            }
            $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
            if (!$0) {
             break label$7
            }
            $5 = $8 + 16 | 0;
           }
           label$38 : while (1) {
            $2 = $5;
            $7 = $0;
            $5 = $0 + 20 | 0;
            $0 = HEAP32[$5 >> 2] | 0;
            if ($0) {
             continue label$38
            }
            $5 = $7 + 16 | 0;
            $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
            if ($0) {
             continue label$38
            }
            break label$38;
           };
           HEAP32[$2 >> 2] = 0;
           break label$3;
          }
          label$39 : {
           $0 = HEAP32[(0 + 104064 | 0) >> 2] | 0;
           if ($0 >>> 0 < $3 >>> 0) {
            break label$39
           }
           $4 = HEAP32[(0 + 104076 | 0) >> 2] | 0;
           label$40 : {
            label$41 : {
             $5 = $0 - $3 | 0;
             if ($5 >>> 0 < 16 >>> 0) {
              break label$41
             }
             $7 = $4 + $3 | 0;
             HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
             HEAP32[($4 + $0 | 0) >> 2] = $5;
             HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
             break label$40;
            }
            HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
            $0 = $4 + $0 | 0;
            HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
            $7 = 0;
            $5 = 0;
           }
           HEAP32[(0 + 104064 | 0) >> 2] = $5;
           HEAP32[(0 + 104076 | 0) >> 2] = $7;
           $0 = $4 + 8 | 0;
           break label$1;
          }
          label$42 : {
           $7 = HEAP32[(0 + 104068 | 0) >> 2] | 0;
           if ($7 >>> 0 <= $3 >>> 0) {
            break label$42
           }
           $4 = $7 - $3 | 0;
           HEAP32[(0 + 104068 | 0) >> 2] = $4;
           $0 = HEAP32[(0 + 104080 | 0) >> 2] | 0;
           $5 = $0 + $3 | 0;
           HEAP32[(0 + 104080 | 0) >> 2] = $5;
           HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
           HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
           $0 = $0 + 8 | 0;
           break label$1;
          }
          label$43 : {
           label$44 : {
            if (!(HEAP32[(0 + 104528 | 0) >> 2] | 0)) {
             break label$44
            }
            $4 = HEAP32[(0 + 104536 | 0) >> 2] | 0;
            break label$43;
           }
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = -1;
           HEAP32[(i64toi32_i32$1 + 104540 | 0) >> 2] = -1;
           HEAP32[(i64toi32_i32$1 + 104544 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 4096;
           HEAP32[(i64toi32_i32$1 + 104532 | 0) >> 2] = 4096;
           HEAP32[(i64toi32_i32$1 + 104536 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(0 + 104528 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
           HEAP32[(0 + 104548 | 0) >> 2] = 0;
           HEAP32[(0 + 104500 | 0) >> 2] = 0;
           $4 = 4096;
          }
          $0 = 0;
          $6 = $3 + 47 | 0;
          $2 = $4 + $6 | 0;
          $11 = 0 - $4 | 0;
          $8 = $2 & $11 | 0;
          if ($8 >>> 0 <= $3 >>> 0) {
           break label$1
          }
          $0 = 0;
          label$45 : {
           $4 = HEAP32[(0 + 104496 | 0) >> 2] | 0;
           if (!$4) {
            break label$45
           }
           $5 = HEAP32[(0 + 104488 | 0) >> 2] | 0;
           $9 = $5 + $8 | 0;
           if ($9 >>> 0 <= $5 >>> 0) {
            break label$1
           }
           if ($9 >>> 0 > $4 >>> 0) {
            break label$1
           }
          }
          label$46 : {
           label$47 : {
            if ((HEAPU8[(0 + 104500 | 0) >> 0] | 0) & 4 | 0) {
             break label$47
            }
            label$48 : {
             label$49 : {
              label$50 : {
               label$51 : {
                label$52 : {
                 $4 = HEAP32[(0 + 104080 | 0) >> 2] | 0;
                 if (!$4) {
                  break label$52
                 }
                 $0 = 104504;
                 label$53 : while (1) {
                  label$54 : {
                   $5 = HEAP32[$0 >> 2] | 0;
                   if ($5 >>> 0 > $4 >>> 0) {
                    break label$54
                   }
                   if (($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                    break label$51
                   }
                  }
                  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                  if ($0) {
                   continue label$53
                  }
                  break label$53;
                 };
                }
                $7 = sbrk(0 | 0) | 0;
                if (($7 | 0) == (-1 | 0)) {
                 break label$48
                }
                $2 = $8;
                label$55 : {
                 $0 = HEAP32[(0 + 104532 | 0) >> 2] | 0;
                 $4 = $0 + -1 | 0;
                 if (!($4 & $7 | 0)) {
                  break label$55
                 }
                 $2 = ($8 - $7 | 0) + (($4 + $7 | 0) & (0 - $0 | 0) | 0) | 0;
                }
                if ($2 >>> 0 <= $3 >>> 0) {
                 break label$48
                }
                label$56 : {
                 $0 = HEAP32[(0 + 104496 | 0) >> 2] | 0;
                 if (!$0) {
                  break label$56
                 }
                 $4 = HEAP32[(0 + 104488 | 0) >> 2] | 0;
                 $5 = $4 + $2 | 0;
                 if ($5 >>> 0 <= $4 >>> 0) {
                  break label$48
                 }
                 if ($5 >>> 0 > $0 >>> 0) {
                  break label$48
                 }
                }
                $0 = sbrk($2 | 0) | 0;
                if (($0 | 0) != ($7 | 0)) {
                 break label$50
                }
                break label$46;
               }
               $2 = ($2 - $7 | 0) & $11 | 0;
               $7 = sbrk($2 | 0) | 0;
               if (($7 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
                break label$49
               }
               $0 = $7;
              }
              if (($0 | 0) == (-1 | 0)) {
               break label$48
              }
              label$57 : {
               if (($3 + 48 | 0) >>> 0 > $2 >>> 0) {
                break label$57
               }
               $7 = $0;
               break label$46;
              }
              $4 = HEAP32[(0 + 104536 | 0) >> 2] | 0;
              $4 = (($6 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
              if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
               break label$48
              }
              $2 = $4 + $2 | 0;
              $7 = $0;
              break label$46;
             }
             if (($7 | 0) != (-1 | 0)) {
              break label$46
             }
            }
            HEAP32[(0 + 104500 | 0) >> 2] = HEAP32[(0 + 104500 | 0) >> 2] | 0 | 4 | 0;
           }
           $7 = sbrk($8 | 0) | 0;
           $0 = sbrk(0 | 0) | 0;
           if (($7 | 0) == (-1 | 0)) {
            break label$4
           }
           if (($0 | 0) == (-1 | 0)) {
            break label$4
           }
           if ($7 >>> 0 >= $0 >>> 0) {
            break label$4
           }
           $2 = $0 - $7 | 0;
           if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
            break label$4
           }
          }
          $0 = (HEAP32[(0 + 104488 | 0) >> 2] | 0) + $2 | 0;
          HEAP32[(0 + 104488 | 0) >> 2] = $0;
          label$58 : {
           if ($0 >>> 0 <= (HEAP32[(0 + 104492 | 0) >> 2] | 0) >>> 0) {
            break label$58
           }
           HEAP32[(0 + 104492 | 0) >> 2] = $0;
          }
          label$59 : {
           label$60 : {
            $4 = HEAP32[(0 + 104080 | 0) >> 2] | 0;
            if (!$4) {
             break label$60
            }
            $0 = 104504;
            label$61 : while (1) {
             $5 = HEAP32[$0 >> 2] | 0;
             $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             if (($7 | 0) == ($5 + $8 | 0 | 0)) {
              break label$59
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             if ($0) {
              continue label$61
             }
             break label$6;
            };
           }
           label$62 : {
            label$63 : {
             $0 = HEAP32[(0 + 104072 | 0) >> 2] | 0;
             if (!$0) {
              break label$63
             }
             if ($7 >>> 0 >= $0 >>> 0) {
              break label$62
             }
            }
            HEAP32[(0 + 104072 | 0) >> 2] = $7;
           }
           $0 = 0;
           HEAP32[(0 + 104508 | 0) >> 2] = $2;
           HEAP32[(0 + 104504 | 0) >> 2] = $7;
           HEAP32[(0 + 104088 | 0) >> 2] = -1;
           HEAP32[(0 + 104092 | 0) >> 2] = HEAP32[(0 + 104528 | 0) >> 2] | 0;
           HEAP32[(0 + 104516 | 0) >> 2] = 0;
           label$64 : while (1) {
            $4 = $0 << 3 | 0;
            $5 = $4 + 104096 | 0;
            HEAP32[($4 + 104104 | 0) >> 2] = $5;
            HEAP32[($4 + 104108 | 0) >> 2] = $5;
            $0 = $0 + 1 | 0;
            if (($0 | 0) != (32 | 0)) {
             continue label$64
            }
            break label$64;
           };
           $0 = $2 + -40 | 0;
           $4 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
           $5 = $0 - $4 | 0;
           HEAP32[(0 + 104068 | 0) >> 2] = $5;
           $4 = $7 + $4 | 0;
           HEAP32[(0 + 104080 | 0) >> 2] = $4;
           HEAP32[($4 + 4 | 0) >> 2] = $5 | 1 | 0;
           HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
           HEAP32[(0 + 104084 | 0) >> 2] = HEAP32[(0 + 104544 | 0) >> 2] | 0;
           break label$5;
          }
          if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
           break label$6
          }
          if ($4 >>> 0 < $5 >>> 0) {
           break label$6
          }
          if ($4 >>> 0 >= $7 >>> 0) {
           break label$6
          }
          HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
          $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
          $5 = $4 + $0 | 0;
          HEAP32[(0 + 104080 | 0) >> 2] = $5;
          $7 = (HEAP32[(0 + 104068 | 0) >> 2] | 0) + $2 | 0;
          $0 = $7 - $0 | 0;
          HEAP32[(0 + 104068 | 0) >> 2] = $0;
          HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
          HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 104084 | 0) >> 2] = HEAP32[(0 + 104544 | 0) >> 2] | 0;
          break label$5;
         }
         $8 = 0;
         break label$2;
        }
        $7 = 0;
        break label$3;
       }
       label$65 : {
        $8 = HEAP32[(0 + 104072 | 0) >> 2] | 0;
        if ($7 >>> 0 >= $8 >>> 0) {
         break label$65
        }
        HEAP32[(0 + 104072 | 0) >> 2] = $7;
        $8 = $7;
       }
       $5 = $7 + $2 | 0;
       $0 = 104504;
       label$66 : {
        label$67 : {
         label$68 : {
          label$69 : {
           label$70 : {
            label$71 : {
             label$72 : {
              label$73 : while (1) {
               if ((HEAP32[$0 >> 2] | 0 | 0) == ($5 | 0)) {
                break label$72
               }
               $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
               if ($0) {
                continue label$73
               }
               break label$71;
              };
             }
             if (!((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$70
             }
            }
            $0 = 104504;
            label$74 : while (1) {
             label$75 : {
              $5 = HEAP32[$0 >> 2] | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$75
              }
              $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
              if ($5 >>> 0 > $4 >>> 0) {
               break label$69
              }
             }
             $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
             continue label$74;
            };
           }
           HEAP32[$0 >> 2] = $7;
           HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $2 | 0;
           $11 = $7 + (($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11 + 4 | 0) >> 2] = $3 | 3 | 0;
           $2 = $5 + (($5 + 8 | 0) & 7 | 0 ? (-8 - $5 | 0) & 7 | 0 : 0) | 0;
           $3 = $11 + $3 | 0;
           $0 = $2 - $3 | 0;
           label$76 : {
            if (($2 | 0) != ($4 | 0)) {
             break label$76
            }
            HEAP32[(0 + 104080 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 104068 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 104068 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            break label$67;
           }
           label$77 : {
            if (($2 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
             break label$77
            }
            HEAP32[(0 + 104076 | 0) >> 2] = $3;
            $0 = (HEAP32[(0 + 104064 | 0) >> 2] | 0) + $0 | 0;
            HEAP32[(0 + 104064 | 0) >> 2] = $0;
            HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
            HEAP32[($3 + $0 | 0) >> 2] = $0;
            break label$67;
           }
           label$78 : {
            $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
            if (($4 & 3 | 0 | 0) != (1 | 0)) {
             break label$78
            }
            $6 = $4 & -8 | 0;
            label$79 : {
             label$80 : {
              if ($4 >>> 0 > 255 >>> 0) {
               break label$80
              }
              $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
              $8 = $4 >>> 3 | 0;
              $7 = ($8 << 3 | 0) + 104096 | 0;
              label$81 : {
               $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
               if (($4 | 0) != ($5 | 0)) {
                break label$81
               }
               HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8 | 0) | 0) | 0;
               break label$79;
              }
              HEAP32[($5 + 12 | 0) >> 2] = $4;
              HEAP32[($4 + 8 | 0) >> 2] = $5;
              break label$79;
             }
             $9 = HEAP32[($2 + 24 | 0) >> 2] | 0;
             label$82 : {
              label$83 : {
               $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
               if (($7 | 0) == ($2 | 0)) {
                break label$83
               }
               $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
               HEAP32[($4 + 12 | 0) >> 2] = $7;
               HEAP32[($7 + 8 | 0) >> 2] = $4;
               break label$82;
              }
              label$84 : {
               $4 = $2 + 20 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                break label$84
               }
               $4 = $2 + 16 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                break label$84
               }
               $7 = 0;
               break label$82;
              }
              label$85 : while (1) {
               $8 = $4;
               $7 = $5;
               $4 = $7 + 20 | 0;
               $5 = HEAP32[$4 >> 2] | 0;
               if ($5) {
                continue label$85
               }
               $4 = $7 + 16 | 0;
               $5 = HEAP32[($7 + 16 | 0) >> 2] | 0;
               if ($5) {
                continue label$85
               }
               break label$85;
              };
              HEAP32[$8 >> 2] = 0;
             }
             if (!$9) {
              break label$79
             }
             label$86 : {
              label$87 : {
               $5 = HEAP32[($2 + 28 | 0) >> 2] | 0;
               $4 = ($5 << 2 | 0) + 104360 | 0;
               if (($2 | 0) != (HEAP32[$4 >> 2] | 0 | 0)) {
                break label$87
               }
               HEAP32[$4 >> 2] = $7;
               if ($7) {
                break label$86
               }
               HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
               break label$79;
              }
              HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $7;
              if (!$7) {
               break label$79
              }
             }
             HEAP32[($7 + 24 | 0) >> 2] = $9;
             label$88 : {
              $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
              if (!$4) {
               break label$88
              }
              HEAP32[($7 + 16 | 0) >> 2] = $4;
              HEAP32[($4 + 24 | 0) >> 2] = $7;
             }
             $4 = HEAP32[($2 + 20 | 0) >> 2] | 0;
             if (!$4) {
              break label$79
             }
             HEAP32[($7 + 20 | 0) >> 2] = $4;
             HEAP32[($4 + 24 | 0) >> 2] = $7;
            }
            $0 = $6 + $0 | 0;
            $2 = $2 + $6 | 0;
            $4 = HEAP32[($2 + 4 | 0) >> 2] | 0;
           }
           HEAP32[($2 + 4 | 0) >> 2] = $4 & -2 | 0;
           HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
           HEAP32[($3 + $0 | 0) >> 2] = $0;
           label$89 : {
            if ($0 >>> 0 > 255 >>> 0) {
             break label$89
            }
            $4 = ($0 & -8 | 0) + 104096 | 0;
            label$90 : {
             label$91 : {
              $5 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
              $0 = 1 << ($0 >>> 3 | 0) | 0;
              if ($5 & $0 | 0) {
               break label$91
              }
              HEAP32[(0 + 104056 | 0) >> 2] = $5 | $0 | 0;
              $0 = $4;
              break label$90;
             }
             $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4 + 8 | 0) >> 2] = $3;
            HEAP32[($0 + 12 | 0) >> 2] = $3;
            HEAP32[($3 + 12 | 0) >> 2] = $4;
            HEAP32[($3 + 8 | 0) >> 2] = $0;
            break label$67;
           }
           $4 = 31;
           label$92 : {
            if ($0 >>> 0 > 16777215 >>> 0) {
             break label$92
            }
            $4 = Math_clz32($0 >>> 8 | 0);
            $4 = ((($0 >>> (38 - $4 | 0) | 0) & 1 | 0) - ($4 << 1 | 0) | 0) + 62 | 0;
           }
           HEAP32[($3 + 28 | 0) >> 2] = $4;
           i64toi32_i32$1 = $3;
           i64toi32_i32$0 = 0;
           HEAP32[($3 + 16 | 0) >> 2] = 0;
           HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
           $5 = ($4 << 2 | 0) + 104360 | 0;
           label$93 : {
            label$94 : {
             $7 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
             $8 = 1 << $4 | 0;
             if ($7 & $8 | 0) {
              break label$94
             }
             HEAP32[(0 + 104060 | 0) >> 2] = $7 | $8 | 0;
             HEAP32[$5 >> 2] = $3;
             HEAP32[($3 + 24 | 0) >> 2] = $5;
             break label$93;
            }
            $4 = $0 << (($4 | 0) == (31 | 0) ? 0 : 25 - ($4 >>> 1 | 0) | 0) | 0;
            $7 = HEAP32[$5 >> 2] | 0;
            label$95 : while (1) {
             $5 = $7;
             if (((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
              break label$68
             }
             $7 = $4 >>> 29 | 0;
             $4 = $4 << 1 | 0;
             $8 = ($5 + ($7 & 4 | 0) | 0) + 16 | 0;
             $7 = HEAP32[$8 >> 2] | 0;
             if ($7) {
              continue label$95
             }
             break label$95;
            };
            HEAP32[$8 >> 2] = $3;
            HEAP32[($3 + 24 | 0) >> 2] = $5;
           }
           HEAP32[($3 + 12 | 0) >> 2] = $3;
           HEAP32[($3 + 8 | 0) >> 2] = $3;
           break label$67;
          }
          $0 = $2 + -40 | 0;
          $8 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
          $11 = $0 - $8 | 0;
          HEAP32[(0 + 104068 | 0) >> 2] = $11;
          $8 = $7 + $8 | 0;
          HEAP32[(0 + 104080 | 0) >> 2] = $8;
          HEAP32[($8 + 4 | 0) >> 2] = $11 | 1 | 0;
          HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 104084 | 0) >> 2] = HEAP32[(0 + 104544 | 0) >> 2] | 0;
          $0 = ($5 + (($5 + -39 | 0) & 7 | 0 ? (39 - $5 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
          HEAP32[($8 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104512 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104516 | 0) >> 2] | 0;
          $1104 = i64toi32_i32$0;
          i64toi32_i32$0 = $8 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1104;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104504 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104508 | 0) >> 2] | 0;
          $1106 = i64toi32_i32$1;
          i64toi32_i32$1 = $8;
          HEAP32[($8 + 8 | 0) >> 2] = $1106;
          HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 104512 | 0) >> 2] = $8 + 8 | 0;
          HEAP32[(0 + 104508 | 0) >> 2] = $2;
          HEAP32[(0 + 104504 | 0) >> 2] = $7;
          HEAP32[(0 + 104516 | 0) >> 2] = 0;
          $0 = $8 + 24 | 0;
          label$96 : while (1) {
           HEAP32[($0 + 4 | 0) >> 2] = 7;
           $7 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($7 >>> 0 < $5 >>> 0) {
            continue label$96
           }
           break label$96;
          };
          if (($8 | 0) == ($4 | 0)) {
           break label$5
          }
          HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
          $7 = $8 - $4 | 0;
          HEAP32[($4 + 4 | 0) >> 2] = $7 | 1 | 0;
          HEAP32[$8 >> 2] = $7;
          label$97 : {
           if ($7 >>> 0 > 255 >>> 0) {
            break label$97
           }
           $0 = ($7 & -8 | 0) + 104096 | 0;
           label$98 : {
            label$99 : {
             $5 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
             $7 = 1 << ($7 >>> 3 | 0) | 0;
             if ($5 & $7 | 0) {
              break label$99
             }
             HEAP32[(0 + 104056 | 0) >> 2] = $5 | $7 | 0;
             $5 = $0;
             break label$98;
            }
            $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0 + 8 | 0) >> 2] = $4;
           HEAP32[($5 + 12 | 0) >> 2] = $4;
           HEAP32[($4 + 12 | 0) >> 2] = $0;
           HEAP32[($4 + 8 | 0) >> 2] = $5;
           break label$5;
          }
          $0 = 31;
          label$100 : {
           if ($7 >>> 0 > 16777215 >>> 0) {
            break label$100
           }
           $0 = Math_clz32($7 >>> 8 | 0);
           $0 = ((($7 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
          }
          HEAP32[($4 + 28 | 0) >> 2] = $0;
          i64toi32_i32$1 = $4;
          i64toi32_i32$0 = 0;
          HEAP32[($4 + 16 | 0) >> 2] = 0;
          HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
          $5 = ($0 << 2 | 0) + 104360 | 0;
          label$101 : {
           label$102 : {
            $8 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
            $2 = 1 << $0 | 0;
            if ($8 & $2 | 0) {
             break label$102
            }
            HEAP32[(0 + 104060 | 0) >> 2] = $8 | $2 | 0;
            HEAP32[$5 >> 2] = $4;
            HEAP32[($4 + 24 | 0) >> 2] = $5;
            break label$101;
           }
           $0 = $7 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $8 = HEAP32[$5 >> 2] | 0;
           label$103 : while (1) {
            $5 = $8;
            if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7 | 0)) {
             break label$66
            }
            $8 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $2 = ($5 + ($8 & 4 | 0) | 0) + 16 | 0;
            $8 = HEAP32[$2 >> 2] | 0;
            if ($8) {
             continue label$103
            }
            break label$103;
           };
           HEAP32[$2 >> 2] = $4;
           HEAP32[($4 + 24 | 0) >> 2] = $5;
          }
          HEAP32[($4 + 12 | 0) >> 2] = $4;
          HEAP32[($4 + 8 | 0) >> 2] = $4;
          break label$5;
         }
         $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($5 + 8 | 0) >> 2] = $3;
         HEAP32[($3 + 24 | 0) >> 2] = 0;
         HEAP32[($3 + 12 | 0) >> 2] = $5;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $11 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($5 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $5;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 104068 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$4
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 104068 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 104080 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 104080 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     HEAP32[(__errno_location() | 0) >> 2] = 48;
     $0 = 0;
     break label$1;
    }
    label$104 : {
     if (!$11) {
      break label$104
     }
     label$105 : {
      label$106 : {
       $5 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($5 << 2 | 0) + 104360 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$106
       }
       HEAP32[$0 >> 2] = $7;
       if ($7) {
        break label$105
       }
       $6 = $6 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       HEAP32[(0 + 104060 | 0) >> 2] = $6;
       break label$104;
      }
      HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $7;
      if (!$7) {
       break label$104
      }
     }
     HEAP32[($7 + 24 | 0) >> 2] = $11;
     label$107 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$107
      }
      HEAP32[($7 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $7;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$104
     }
     HEAP32[($7 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $7;
    }
    label$108 : {
     label$109 : {
      if ($4 >>> 0 > 15 >>> 0) {
       break label$109
      }
      $0 = $4 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = $8 + $0 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$108;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     $7 = $8 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($7 + $4 | 0) >> 2] = $4;
     label$110 : {
      if ($4 >>> 0 > 255 >>> 0) {
       break label$110
      }
      $0 = ($4 & -8 | 0) + 104096 | 0;
      label$111 : {
       label$112 : {
        $5 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
        $4 = 1 << ($4 >>> 3 | 0) | 0;
        if ($5 & $4 | 0) {
         break label$112
        }
        HEAP32[(0 + 104056 | 0) >> 2] = $5 | $4 | 0;
        $4 = $0;
        break label$111;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[($4 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 12 | 0) >> 2] = $0;
      HEAP32[($7 + 8 | 0) >> 2] = $4;
      break label$108;
     }
     $0 = 31;
     label$113 : {
      if ($4 >>> 0 > 16777215 >>> 0) {
       break label$113
      }
      $0 = Math_clz32($4 >>> 8 | 0);
      $0 = ((($4 >>> (38 - $0 | 0) | 0) & 1 | 0) - ($0 << 1 | 0) | 0) + 62 | 0;
     }
     HEAP32[($7 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = 0;
     HEAP32[($7 + 16 | 0) >> 2] = 0;
     HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5 = ($0 << 2 | 0) + 104360 | 0;
     label$114 : {
      label$115 : {
       label$116 : {
        $3 = 1 << $0 | 0;
        if ($6 & $3 | 0) {
         break label$116
        }
        HEAP32[(0 + 104060 | 0) >> 2] = $6 | $3 | 0;
        HEAP32[$5 >> 2] = $7;
        HEAP32[($7 + 24 | 0) >> 2] = $5;
        break label$115;
       }
       $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$5 >> 2] | 0;
       label$117 : while (1) {
        $5 = $3;
        if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
         break label$114
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $2 = ($5 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$2 >> 2] | 0;
        if ($3) {
         continue label$117
        }
        break label$117;
       };
       HEAP32[$2 >> 2] = $7;
       HEAP32[($7 + 24 | 0) >> 2] = $5;
      }
      HEAP32[($7 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 8 | 0) >> 2] = $7;
      break label$108;
     }
     $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7;
     HEAP32[($5 + 8 | 0) >> 2] = $7;
     HEAP32[($7 + 24 | 0) >> 2] = 0;
     HEAP32[($7 + 12 | 0) >> 2] = $5;
     HEAP32[($7 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$1;
   }
   label$118 : {
    if (!$10) {
     break label$118
    }
    label$119 : {
     label$120 : {
      $5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
      $0 = ($5 << 2 | 0) + 104360 | 0;
      if (($7 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$120
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$119
      }
      HEAP32[(0 + 104060 | 0) >> 2] = $9 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
      break label$118;
     }
     HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$118
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $10;
    label$121 : {
     $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$121
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$118
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$122 : {
    label$123 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$123
     }
     $0 = $4 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = $7 + $0 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$122;
    }
    HEAP32[($7 + 4 | 0) >> 2] = $3 | 3 | 0;
    $5 = $7 + $3 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($5 + $4 | 0) >> 2] = $4;
    label$124 : {
     if (!$6) {
      break label$124
     }
     $3 = ($6 & -8 | 0) + 104096 | 0;
     $0 = HEAP32[(0 + 104076 | 0) >> 2] | 0;
     label$125 : {
      label$126 : {
       $8 = 1 << ($6 >>> 3 | 0) | 0;
       if ($8 & $2 | 0) {
        break label$126
       }
       HEAP32[(0 + 104056 | 0) >> 2] = $8 | $2 | 0;
       $8 = $3;
       break label$125;
      }
      $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 8 | 0) >> 2] = $0;
     HEAP32[($8 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $3;
     HEAP32[($0 + 8 | 0) >> 2] = $8;
    }
    HEAP32[(0 + 104076 | 0) >> 2] = $5;
    HEAP32[(0 + 104064 | 0) >> 2] = $4;
   }
   $0 = $7 + 8 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $6 = 0, $4 = 0, $3 = 0, $5 = 0, $7 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 104072 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if (($1 | 0) == (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      $5 = $2 >>> 3 | 0;
      $6 = ($5 << 3 | 0) + 104096 | 0;
      label$5 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != ($4 | 0)) {
        break label$5
       }
       HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4 + 12 | 0) >> 2] = $2;
      HEAP32[($2 + 8 | 0) >> 2] = $4;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$7
       }
       $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $2;
       break label$6;
      }
      label$8 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $6 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5 = $2;
       $6 = $4;
       $2 = $6 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$9
       }
       $2 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 104360 | 0;
       if (($1 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2 >> 2] = $6;
       if ($6) {
        break label$10
       }
       HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$2
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $7;
     label$12 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$12
      }
      HEAP32[($6 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($6 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $6;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 104064 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($1 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3 | 0) != (HEAP32[(0 + 104080 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 104080 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 104068 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 104068 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 104064 | 0) >> 2] = 0;
      HEAP32[(0 + 104076 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 104076 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 104064 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 104064 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$17 : {
      label$18 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $5 = $2 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 104096 | 0;
       label$19 : {
        $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($2 | 0) != ($4 | 0)) {
         break label$19
        }
        HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $2;
       HEAP32[($2 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$21
        }
        $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 104072 | 0) >> 2] | 0;
        HEAP32[($2 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $2;
        break label$20;
       }
       label$22 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $2;
        $6 = $4;
        $2 = $6 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$23
        }
        $2 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 104360 | 0;
        if (($3 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2 >> 2] = $6;
        if ($6) {
         break label$24
        }
        HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $6;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 104064 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$27 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2 = ($0 & -8 | 0) + 104096 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
      $0 = 1 << ($0 >>> 3 | 0) | 0;
      if ($4 & $0 | 0) {
       break label$29
      }
      HEAP32[(0 + 104056 | 0) >> 2] = $4 | $0 | 0;
      $0 = $2;
      break label$28;
     }
     $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 8 | 0) >> 2] = $1;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $2;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    return;
   }
   $2 = 31;
   label$30 : {
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2 = Math_clz32($0 >>> 8 | 0);
    $2 = ((($0 >>> (38 - $2 | 0) | 0) & 1 | 0) - ($2 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   $4 = ($2 << 2 | 0) + 104360 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($6 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 104060 | 0) >> 2] = $6 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$33;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$4 >> 2] | 0;
      label$35 : while (1) {
       $4 = $6;
       if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$32
       }
       $6 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
       $6 = HEAP32[$3 >> 2] | 0;
       if ($6) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$31;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 104088 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 104088 | 0) >> 2] = $1 ? $1 : -1;
  }
 }
 
 function dlrealloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return dlmalloc($1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[(__errno_location() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$3 : {
   $2 = try_realloc_chunk($0 + -8 | 0 | 0, ($1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2) {
    break label$3
   }
   return $2 + 8 | 0 | 0;
  }
  label$4 : {
   $2 = dlmalloc($1 | 0) | 0;
   if ($2) {
    break label$4
   }
   return 0 | 0;
  }
  $3 = HEAP32[($0 + -4 | 0) >> 2] | 0;
  $3 = ($3 & 3 | 0 ? -4 : -8) + ($3 & -8 | 0) | 0;
  __memcpy($2 | 0, $0 | 0, ($3 >>> 0 < $1 >>> 0 ? $3 : $1) | 0) | 0;
  dlfree($0 | 0);
  return $2 | 0;
 }
 
 function try_realloc_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $4 = 0, $6 = 0, $5 = 0, $2 = 0, $7 = 0, $9 = 0, $10 = 0, $8 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $3 = $2 & -8 | 0;
  label$1 : {
   label$2 : {
    if ($2 & 3 | 0) {
     break label$2
    }
    label$3 : {
     if ($1 >>> 0 >= 256 >>> 0) {
      break label$3
     }
     return 0 | 0;
    }
    label$4 : {
     if ($3 >>> 0 < ($1 + 4 | 0) >>> 0) {
      break label$4
     }
     $4 = $0;
     if (($3 - $1 | 0) >>> 0 <= ((HEAP32[(0 + 104536 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$1
     }
    }
    return 0 | 0;
   }
   $5 = $0 + $3 | 0;
   label$5 : {
    label$6 : {
     if ($3 >>> 0 < $1 >>> 0) {
      break label$6
     }
     $3 = $3 - $1 | 0;
     if ($3 >>> 0 < 16 >>> 0) {
      break label$5
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $1 = $0 + $1 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $3 | 3 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0 | 1 | 0;
     dispose_chunk($1 | 0, $3 | 0);
     break label$5;
    }
    $4 = 0;
    label$7 : {
     if (($5 | 0) != (HEAP32[(0 + 104080 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $3 = (HEAP32[(0 + 104068 | 0) >> 2] | 0) + $3 | 0;
     if ($3 >>> 0 <= $1 >>> 0) {
      break label$1
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
     $2 = $0 + $1 | 0;
     $1 = $3 - $1 | 0;
     HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[(0 + 104068 | 0) >> 2] = $1;
     HEAP32[(0 + 104080 | 0) >> 2] = $2;
     break label$5;
    }
    label$8 : {
     if (($5 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     $4 = 0;
     $3 = (HEAP32[(0 + 104064 | 0) >> 2] | 0) + $3 | 0;
     if ($3 >>> 0 < $1 >>> 0) {
      break label$1
     }
     label$9 : {
      label$10 : {
       $4 = $3 - $1 | 0;
       if ($4 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
       $1 = $0 + $1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $4 | 1 | 0;
       $3 = $0 + $3 | 0;
       HEAP32[$3 >> 2] = $4;
       HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $3 | 0 | 2 | 0;
      $1 = $0 + $3 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4 = 0;
      $1 = 0;
     }
     HEAP32[(0 + 104076 | 0) >> 2] = $1;
     HEAP32[(0 + 104064 | 0) >> 2] = $4;
     break label$5;
    }
    $4 = 0;
    $6 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    if ($6 & 2 | 0) {
     break label$1
    }
    $7 = ($6 & -8 | 0) + $3 | 0;
    if ($7 >>> 0 < $1 >>> 0) {
     break label$1
    }
    $8 = $7 - $1 | 0;
    label$11 : {
     label$12 : {
      if ($6 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
      $9 = $6 >>> 3 | 0;
      $6 = ($9 << 3 | 0) + 104096 | 0;
      label$13 : {
       $4 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if (($4 | 0) != ($3 | 0)) {
        break label$13
       }
       HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($3 + 12 | 0) >> 2] = $4;
      HEAP32[($4 + 8 | 0) >> 2] = $3;
      break label$11;
     }
     $10 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $6 = HEAP32[($5 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($5 | 0)) {
        break label$15
       }
       $3 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 104072 | 0) >> 2] | 0;
       HEAP32[($3 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $3;
       break label$14;
      }
      label$16 : {
       $3 = $5 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$16
       }
       $3 = $5 + 16 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        break label$16
       }
       $6 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $9 = $3;
       $6 = $4;
       $3 = $6 + 20 | 0;
       $4 = HEAP32[$3 >> 2] | 0;
       if ($4) {
        continue label$17
       }
       $3 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$9 >> 2] = 0;
     }
     if (!$10) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $4 = HEAP32[($5 + 28 | 0) >> 2] | 0;
       $3 = ($4 << 2 | 0) + 104360 | 0;
       if (($5 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
        break label$19
       }
       HEAP32[$3 >> 2] = $6;
       if ($6) {
        break label$18
       }
       HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
       break label$11;
      }
      HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($5 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$11
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $10;
     label$20 : {
      $3 = HEAP32[($5 + 16 | 0) >> 2] | 0;
      if (!$3) {
       break label$20
      }
      HEAP32[($6 + 16 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     $3 = HEAP32[($5 + 20 | 0) >> 2] | 0;
     if (!$3) {
      break label$11
     }
     HEAP32[($6 + 20 | 0) >> 2] = $3;
     HEAP32[($3 + 24 | 0) >> 2] = $6;
    }
    label$21 : {
     if ($8 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $7 | 0 | 2 | 0;
     $1 = $0 + $7 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$5;
    }
    HEAP32[($0 + 4 | 0) >> 2] = $2 & 1 | 0 | $1 | 0 | 2 | 0;
    $1 = $0 + $1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $8 | 3 | 0;
    $3 = $0 + $7 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $8 | 0);
   }
   $4 = $0;
  }
  return $4 | 0;
 }
 
 function internal_memalign($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  $2 = 16;
  label$1 : {
   label$2 : {
    $3 = $0 >>> 0 > 16 >>> 0 ? $0 : 16;
    if ($3 & ($3 + -1 | 0) | 0) {
     break label$2
    }
    $0 = $3;
    break label$1;
   }
   label$3 : while (1) {
    $0 = $2;
    $2 = $0 << 1 | 0;
    if ($0 >>> 0 < $3 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   if ((-64 - $0 | 0) >>> 0 > $1 >>> 0) {
    break label$4
   }
   HEAP32[(__errno_location() | 0) >> 2] = 48;
   return 0 | 0;
  }
  label$5 : {
   $1 = $1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0;
   $2 = dlmalloc(($1 + $0 | 0) + 12 | 0 | 0) | 0;
   if ($2) {
    break label$5
   }
   return 0 | 0;
  }
  $3 = $2 + -8 | 0;
  label$6 : {
   label$7 : {
    if (($0 + -1 | 0) & $2 | 0) {
     break label$7
    }
    $0 = $3;
    break label$6;
   }
   $4 = $2 + -4 | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   $2 = ((($2 + $0 | 0) + -1 | 0) & (0 - $0 | 0) | 0) + -8 | 0;
   $0 = $2 + (($2 - $3 | 0) >>> 0 > 15 >>> 0 ? 0 : $0) | 0;
   $2 = $0 - $3 | 0;
   $6 = ($5 & -8 | 0) - $2 | 0;
   label$8 : {
    if ($5 & 3 | 0) {
     break label$8
    }
    $3 = HEAP32[$3 >> 2] | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $6;
    HEAP32[$0 >> 2] = $3 + $2 | 0;
    break label$6;
   }
   HEAP32[($0 + 4 | 0) >> 2] = $6 | ((HEAP32[($0 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6 = $0 + $6 | 0;
   HEAP32[($6 + 4 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4 >> 2] = $2 | ((HEAP32[$4 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6 = $3 + $2 | 0;
   HEAP32[($6 + 4 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0 | 1 | 0;
   dispose_chunk($3 | 0, $2 | 0);
  }
  label$9 : {
   $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!($2 & 3 | 0)) {
    break label$9
   }
   $3 = $2 & -8 | 0;
   if ($3 >>> 0 <= ($1 + 16 | 0) >>> 0) {
    break label$9
   }
   HEAP32[($0 + 4 | 0) >> 2] = $1 | ($2 & 1 | 0) | 0 | 2 | 0;
   $2 = $0 + $1 | 0;
   $1 = $3 - $1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1 | 3 | 0;
   $3 = $0 + $3 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0 | 1 | 0;
   dispose_chunk($2 | 0, $1 | 0);
  }
  return $0 + 8 | 0 | 0;
 }
 
 function dlposix_memalign($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 | 0) != (8 | 0)) {
      break label$3
     }
     $1 = dlmalloc($2 | 0) | 0;
     break label$2;
    }
    $3 = 28;
    if ($1 >>> 0 < 4 >>> 0) {
     break label$1
    }
    if ($1 & 3 | 0) {
     break label$1
    }
    $4 = $1 >>> 2 | 0;
    if ($4 & ($4 + -1 | 0) | 0) {
     break label$1
    }
    $3 = 48;
    if ((-64 - $1 | 0) >>> 0 < $2 >>> 0) {
     break label$1
    }
    $1 = internal_memalign(($1 >>> 0 > 16 >>> 0 ? $1 : 16) | 0, $2 | 0) | 0;
   }
   label$4 : {
    if ($1) {
     break label$4
    }
    return 48 | 0;
   }
   HEAP32[$0 >> 2] = $1;
   $3 = 0;
  }
  return $3 | 0;
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $2 = 0, $5 = 0, $7 = 0;
  $2 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($3 & 1 | 0) {
     break label$2
    }
    if (!($3 & 3 | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $1 = $3 + $1 | 0;
    label$3 : {
     label$4 : {
      $0 = $0 - $3 | 0;
      if (($0 | 0) == (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 104096 | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if (($3 | 0) != ($4 | 0)) {
        break label$3
       }
       HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       break label$2;
      }
      $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($0 | 0)) {
         break label$7
        }
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 104072 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$6;
       }
       label$8 : {
        $3 = $0 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $3 = $0 + 16 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $6 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5 = $3;
        $6 = $4;
        $3 = $6 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         continue label$9
        }
        $3 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 104360 | 0;
        if (($0 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
         break label$11
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$10
        }
        HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$2;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$2
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$12 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$12
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$2
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
      break label$2;
     }
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 104064 | 0) >> 2] = $1;
     HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[$2 >> 2] = $1;
     return;
    }
    HEAP32[($4 + 12 | 0) >> 2] = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $4;
   }
   label$13 : {
    label$14 : {
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if ($3 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($2 | 0) != (HEAP32[(0 + 104080 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 104080 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 104068 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 104068 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      if (($0 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 104064 | 0) >> 2] = 0;
      HEAP32[(0 + 104076 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($2 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 104076 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 104064 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 104064 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      return;
     }
     $1 = ($3 & -8 | 0) + $1 | 0;
     label$17 : {
      label$18 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 104096 | 0;
       label$19 : {
        $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($3 | 0) != ($4 | 0)) {
         break label$19
        }
        HEAP32[(0 + 104056 | 0) >> 2] = (HEAP32[(0 + 104056 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($2 | 0)) {
         break label$21
        }
        $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 104072 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$20;
       }
       label$22 : {
        $4 = $2 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $4 = $2 + 16 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $4;
        $6 = $3;
        $4 = $3 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         continue label$23
        }
        $4 = $6 + 16 | 0;
        $3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($3) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 104360 | 0;
        if (($2 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$24
        }
        HEAP32[(0 + 104060 | 0) >> 2] = (HEAP32[(0 + 104060 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
     if (($0 | 0) != (HEAP32[(0 + 104076 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 104064 | 0) >> 2] = $1;
     return;
    }
    HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
    HEAP32[($0 + $1 | 0) >> 2] = $1;
   }
   label$27 : {
    if ($1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3 = ($1 & -8 | 0) + 104096 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 104056 | 0) >> 2] | 0;
      $1 = 1 << ($1 >>> 3 | 0) | 0;
      if ($4 & $1 | 0) {
       break label$29
      }
      HEAP32[(0 + 104056 | 0) >> 2] = $4 | $1 | 0;
      $1 = $3;
      break label$28;
     }
     $1 = HEAP32[($3 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($3 + 8 | 0) >> 2] = $0;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 12 | 0) >> 2] = $3;
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    return;
   }
   $3 = 31;
   label$30 : {
    if ($1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3 = Math_clz32($1 >>> 8 | 0);
    $3 = ((($1 >>> (38 - $3 | 0) | 0) & 1 | 0) - ($3 << 1 | 0) | 0) + 62 | 0;
   }
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   $4 = ($3 << 2 | 0) + 104360 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6 = HEAP32[(0 + 104060 | 0) >> 2] | 0;
      $2 = 1 << $3 | 0;
      if ($6 & $2 | 0) {
       break label$33
      }
      HEAP32[(0 + 104060 | 0) >> 2] = $6 | $2 | 0;
      HEAP32[$4 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $4;
      break label$32;
     }
     $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
     $6 = HEAP32[$4 >> 2] | 0;
     label$34 : while (1) {
      $4 = $6;
      if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
       break label$31
      }
      $6 = $3 >>> 29 | 0;
      $3 = $3 << 1 | 0;
      $2 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
      $6 = HEAP32[$2 >> 2] | 0;
      if ($6) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2 >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $4;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 8 | 0) >> 2] = $0;
    return;
   }
   $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $0;
   HEAP32[($4 + 8 | 0) >> 2] = $0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
 }
 
 function dlcalloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $13 = 0, $6$hi = 0, $8$hi = 0, $3 = 0, $3$hi = 0, $16 = 0, i64toi32_i32$2 = 0;
  label$1 : {
   label$2 : {
    if ($0) {
     break label$2
    }
    $2 = 0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($0 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
   $2 = i64toi32_i32$1;
   if (($1 | $0 | 0) >>> 0 < 65536 >>> 0) {
    break label$1
   }
   $16 = $2;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $13 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = ($13 | 0) != (0 | 0) ? -1 : $16;
  }
  label$3 : {
   $0 = dlmalloc($2 | 0) | 0;
   if (!$0) {
    break label$3
   }
   if (!((HEAPU8[($0 + -4 | 0) >> 0] | 0) & 3 | 0)) {
    break label$3
   }
   __memset($0 | 0, 0 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $4$hi = 0, $5$hi = 0, $5 = 0, $2 = 0, $3 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $33 = 0, $33$hi = 0, $36 = 0, $38 = 0, $43 = 0, $43$hi = 0, $45$hi = 0, $73 = 0, $73$hi = 0, $77$hi = 0, $80 = 0, $80$hi = 0, $82 = 0, $82$hi = 0, $86 = 0, $86$hi = 0, $88 = 0, $89$hi = 0, $98$hi = 0, $105 = 0, $105$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $44;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $4;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36 : $38) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43 = $46;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $5 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $5 = 0;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $5 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3 = $48;
   if ($3 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $4$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$2 | 0, $3 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0, 15361 - $3 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73 = $49;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $4;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$5 = $5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $5;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0 >>> 0 > 1 >>> 0 ? $0 : 1;
  label$1 : {
   label$2 : while (1) {
    $0 = dlmalloc($1 | 0) | 0;
    if ($0) {
     break label$1
    }
    label$3 : {
     $0 = std__get_new_handler_28_29() | 0;
     if (!$0) {
      break label$3
     }
     FUNCTION_TABLE[$0 | 0]();
     continue label$2;
    }
    break label$2;
   };
   abort();
   wasm2js_trap();
  }
  return $0 | 0;
 }
 
 function operator_20delete_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0 | 0);
 }
 
 function operator_20new_28unsigned_20long_2c_20std__align_val_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = $1 >>> 0 > 4 >>> 0 ? $1 : 4;
  $0 = $0 >>> 0 > 1 >>> 0 ? $0 : 1;
  label$1 : {
   label$2 : while (1) {
    $3 = std____2____libcpp_aligned_alloc_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29($2 | 0, $0 | 0) | 0;
    if ($3) {
     break label$1
    }
    $1 = std__get_new_handler_28_29() | 0;
    if (!$1) {
     break label$1
    }
    FUNCTION_TABLE[$1 | 0]();
    continue label$2;
   };
  }
  return $3 | 0;
 }
 
 function std____2____libcpp_aligned_alloc_5babi_v15007_5d_28unsigned_20long_2c_20unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  dlposix_memalign($2 + 12 | 0 | 0, $0 | 0, $1 | 0) | 0;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function operator_20delete_28void__2c_20std__align_val_t_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2____libcpp_aligned_free_5babi_v15007_5d_28void__29($0 | 0);
 }
 
 function std____2____libcpp_aligned_free_5babi_v15007_5d_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0 | 0);
 }
 
 function std__exception__exception_5babi_v15007_5d_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 84804 + 8 | 0;
  return $0 | 0;
 }
 
 function std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = strlen($1 | 0) | 0;
  $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0 | 0) | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 0;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$0 >> 2] = __memcpy(std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($3 | 0) | 0 | 0, $1 | 0, $2 + 1 | 0 | 0) | 0;
  return $0 | 0;
 }
 
 function std____2____refstring_imp___28anonymous_20namespace_29__data_from_rep_28std____2____refstring_imp___28anonymous_20namespace_29___Rep_base__29($0) {
  $0 = $0 | 0;
  return $0 + 12 | 0 | 0;
 }
 
 function std__logic_error__logic_error_28char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = std__exception__exception_5babi_v15007_5d_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 84916 + 8 | 0;
  std____2____libcpp_refstring____libcpp_refstring_28char_20const__29($0 + 4 | 0 | 0, $1 | 0) | 0;
  return $0 | 0;
 }
 
 function std____2____libcpp_refstring____uses_refcount_28_29_20const($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __overflow($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[($2 + 15 | 0) >> 0] = $1;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $3 = -1;
    if (__towrite($0 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (($4 | 0) == ($3 | 0)) {
     break label$3
    }
    $3 = $1 & 255 | 0;
    if ((HEAP32[($0 + 80 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
     break label$3
    }
    HEAP32[($0 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $1;
    break label$1;
   }
   $3 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, $2 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function fputc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return do_putc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function do_putc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($1 + 76 | 0) >> 2] | 0;
    if (($2 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2) {
     break label$1
    }
    if (($2 & -1073741825 | 0 | 0) != (HEAP32[((__get_tp() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP32[($1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (($3 | 0) == (HEAP32[($1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    return $2 | 0;
   }
   return __overflow($1 | 0, $2 | 0) | 0 | 0;
  }
  return locking_putc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function locking_putc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  label$1 : {
   $2 = $1 + 76 | 0;
   if (!(a_cas($2 | 0) | 0)) {
    break label$1
   }
   __lockfile($1 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    $3 = $0 & 255 | 0;
    if (($3 | 0) == (HEAP32[($1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (($4 | 0) == (HEAP32[($1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $0;
    break label$2;
   }
   $3 = __overflow($1 | 0, $3 | 0) | 0;
  }
  label$4 : {
   if (!((a_swap($2 | 0) | 0) & 1073741824 | 0)) {
    break label$4
   }
   __wake($2 | 0);
  }
  return $3 | 0;
 }
 
 function a_cas($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = $1 ? $1 : 1073741823;
  return $1 | 0;
 }
 
 function a_swap($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[$0 >> 2] = 0;
  return $1 | 0;
 }
 
 function __wake($0) {
  $0 = $0 | 0;
  emscripten_futex_wake($0 | 0, 1 | 0) | 0;
 }
 
 function abort_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[(0 + 84176 | 0) >> 2] | 0;
  fwrite(74730 | 0, 11 | 0, 1 | 0, $3 | 0) | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  vfprintf($3 | 0, $0 | 0, $1 | 0) | 0;
  fputc(10 | 0, $3 | 0) | 0;
  abort();
  wasm2js_trap();
 }
 
 function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v15007_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function std__get_new_handler_28_29() {
  return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_5babi_v15007_5d_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29(104560 | 0) | 0 | 0;
 }
 
 function __cxa_allocate_exception($0) {
  $0 = $0 | 0;
  return (dlmalloc($0 + 80 | 0 | 0) | 0) + 80 | 0 | 0;
 }
 
 function __cxa_pure_virtual() {
  abort_message(74700 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
  $0 = $0 | 0;
  return std__type_info___type_info_28_29($0 | 0) | 0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(__cxxabiv1____shim_type_info_____shim_type_info_28_29($0 | 0) | 0 | 0);
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !(strcmp(std__type_info__name_5babi_v15007_5d_28_29_20const($0 | 0) | 0 | 0, std__type_info__name_5babi_v15007_5d_28_29_20const($1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function std__type_info__name_5babi_v15007_5d_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[($0 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = 1;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0) {
    break label$1
   }
   $4 = 0;
   if (!$1) {
    break label$1
   }
   $4 = 0;
   $1 = __dynamic_cast($1 | 0, 84216 | 0, 84264 | 0, 0 | 0) | 0;
   if (!$1) {
    break label$1
   }
   __memset($3 + 12 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3 + 56 | 0) >> 2] = 1;
   HEAP32[($3 + 20 | 0) >> 2] = -1;
   HEAP32[($3 + 16 | 0) >> 2] = $0;
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1, $3 + 8 | 0, HEAP32[$2 >> 2] | 0, 1);
   label$2 : {
    $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    if (($4 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[$2 >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
   }
   $4 = ($4 | 0) == (1 | 0);
  }
  __stack_pointer = $3 + 64 | 0;
  return $4 | 0;
 }
 
 function __dynamic_cast($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6 = 0, $5 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $4 = __stack_pointer - 64 | 0;
  __stack_pointer = $4;
  $5 = HEAP32[$0 >> 2] | 0;
  $6 = HEAP32[($5 + -4 | 0) >> 2] | 0;
  $5 = HEAP32[($5 + -8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $4 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4 + 55 | 0;
  i64toi32_i32$0 = 0;
  $9 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $9;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  HEAP32[($4 + 24 | 0) >> 2] = 0;
  HEAP32[($4 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4 + 20 | 0) >> 2] = $3;
  HEAP32[($4 + 16 | 0) >> 2] = $1;
  HEAP32[($4 + 12 | 0) >> 2] = $0;
  HEAP32[($4 + 8 | 0) >> 2] = $2;
  $0 = $0 + $5 | 0;
  $3 = 0;
  label$1 : {
   label$2 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($6 | 0, $2 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($6, $4 + 8 | 0, $0, $0, 1, 0);
    $3 = (HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$6 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($6, $4 + 8 | 0, $0, 1, 0);
   label$3 : {
    switch (HEAP32[($4 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($4 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($4 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($4 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($4 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($4 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($4 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $3 = HEAP32[($4 + 24 | 0) >> 2] | 0;
  }
  __stack_pointer = $4 + 64 | 0;
  return $3 | 0;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  label$1 : {
   $4 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   if ($4) {
    break label$1
   }
   HEAP32[($1 + 36 | 0) >> 2] = 1;
   HEAP32[($1 + 24 | 0) >> 2] = $3;
   HEAP32[($1 + 16 | 0) >> 2] = $2;
   return;
  }
  label$2 : {
   label$3 : {
    if (($4 | 0) != ($2 | 0)) {
     break label$3
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($1 + 24 | 0) >> 2] = $3;
    return;
   }
   HEAP8[($1 + 54 | 0) >> 0] = 1;
   HEAP32[($1 + 24 | 0) >> 2] = 2;
   HEAP32[($1 + 36 | 0) >> 2] = (HEAP32[($1 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  HEAP8[($1 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) != ($3 | 0)) {
    break label$1
   }
   HEAP8[($1 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if ($3) {
      break label$3
     }
     HEAP32[($1 + 36 | 0) >> 2] = 1;
     HEAP32[($1 + 24 | 0) >> 2] = $4;
     HEAP32[($1 + 16 | 0) >> 2] = $2;
     if (($4 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($3 | 0) != ($2 | 0)) {
      break label$4
     }
     label$5 : {
      $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
      if (($3 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($1 + 24 | 0) >> 2] = $4;
      $3 = $4;
     }
     if ((HEAP32[($1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($3 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($1 + 36 | 0) >> 2] = (HEAP32[($1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if ((HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
    break label$1
   }
   if ((HEAP32[($1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($1 + 28 | 0) >> 2] = $3;
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
       break label$5
      }
      if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$4
      }
     }
     if (($3 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1 + 32 | 0) >> 2] = $3;
    label$6 : {
     if ((HEAP32[($1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1 + 52 | 0) >> 1] = 0;
     $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $2, 1, $4);
     label$7 : {
      if (!(HEAPU8[($1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1 + 20 | 0) >> 2] = $2;
    HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
      break label$4
     }
     if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
      break label$3
     }
    }
    if (($3 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1 + 20 | 0) >> 2] = $2;
   HEAP32[($1 + 32 | 0) >> 2] = $3;
   HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
  }
 }
 
 function __cxa_is_pointer_type($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return (__dynamic_cast($0 | 0, 84216 | 0, 84360 | 0, 0 | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function std__exception___exception_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function std__exception___exception_28_29_1($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 68581 | 0;
 }
 
 function std__bad_alloc__bad_alloc_28_29($0) {
  $0 = $0 | 0;
  $0 = std__exception__exception_5babi_v15007_5d_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 84764 + 8 | 0;
  return $0 | 0;
 }
 
 function std__bad_alloc___bad_alloc_28_29($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__bad_alloc__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 71547 | 0;
 }
 
 function std__bad_array_new_length__bad_array_new_length_28_29($0) {
  $0 = $0 | 0;
  $0 = std__bad_alloc__bad_alloc_28_29($0 | 0) | 0;
  HEAP32[$0 >> 2] = 84784 + 8 | 0;
  return $0 | 0;
 }
 
 function std__bad_array_new_length___bad_array_new_length_28_29($0) {
  $0 = $0 | 0;
  std__exception___exception_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__bad_array_new_length__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 69352 | 0;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 >> 2] = 84916 + 8 | 0;
  std____2____libcpp_refstring_____libcpp_refstring_28_29($0 + 4 | 0 | 0) | 0;
  return std__exception___exception_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2____libcpp_refstring_____libcpp_refstring_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!(std____2____libcpp_refstring____uses_refcount_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   $1 = std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29(HEAP32[$0 >> 2] | 0 | 0) | 0;
   if ((int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_5babi_v15007_5d_int_2c_20int__28int__2c_20int_2c_20int_29($1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   operator_20delete_28void__29($1 | 0);
  }
  return $0 | 0;
 }
 
 function std____2____refstring_imp___28anonymous_20namespace_29__rep_from_data_28char_20const__29($0) {
  $0 = $0 | 0;
  return $0 + -12 | 0 | 0;
 }
 
 function int_20std____2___28anonymous_20namespace_29____libcpp_atomic_add_5babi_v15007_5d_int_2c_20int__28int__2c_20int_2c_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (HEAP32[$0 >> 2] | 0) + -1 | 0;
  HEAP32[$0 >> 2] = $1;
  return $1 | 0;
 }
 
 function std__logic_error___logic_error_28_29_1($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__logic_error__what_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2____libcpp_refstring__c_str_28_29_20const($0 + 4 | 0 | 0) | 0 | 0;
 }
 
 function std____2____libcpp_refstring__c_str_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function std__length_error___length_error_28_29($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0 | 0) | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std__type_info___type_info_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 65536;
  __stack_end = (0 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function setTempRet0($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function getTempRet0() {
  return tempRet0 | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function emscripten_stack_get_current() {
  return __stack_pointer | 0;
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$_embind_register_bigint($0, $1, $2, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $12 = 0, $14 = 0;
  $5 = $0;
  $6 = $1;
  $7 = $2;
  i64toi32_i32$0 = $3$hi;
  $9 = $3;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12 = $18;
  i64toi32_i32$1 = $4$hi;
  $14 = $4;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$_embind_register_bigint($5 | 0, $6 | 0, $7 | 0, $9 | 0, $12 | 0, $14 | 0, $19 | 0);
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$1 = var$1$hi;
              i64toi32_i32$0 = var$1;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140 = $45;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, std__logic_error___logic_error_28_29, std__exception___exception_28_29, $28anonymous_20namespace_29__UpdatePaintFrame_28_29, MainScreen___MainScreen_28_29, MainScreen___MainScreen_28_29_1, MainScreen__Update_28_29, MainScreen__Paint_28_29, MainScreen__Finish_28_29, MainScreen__GetEnum_28_29, __cxa_pure_virtual, __cxx_global_array_dtor, EmscriptenFullscreenChangeCallback, EmscriptenMouseCallback, EmscriptenTouchCallback, EmscriptenGamepadCallback, ErrorCallback, WindowSizeCallback, WindowIconifyCallback, WindowFocusCallback, WindowDropCallback, KeyCallback, CharCallback, MouseButtonCallback, MouseCursorPosCallback, MouseScrollCallback, CursorEnterCallback, glfwGetProcAddress, embind_init_builtin_28_29, emscripten_glGenQueriesEXT, emscripten_glDeleteQueriesEXT, emscripten_glIsQueryEXT, emscripten_glBeginQueryEXT, emscripten_glEndQueryEXT, emscripten_glQueryCounterEXT, emscripten_glGetQueryivEXT, emscripten_glGetQueryObjectivEXT, emscripten_glGetQueryObjectuivEXT, emscripten_glGetQueryObjecti64vEXT, emscripten_glGetQueryObjectui64vEXT, emscripten_glBindVertexArrayOES, emscripten_glDeleteVertexArraysOES, emscripten_glGenVertexArraysOES, emscripten_glIsVertexArrayOES, emscripten_glDrawBuffersWEBGL, emscripten_glDrawArraysInstancedANGLE, emscripten_glDrawElementsInstancedANGLE, emscripten_glVertexAttribDivisorANGLE, emscripten_glActiveTexture, emscripten_glAttachShader, emscripten_glBindAttribLocation, emscripten_glBindBuffer, emscripten_glBindFramebuffer, emscripten_glBindRenderbuffer, emscripten_glBindTexture, emscripten_glBlendColor, emscripten_glBlendEquation, emscripten_glBlendEquationSeparate, emscripten_glBlendFunc, emscripten_glBlendFuncSeparate, emscripten_glBufferData, emscripten_glBufferSubData, emscripten_glCheckFramebufferStatus, emscripten_glClear, emscripten_glClearColor, emscripten_glClearDepthf, emscripten_glClearStencil, emscripten_glColorMask, emscripten_glCompileShader, emscripten_glCompressedTexImage2D, emscripten_glCompressedTexSubImage2D, emscripten_glCopyTexImage2D, emscripten_glCopyTexSubImage2D, emscripten_glCreateProgram, emscripten_glCreateShader, emscripten_glCullFace, emscripten_glDeleteBuffers, emscripten_glDeleteFramebuffers, emscripten_glDeleteProgram, emscripten_glDeleteRenderbuffers, emscripten_glDeleteShader, emscripten_glDeleteTextures, emscripten_glDepthFunc, emscripten_glDepthMask, emscripten_glDepthRangef, emscripten_glDetachShader, emscripten_glDisable, emscripten_glDisableVertexAttribArray, emscripten_glDrawArrays, emscripten_glDrawElements, emscripten_glEnable, emscripten_glEnableVertexAttribArray, emscripten_glFinish, emscripten_glFlush, emscripten_glFramebufferRenderbuffer, emscripten_glFramebufferTexture2D, emscripten_glFrontFace, emscripten_glGenBuffers, emscripten_glGenerateMipmap, emscripten_glGenFramebuffers, emscripten_glGenRenderbuffers, emscripten_glGenTextures, emscripten_glGetActiveAttrib, emscripten_glGetActiveUniform, emscripten_glGetAttachedShaders, emscripten_glGetAttribLocation, emscripten_glGetBooleanv, emscripten_glGetBufferParameteriv, emscripten_glGetError, emscripten_glGetFloatv, emscripten_glGetFramebufferAttachmentParameteriv, emscripten_glGetIntegerv, emscripten_glGetProgramiv, emscripten_glGetProgramInfoLog, emscripten_glGetRenderbufferParameteriv, emscripten_glGetShaderiv, emscripten_glGetShaderInfoLog, emscripten_glGetShaderPrecisionFormat, emscripten_glGetShaderSource, emscripten_glGetString, emscripten_glGetTexParameterfv, emscripten_glGetTexParameteriv, emscripten_glGetUniformfv, emscripten_glGetUniformiv, emscripten_glGetUniformLocation, emscripten_glGetVertexAttribfv, emscripten_glGetVertexAttribiv, emscripten_glGetVertexAttribPointerv, emscripten_glHint, emscripten_glIsBuffer, emscripten_glIsEnabled, emscripten_glIsFramebuffer, emscripten_glIsProgram, emscripten_glIsRenderbuffer, emscripten_glIsShader, emscripten_glIsTexture, emscripten_glLineWidth, emscripten_glLinkProgram, emscripten_glPixelStorei, emscripten_glPolygonOffset, emscripten_glReadPixels, emscripten_glReleaseShaderCompiler, emscripten_glRenderbufferStorage, emscripten_glSampleCoverage, emscripten_glScissor, emscripten_glShaderBinary, emscripten_glShaderSource, emscripten_glStencilFunc, emscripten_glStencilFuncSeparate, emscripten_glStencilMask, emscripten_glStencilMaskSeparate, emscripten_glStencilOp, emscripten_glStencilOpSeparate, emscripten_glTexImage2D, emscripten_glTexParameterf, emscripten_glTexParameterfv, emscripten_glTexParameteri, emscripten_glTexParameteriv, emscripten_glTexSubImage2D, emscripten_glUniform1f, emscripten_glUniform1fv, emscripten_glUniform1i, emscripten_glUniform1iv, emscripten_glUniform2f, emscripten_glUniform2fv, emscripten_glUniform2i, emscripten_glUniform2iv, emscripten_glUniform3f, emscripten_glUniform3fv, emscripten_glUniform3i, emscripten_glUniform3iv, emscripten_glUniform4f, emscripten_glUniform4fv, emscripten_glUniform4i, emscripten_glUniform4iv, emscripten_glUniformMatrix2fv, emscripten_glUniformMatrix3fv, emscripten_glUniformMatrix4fv, emscripten_glUseProgram, emscripten_glValidateProgram, emscripten_glVertexAttrib1f, emscripten_glVertexAttrib1fv, emscripten_glVertexAttrib2f, emscripten_glVertexAttrib2fv, emscripten_glVertexAttrib3f, emscripten_glVertexAttrib3fv, emscripten_glVertexAttrib4f, emscripten_glVertexAttrib4fv, emscripten_glVertexAttribPointer, emscripten_glViewport, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, std__bad_alloc___bad_alloc_28_29, std__bad_alloc__what_28_29_20const, std__bad_array_new_length___bad_array_new_length_28_29, std__bad_array_new_length__what_28_29_20const, std__exception___exception_28_29_1, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_1, std__logic_error__what_28_29_20const, std__length_error___length_error_28_29]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "main": main, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__em_js__GetCanvasWidth": {
   get value() {
    return global$4;
   }, 
   set value(_global$4) {
    global$4 = _global$4;
   }
  }, 
  "__em_js__GetCanvasHeight": {
   get value() {
    return global$5;
   }, 
   set value(_global$5) {
    global$5 = _global$5;
   }
  }, 
  "fflush": fflush, 
  "__getTypeName": __getTypeName, 
  "_embind_initialize_bindings": _embind_initialize_bindings, 
  "__errno_location": __errno_location, 
  "setTempRet0": setTempRet0, 
  "getTempRet0": getTempRet0, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "emscripten_stack_get_current": emscripten_stack_get_current, 
  "__cxa_is_pointer_type": __cxa_is_pointer_type, 
  "__start_em_js": {
   get value() {
    return global$6;
   }, 
   set value(_global$6) {
    global$6 = _global$6;
   }
  }, 
  "__stop_em_js": {
   get value() {
    return global$7;
   }, 
   set value(_global$7) {
    global$7 = _global$7;
   }
  }, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;legacyModuleProp('INITIAL_MEMORY', 'INITIAL_MEMORY');

assert(INITIAL_MEMORY >= 65536, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + 65536 + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

updateMemoryViews();

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = wasmMemory.buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with the (separate) address-zero check
  // below.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten at ' + ptrToString(max) + ', expected hex dwords 0x89BACDFE and 0x2135467, but received ' + ptrToString(cookie2) + ' ' + ptrToString(cookie1));
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[0] !== 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js
// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  
  callRuntimeCallbacks(__ATMAIN__);
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
/** @param {boolean=} fixedasm */
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// `abortWrapperDepth` counts the recursion level of the wrapper function so
// that we only handle exceptions at the top level letting the exception
// mechanics work uninterrupted at the inner level.  Additionally,
// `abortWrapperDepth` is also manually incremented in callMain so that we know
// to ignore exceptions from there since they're handled by callMain directly.
var abortWrapperDepth = 0;

// Creates a wrapper in a closure so that each wrapper gets it's own copy of 'original'
function makeAbortWrapper(original) {
  return function() {
    // Don't allow this function to be called if we're aborted!
    if (ABORT) {
      throw "program has already aborted!";
    }

    abortWrapperDepth += 1;
    try {
      return original.apply(null, arguments);
    } catch (e) {
      if (
        ABORT // rethrow exception if abort() was called in the original function call above
        || abortWrapperDepth > 1 // rethrow exceptions not caught at the top level if exception catching is enabled; rethrow from exceptions from within callMain
        || e === Infinity // EXCEPTION_STACK_TRACES=0 will throw Infinity
        || e === 'unwind'
      ) {
        throw e;
      }

      abort("unhandled exception: " + [e, e.stack]);
    }
    finally {
      abortWrapperDepth -= 1;
    }
  }
}

// Instrument all the exported functions to:
// - abort if an unhandled exception occurs
// - throw an exception if someone tries to call them after the program has aborted
// See settings.ABORT_ON_WASM_EXCEPTIONS for more info.
function instrumentWasmExportsWithAbort(exports) {
  // Override the exported functions with the wrappers and copy over any other symbols
  var instExports = {};
  for (var name in exports) {
      var original = exports[name];
      if (typeof original == 'function') {
        instExports[name] = makeAbortWrapper(original);
      } else {
        instExports[name] = original;
      }
  }

  return instExports;
}

function instrumentWasmTableWithAbort() {
  // Override the wasmTable get function to return the wrappers
  var realGet = wasmTable.get;
  var wrapperCache = {};
  wasmTable.get = (i) => {
    var func = realGet.call(wasmTable, i);
    var cached = wrapperCache[i];
    if (!cached || cached.func !== func) {
      cached = wrapperCache[i] = {
        func: func,
        wrapper: makeAbortWrapper(func)
      }
    }
    return cached.wrapper;
  };
}

var wasmBinaryFile;
  wasmBinaryFile = 'gui-test.wasm';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, try to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
      && !isFileURI(binaryFile)
    ) {
      return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + binaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(() => getBinary(binaryFile));
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise((resolve, reject) => {
          readAsync(binaryFile, (response) => resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))), reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(() => getBinary(binaryFile));
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
  return getBinaryPromise(binaryFile).then((binary) => {
    return WebAssembly.instantiate(binary, imports);
  }).then((instance) => {
    return instance;
  }).then(receiver, (reason) => {
    err('failed to asynchronously prepare wasm: ' + reason);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err('warning: Loading from a file URI (' + wasmBinaryFile + ') is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing');
    }
    abort(reason);
  });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile) &&
      // Don't use streaming for file:// delivered objects in a webview, fetch them synchronously.
      !isFileURI(binaryFile) &&
      // Avoid instantiateStreaming() on Node.js environment for now, as while
      // Node.js v18.1.0 implements it, it does not have a full fetch()
      // implementation yet.
      //
      // Reference:
      //   https://github.com/emscripten-core/emscripten/pull/16917
      !ENVIRONMENT_IS_NODE &&
      typeof fetch == 'function') {
    return fetch(binaryFile, { credentials: 'same-origin' }).then((response) => {
      // Suppress closure warning here since the upstream definition for
      // instantiateStreaming only allows Promise<Repsponse> rather than
      // an actual Response.
      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
      /** @suppress {checkTypes} */
      var result = WebAssembly.instantiateStreaming(response, imports);

      return result.then(
        callback,
        function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err('wasm streaming compile failed: ' + reason);
          err('falling back to ArrayBuffer instantiation');
          return instantiateArrayBuffer(binaryFile, imports, callback);
        });
    });
  } else {
    return instantiateArrayBuffer(binaryFile, imports, callback);
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    exports = instrumentWasmExportsWithAbort(exports);

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    instrumentWasmTableWithAbort();

    removeRunDependency('wasm-instantiate');

    return exports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {

    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        return false;
    }
  }

  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
function legacyModuleProp(prop, newName) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get: function() {
        abort('Module.' + prop + ' has been replaced with plain ' + newName + ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)');
      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort('`Module.' + prop + '` was supplied but `' + prop + '` not included in INCOMING_MODULE_JS_API');
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

function missingGlobal(sym, msg) {
  if (typeof globalThis !== 'undefined') {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        warnOnce('`' + sym + '` is not longer defined by emscripten. ' + msg);
        return undefined;
      }
    });
  }
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');

function missingLibrarySymbol(sym) {
  if (typeof globalThis !== 'undefined' && !Object.getOwnPropertyDescriptor(globalThis, sym)) {
    Object.defineProperty(globalThis, sym, {
      configurable: true,
      get: function() {
        // Can't `abort()` here because it would break code that does runtime
        // checks.  e.g. `if (typeof SDL === 'undefined')`.
        var msg = '`' + sym + '` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line';
        // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
        // library.js, which means $name for a JS name with no prefix, or name
        // for a JS name like _name.
        var librarySymbol = sym;
        if (!librarySymbol.startsWith('_')) {
          librarySymbol = '$' + sym;
        }
        msg += " (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE=" + librarySymbol + ")";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        warnOnce(msg);
        return undefined;
      }
    });
  }
  // Any symbol that is not included from the JS libary is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get: function() {
        var msg = "'" + sym + "' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)";
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(text) {
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as errors.
  console.error.apply(console, arguments);
}

// end include: runtime_debug.js
// === Body ===

function GetCanvasWidth() { return canvas.clientWidth; }
function GetCanvasHeight() { return canvas.clientHeight; }



// end include: preamble.js

  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort('invalid type for getValue: ' + type);
    }
  }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  function ptrToString(ptr) {
      assert(typeof ptr === 'number');
      return '0x' + ptr.toString(16).padStart(8, '0');
    }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  }

  function warnOnce(text) {
      if (!warnOnce.shown) warnOnce.shown = {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    }

  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    }
  
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  function UTF8ToString(ptr, maxBytesToRead) {
      assert(typeof ptr == 'number');
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    }
  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  /** @constructor */
  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 24;
  
      this.set_type = function(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      }
  
      this.set_adjusted_ptr = function(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      };
  
      this.get_adjusted_ptr = function() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      };
  
      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
      // when the pointer is casted to some of the exception object base classes (e.g. when virtual
      // inheritance is used). When a pointer is thrown this method should return the thrown pointer
      // itself.
      this.get_exception_ptr = function() {
        // Work around a fastcomp bug, this code is still included for some reason in a build without
        // exceptions support.
        var isPointer = ___cxa_is_pointer_type(this.get_type());
        if (isPointer) {
          return HEAPU32[((this.excPtr)>>2)];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.excPtr;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      assert(false, 'Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.');
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH = {isAbs:(path) => path.charAt(0) === '/',splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:(path) => {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },join:function() {
        var paths = Array.prototype.slice.call(arguments);
        return PATH.normalize(paths.join('/'));
      },join2:(l, r) => {
        return PATH.normalize(l + '/' + r);
      }};
  
  function initRandomFill() {
      if (typeof crypto == 'object' && typeof crypto['getRandomValues'] == 'function') {
        // for modern web browsers
        return (view) => crypto.getRandomValues(view);
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          var randomFillSync = crypto_module['randomFillSync'];
          if (randomFillSync) {
            // nodejs with LTS crypto support
            return (view) => crypto_module['randomFillSync'](view);
          }
          // very old nodejs with the original crypto API
          var randomBytes = crypto_module['randomBytes'];
          return (view) => (
            view.set(randomBytes(view.byteLength)),
            // Return the original view to match modern native implementations.
            view
          );
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
    }
  function randomFill(view) {
      // Lazily init on the first invocation.
      return (randomFill = initRandomFill())(view);
    }
  
  
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:(from, to) => {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function lengthBytesUTF8(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    }
  
  function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
      assert(typeof str === 'string');
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    }
  /** @type {function(string, boolean=, number=)} */
  function intArrayFromString(stringy, dontAddNull, length) {
    var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
    var u8array = new Array(len);
    var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
    if (dontAddNull) u8array.length = numBytesWritten;
    return u8array;
  }
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },fsync:function(stream) {
          stream.tty.ops.fsync(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, -1);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },fsync:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  
  function zeroMemory(address, size) {
      HEAPU8.fill(0, address, address + size);
      return address;
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  /** @param {boolean=} noRunDep */
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, (arrayBuffer) => {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, (event) => {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  
  
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  
  function demangle(func) {
      warnOnce('warning: build with -sDEMANGLE_SUPPORT to link in libcxxabi demangling');
      return func;
    }
  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path, opts = {}) => {
        path = PATH_FS.resolve(path);
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        opts = Object.assign(defaults, opts)
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the absolute path
        var parts = path.split('/').filter((p) => !!p);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count + 1 });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:(node) => {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:(parentid, name) => {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:(node) => {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:(parent, name) => {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:(parent, name, mode, rdev) => {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:(node) => {
        FS.hashRemoveNode(node);
      },isRoot:(node) => {
        return node === node.parent;
      },isMountpoint:(node) => {
        return !!node.mounted;
      },isFile:(mode) => {
        return (mode & 61440) === 32768;
      },isDir:(mode) => {
        return (mode & 61440) === 16384;
      },isLink:(mode) => {
        return (mode & 61440) === 40960;
      },isChrdev:(mode) => {
        return (mode & 61440) === 8192;
      },isBlkdev:(mode) => {
        return (mode & 61440) === 24576;
      },isFIFO:(mode) => {
        return (mode & 61440) === 4096;
      },isSocket:(mode) => {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:(str) => {
        var flags = FS.flagModes[str];
        if (typeof flags == 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:(flag) => {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:(node, perms) => {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:(dir) => {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:(dir, name) => {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:(dir, name, isdir) => {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:(node, flags) => {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:(fd_start = 0, fd_end = FS.MAX_OPEN_FDS) => {
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:(fd) => FS.streams[fd],createStream:(stream, fd_start, fd_end) => {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function() {
            this.shared = { };
          };
          FS.FSStream.prototype = {};
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              /** @this {FS.FSStream} */
              get: function() { return this.node; },
              /** @this {FS.FSStream} */
              set: function(val) { this.node = val; }
            },
            isRead: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              /** @this {FS.FSStream} */
              get: function() { return (this.flags & 1024); }
            },
            flags: {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.flags; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.flags = val; },
            },
            position : {
              /** @this {FS.FSStream} */
              get: function() { return this.shared.position; },
              /** @this {FS.FSStream} */
              set: function(val) { this.shared.position = val; },
            },
          });
        }
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:(fd) => {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:(stream) => {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:() => {
          throw new FS.ErrnoError(70);
        }},major:(dev) => ((dev) >> 8),minor:(dev) => ((dev) & 0xff),makedev:(ma, mi) => ((ma) << 8 | (mi)),registerDevice:(dev, ops) => {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:(dev) => FS.devices[dev],getMounts:(mount) => {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:(populate, callback) => {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:(type, opts, mountpoint) => {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:(mountpoint) => {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:(parent, name) => {
        return parent.node_ops.lookup(parent, name);
      },mknod:(path, mode, dev) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:(path, mode) => {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:(path, mode) => {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:(path, mode) => {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:(path, mode, dev) => {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:(oldpath, newpath) => {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:(old_path, new_path) => {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:(path) => {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:(path) => {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:(path, dontFollow) => {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:(path) => {
        return FS.stat(path, true);
      },chmod:(path, mode, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:(path, mode) => {
        FS.chmod(path, mode, true);
      },fchmod:(fd, mode) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:(path, uid, gid, dontFollow) => {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:(path, uid, gid) => {
        FS.chown(path, uid, gid, true);
      },fchown:(fd, uid, gid) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:(path, len) => {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:(fd, len) => {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:(path, atime, mtime) => {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:(path, flags, mode) => {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode == 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path == 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:(stream) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:(stream) => {
        return stream.fd === null;
      },llseek:(stream, offset, whence) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:(stream, buffer, offset, length, position) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:(stream, buffer, offset, length, position, canOwn) => {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:(stream, offset, length) => {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:(stream, length, position, prot, flags) => {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },msync:(stream, buffer, offset, length, mmapFlags) => {
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:(stream) => 0,ioctl:(stream, cmd, arg) => {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:(path, opts = {}) => {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:(path, data, opts = {}) => {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:() => FS.currentPath,chdir:(path) => {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:() => {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:() => {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomLeft = randomFill(randomBuffer).byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:() => {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: () => {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: (parent, name) => {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:() => {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:() => {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          // We set the `name` property to be able to identify `FS.ErrnoError`
          // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
          // - when using PROXYFS, an error can come from an underlying FS
          // as different FS objects have their own FS.ErrnoError each,
          // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
          // we'll use the reliable test `err.name == "ErrnoError"` instead
          this.name = 'ErrnoError';
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach((code) => {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:() => {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:(input, output, error) => {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:() => {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:(canRead, canWrite) => {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:(path, dontResolveLastLink) => {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },analyzePath:(path, dontResolveLastLink) => {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:(parent, path, canRead, canWrite) => {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:(parent, name, properties, canRead, canWrite) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:(parent, name, data, canRead, canWrite, canOwn) => {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:(parent, name, input, output) => {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: (stream) => {
            stream.seekable = false;
          },
          close: (stream) => {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: (stream, buffer, offset, length, pos /* ignored */) => {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: (stream, buffer, offset, length, pos) => {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:(obj) => {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:(parent, name, url, canRead, canWrite) => {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (from, to) => {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            }
            return intArrayFromString(xhr.responseText || '', true);
          };
          var lazyArray = this;
          lazyArray.setDataGetter((chunkNum) => {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr: ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          if (Browser.handledByPreloadPlugin(byteArray, fullname, finish, () => {
            if (onerror) onerror();
            removeRunDependency(dep);
          })) {
            return;
          }
          finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, (byteArray) => processData(byteArray), onerror);
        } else {
          processData(url);
        }
      },absolutePath:() => {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:() => {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:() => {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:() => {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:() => {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:() => {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  
  var SYSCALLS = {DEFAULT_POLLMASK:5,calculateAt:function(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAPU32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble=Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (atime % 1000) * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble=Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (mtime % 1000) * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble=Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(96))>>2)] = (ctime % 1000) * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(104))>>2)] = tempI64[0],HEAP32[(((buf)+(108))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      }};
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.createStream(stream, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 5:
        /* case 5: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 6:
        case 7:
        /* case 6: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 7: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fcntl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
    }
  
  function ___syscall_getcwd(buf, size) {
  try {
  
      if (size === 0) return -28;
      var cwd = FS.cwd();
      var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;
      if (size < cwdLengthInBytes) return -68;
      stringToUTF8(cwd, buf, size);
      return cwdLengthInBytes;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: return -28; // not supported
      }
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  try {
  
      path = SYSCALLS.getStr(path);
      path = SYSCALLS.calculateAt(dirfd, path);
      var mode = varargs ? SYSCALLS.get() : 0;
      return FS.open(path, flags, mode).fd;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return -e.errno;
  }
  }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies = {};
  
  var registeredTypes = {};
  
  var typeDependencies = {};
  
  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return '_' + name;
      }
      return name;
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      // Use an abject with a computed property name to create a new function with
      // a name specified at runtime, but without using `new Function` or `eval`.
      return {
        [name]: function() {
          return body.apply(this, arguments);
        }
      }[name];
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return this.name + ': ' + this.message;
        }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  /** @constructor */
  function HandleAllocator() {
      // Reserve slot 0 so that 0 is always an invalid handle
      this.allocated = [undefined];
      this.freelist = [];
      this.get = function(id) {
        assert(this.allocated[id] !== undefined, 'invalid handle: ' + id);
        return this.allocated[id];
      };
      this.allocate = function(handle) {
        let id = this.freelist.pop() || this.allocated.length;
        this.allocated[id] = handle;
        return id;
      };
      this.free = function(id) {
        assert(this.allocated[id] !== undefined);
        // Set the slot to `undefined` rather than using `delete` here since
        // apparently arrays with holes in them can be less efficient.
        this.allocated[id] = undefined;
        this.freelist.push(id);
      };
    }
  var emval_handles = new HandleAllocator();;
  function __emval_decref(handle) {
      if (handle >= emval_handles.reserved && 0 === --emval_handles.get(handle).refcount) {
        emval_handles.free(handle);
      }
    }
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = emval_handles.reserved; i < emval_handles.allocated.length; ++i) {
        if (emval_handles.allocated[i] !== undefined) {
          ++count;
        }
      }
      return count;
    }
  
  function init_emval() {
      // reserve some special values. These never get de-allocated.
      // The HandleAllocator takes care of reserving zero.
      emval_handles.allocated.push(
        {value: undefined},
        {value: null},
        {value: true},
        {value: false},
      );
      emval_handles.reserved = emval_handles.allocated.length
      Module['count_emval_handles'] = count_emval_handles;
    }
  var Emval = {toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        return emval_handles.get(handle).value;
      },toHandle:(value) => {
        switch (value) {
          case undefined: return 1;
          case null: return 2;
          case true: return 3;
          case false: return 4;
          default:{
            return emval_handles.allocate({refcount: 1, value: value});
          }
        }
      }};
  
  
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAP32[((pointer)>>2)]);
    }
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        'toWireType': function(destructors, value) {
          return Emval.toHandle(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor
  
        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      });
    }

  function embindRepr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  
  
  
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
           return value;
        },
        'toWireType': function(destructors, value) {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError('Cannot convert "' + embindRepr(value) + '" to ' + this.name);
          }
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  
  
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
        if (typeof value != "number" && typeof value != "boolean") {
          throw new TypeError('Cannot convert "' + embindRepr(value) + '" to ' + toTypeName);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError('Passing a number "' + embindRepr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
        }
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name: name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(heap.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': decodeMemoryView,
        'argPackAdvance': 8,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    }

  
  
  
  
  
  
  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes 4-byte alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  function UTF16ToString(ptr, maxBytesToRead) {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    }
  
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF16(str) {
      return str.length*2;
    }
  
  function UTF32ToString(ptr, maxBytesToRead) {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }
  
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    }
  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = () => HEAPU16;
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = () => HEAPU32;
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || HEAP[currentBytePtr >> shift] == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (!(typeof value == 'string')) {
            throwBindingError('Cannot pass non-string to C++ string type ' + name);
          }
  
          // assumes 4-byte alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[ptr >> 2] = length >> shift;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  var nowIsMonotonic = true;;
  function __emscripten_get_now_is_monotonic() {
      return nowIsMonotonic;
    }

  function _abort() {
      abort('native code called abort()');
    }

  function _emscripten_date_now() {
      return Date.now();
    }

  function withStackSave(f) {
      var stack = stackSave();
      var ret = f();
      stackRestore(stack);
      return ret;
    }
  var JSEvents = {inEventHandler:0,removeAllEventListeners:function() {
        for (var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for (var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for (var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for (var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(null, call.argsList);
        }
      },eventHandlers:[],removeAllHandlersOnTarget:function(target, eventTypeString) {
        for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for (var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled
        // Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitFullscreenEnabled.
        // TODO: If Safari at some point ships with unprefixed version, update the version check above.
        || document.webkitFullscreenEnabled
         ;
      }};
  
  function maybeCStringToJsString(cString) {
      // "cString > 2" checks if the input is a number, and isn't of the special
      // values we accept here, EMSCRIPTEN_EVENT_TARGET_* (which map to 0, 1, 2).
      // In other words, if cString > 2 then it's a pointer to a valid place in
      // memory, and points to a C string.
      return cString > 2 ? UTF8ToString(cString) : cString;
    }
  
  var specialHTMLTargets = [0, typeof document != 'undefined' ? document : 0, typeof window != 'undefined' ? window : 0];
  function findEventTarget(target) {
      target = maybeCStringToJsString(target);
      var domElement = specialHTMLTargets[target] || (typeof document != 'undefined' ? document.querySelector(target) : undefined);
      return domElement;
    }
  
  function getBoundingClientRect(e) {
      return specialHTMLTargets.indexOf(e) < 0 ? e.getBoundingClientRect() : {'left':0,'top':0};
    }
  function _emscripten_get_element_css_size(target, width, height) {
      target = findEventTarget(target);
      if (!target) return -4;
  
      var rect = getBoundingClientRect(target);
      HEAPF64[((width)>>3)] = rect.width;
      HEAPF64[((height)>>3)] = rect.height;
  
      return 0;
    }

  
  function fillGamepadEventData(eventStruct, e) {
      HEAPF64[((eventStruct)>>3)] = e.timestamp;
      for (var i = 0; i < e.axes.length; ++i) {
        HEAPF64[(((eventStruct+i*8)+(16))>>3)] = e.axes[i];
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i].value;
        } else {
          HEAPF64[(((eventStruct+i*8)+(528))>>3)] = e.buttons[i];
        }
      }
      for (var i = 0; i < e.buttons.length; ++i) {
        if (typeof e.buttons[i] == 'object') {
          HEAP32[(((eventStruct+i*4)+(1040))>>2)] = e.buttons[i].pressed;
        } else {
          // Assigning a boolean to HEAP32, that's ok, but Closure would like to warn about it:
          /** @suppress {checkTypes} */
          HEAP32[(((eventStruct+i*4)+(1040))>>2)] = e.buttons[i] == 1;
        }
      }
      HEAP32[(((eventStruct)+(1296))>>2)] = e.connected;
      HEAP32[(((eventStruct)+(1300))>>2)] = e.index;
      HEAP32[(((eventStruct)+(8))>>2)] = e.axes.length;
      HEAP32[(((eventStruct)+(12))>>2)] = e.buttons.length;
      stringToUTF8(e.id, eventStruct + 1304, 64);
      stringToUTF8(e.mapping, eventStruct + 1368, 64);
    }
  function _emscripten_get_gamepad_status(index, gamepadState) {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_gamepad_status() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
  
      // INVALID_PARAM is returned on a Gamepad index that never was there.
      if (index < 0 || index >= JSEvents.lastGamepadState.length) return -5;
  
      // NO_DATA is returned on a Gamepad index that was removed.
      // For previously disconnected gamepads there should be an empty slot (null/undefined/false) at the index.
      // This is because gamepads must keep their original position in the array.
      // For example, removing the first of two gamepads produces [null/undefined/false, gamepad].
      if (!JSEvents.lastGamepadState[index]) return -7;
  
      fillGamepadEventData(gamepadState, JSEvents.lastGamepadState[index]);
      return 0;
    }

  var _emscripten_get_now;if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = () => {
      var t = process.hrtime();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else _emscripten_get_now = () => performance.now();
  ;

  function _emscripten_get_num_gamepads() {
      if (!JSEvents.lastGamepadState) throw 'emscripten_get_num_gamepads() can only be called after having first called emscripten_sample_gamepad_data() and that function has returned EMSCRIPTEN_RESULT_SUCCESS!';
      // N.B. Do not call emscripten_get_num_gamepads() unless having first called emscripten_sample_gamepad_data(), and that has returned EMSCRIPTEN_RESULT_SUCCESS.
      // Otherwise the following line will throw an exception.
      return JSEvents.lastGamepadState.length;
    }

  function webgl_enable_ANGLE_instanced_arrays(ctx) {
      // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('ANGLE_instanced_arrays');
      if (ext) {
        ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
        ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
        ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        return 1;
      }
    }
  
  function webgl_enable_OES_vertex_array_object(ctx) {
      // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('OES_vertex_array_object');
      if (ext) {
        ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
        ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
        ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
        ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        return 1;
      }
    }
  
  function webgl_enable_WEBGL_draw_buffers(ctx) {
      // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
      var ext = ctx.getExtension('WEBGL_draw_buffers');
      if (ext) {
        ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        return 1;
      }
    }
  
  function webgl_enable_WEBGL_multi_draw(ctx) {
      // Closure is expected to be allowed to minify the '.multiDrawWebgl' property, so not accessing it quoted.
      return !!(ctx.multiDrawWebgl = ctx.getExtension('WEBGL_multi_draw'));
    }
  
  
  var GL = {counter:1,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],shaders:[],vaos:[],contexts:[],offscreenCanvases:{},queries:[],stringCache:{},unpackAlignment:4,recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(/** @type {HTMLCanvasElement} */ canvas, webGLContextAttributes) {
  
        // BUG: Workaround Safari WebGL issue: After successfully acquiring WebGL context on a canvas,
        // calling .getContext() will always return that context independent of which 'webgl' or 'webgl2'
        // context version was passed. See https://bugs.webkit.org/show_bug.cgi?id=222758 and
        // https://github.com/emscripten-core/emscripten/issues/13295.
        // TODO: Once the bug is fixed and shipped in Safari, adjust the Safari version field in above check.
        if (!canvas.getContextSafariWebGL2Fixed) {
          canvas.getContextSafariWebGL2Fixed = canvas.getContext;
          /** @type {function(this:HTMLCanvasElement, string, (Object|null)=): (Object|null)} */
          function fixedGetContext(ver, attrs) {
            var gl = canvas.getContextSafariWebGL2Fixed(ver, attrs);
            return ((ver == 'webgl') == (gl instanceof WebGLRenderingContext)) ? gl : null;
          }
          canvas.getContext = fixedGetContext;
        }
  
        var ctx =
          (canvas.getContext("webgl", webGLContextAttributes)
            // https://caniuse.com/#feat=webgl
            );
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        // without pthreads a context is just an integer ID
        var handle = GL.getNewId(GL.contexts);
  
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault == 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents == 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        // Extensions that are only available in WebGL 1 (the calls will be no-ops if called on a WebGL 2 context active)
        webgl_enable_ANGLE_instanced_arrays(GLctx);
        webgl_enable_OES_vertex_array_object(GLctx);
        webgl_enable_WEBGL_draw_buffers(GLctx);
  
        {
          GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
        }
  
        webgl_enable_WEBGL_multi_draw(GLctx);
  
        // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        var exts = GLctx.getSupportedExtensions() || [];
        exts.forEach(function(ext) {
          // WEBGL_lose_context, WEBGL_debug_renderer_info and WEBGL_debug_shaders are not enabled by default.
          if (!ext.includes('lose_context') && !ext.includes('debug')) {
            // Call .getExtension() to enable that extension permanently.
            GLctx.getExtension(ext);
          }
        });
      }};
  /** @suppress {duplicate } */
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }
  var _emscripten_glActiveTexture = _glActiveTexture;

  /** @suppress {duplicate } */
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program], GL.shaders[shader]);
    }
  var _emscripten_glAttachShader = _glAttachShader;

  /** @suppress {duplicate } */
  function _glBeginQueryEXT(target, id) {
      GLctx.disjointTimerQueryExt['beginQueryEXT'](target, GL.queries[id]);
    }
  var _emscripten_glBeginQueryEXT = _glBeginQueryEXT;

  
  /** @suppress {duplicate } */
  function _glBindAttribLocation(program, index, name) {
      GLctx.bindAttribLocation(GL.programs[program], index, UTF8ToString(name));
    }
  var _emscripten_glBindAttribLocation = _glBindAttribLocation;

  /** @suppress {duplicate } */
  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }
  var _emscripten_glBindBuffer = _glBindBuffer;

  /** @suppress {duplicate } */
  function _glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }
  var _emscripten_glBindFramebuffer = _glBindFramebuffer;

  /** @suppress {duplicate } */
  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }
  var _emscripten_glBindRenderbuffer = _glBindRenderbuffer;

  /** @suppress {duplicate } */
  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }
  var _emscripten_glBindTexture = _glBindTexture;

  
  /** @suppress {duplicate } */
  function _glBindVertexArray(vao) {
      GLctx.bindVertexArray(GL.vaos[vao]);
    }
  /** @suppress {duplicate } */
  var _glBindVertexArrayOES = _glBindVertexArray;
  var _emscripten_glBindVertexArrayOES = _glBindVertexArrayOES;

  /** @suppress {duplicate } */
  function _glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }
  var _emscripten_glBlendColor = _glBlendColor;

  /** @suppress {duplicate } */
  function _glBlendEquation(x0) { GLctx.blendEquation(x0) }
  var _emscripten_glBlendEquation = _glBlendEquation;

  /** @suppress {duplicate } */
  function _glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }
  var _emscripten_glBlendEquationSeparate = _glBlendEquationSeparate;

  /** @suppress {duplicate } */
  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }
  var _emscripten_glBlendFunc = _glBlendFunc;

  /** @suppress {duplicate } */
  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }
  var _emscripten_glBlendFuncSeparate = _glBlendFuncSeparate;

  /** @suppress {duplicate } */
  function _glBufferData(target, size, data, usage) {
  
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }
  var _emscripten_glBufferData = _glBufferData;

  /** @suppress {duplicate } */
  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }
  var _emscripten_glBufferSubData = _glBufferSubData;

  /** @suppress {duplicate } */
  function _glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }
  var _emscripten_glCheckFramebufferStatus = _glCheckFramebufferStatus;

  /** @suppress {duplicate } */
  function _glClear(x0) { GLctx.clear(x0) }
  var _emscripten_glClear = _glClear;

  /** @suppress {duplicate } */
  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }
  var _emscripten_glClearColor = _glClearColor;

  /** @suppress {duplicate } */
  function _glClearDepthf(x0) { GLctx.clearDepth(x0) }
  var _emscripten_glClearDepthf = _glClearDepthf;

  /** @suppress {duplicate } */
  function _glClearStencil(x0) { GLctx.clearStencil(x0) }
  var _emscripten_glClearStencil = _glClearStencil;

  /** @suppress {duplicate } */
  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }
  var _emscripten_glColorMask = _glColorMask;

  /** @suppress {duplicate } */
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  var _emscripten_glCompileShader = _glCompileShader;

  /** @suppress {duplicate } */
  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx.compressedTexImage2D(target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data), (data+imageSize)) : null);
    }
  var _emscripten_glCompressedTexImage2D = _glCompressedTexImage2D;

  /** @suppress {duplicate } */
  function _glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      GLctx.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, data ? HEAPU8.subarray((data), (data+imageSize)) : null);
    }
  var _emscripten_glCompressedTexSubImage2D = _glCompressedTexSubImage2D;

  /** @suppress {duplicate } */
  function _glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }
  var _emscripten_glCopyTexImage2D = _glCopyTexImage2D;

  /** @suppress {duplicate } */
  function _glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }
  var _emscripten_glCopyTexSubImage2D = _glCopyTexSubImage2D;

  /** @suppress {duplicate } */
  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      // Store additional information needed for each shader program:
      program.name = id;
      // Lazy cache results of glGetProgramiv(GL_ACTIVE_UNIFORM_MAX_LENGTH/GL_ACTIVE_ATTRIBUTE_MAX_LENGTH/GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH)
      program.maxUniformLength = program.maxAttributeLength = program.maxUniformBlockNameLength = 0;
      program.uniformIdCounter = 1;
      GL.programs[id] = program;
      return id;
    }
  var _emscripten_glCreateProgram = _glCreateProgram;

  /** @suppress {duplicate } */
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
  
      return id;
    }
  var _emscripten_glCreateShader = _glCreateShader;

  /** @suppress {duplicate } */
  function _glCullFace(x0) { GLctx.cullFace(x0) }
  var _emscripten_glCullFace = _glCullFace;

  /** @suppress {duplicate } */
  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
      }
    }
  var _emscripten_glDeleteBuffers = _glDeleteBuffers;

  /** @suppress {duplicate } */
  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }
  var _emscripten_glDeleteFramebuffers = _glDeleteFramebuffers;

  /** @suppress {duplicate } */
  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
    }
  var _emscripten_glDeleteProgram = _glDeleteProgram;

  /** @suppress {duplicate } */
  function _glDeleteQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((ids)+(i*4))>>2)];
        var query = GL.queries[id];
        if (!query) continue; // GL spec: "unused names in ids are ignored, as is the name zero."
        GLctx.disjointTimerQueryExt['deleteQueryEXT'](query);
        GL.queries[id] = null;
      }
    }
  var _emscripten_glDeleteQueriesEXT = _glDeleteQueriesEXT;

  /** @suppress {duplicate } */
  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }
  var _emscripten_glDeleteRenderbuffers = _glDeleteRenderbuffers;

  /** @suppress {duplicate } */
  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }
  var _emscripten_glDeleteShader = _glDeleteShader;

  /** @suppress {duplicate } */
  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }
  var _emscripten_glDeleteTextures = _glDeleteTextures;

  
  /** @suppress {duplicate } */
  function _glDeleteVertexArrays(n, vaos) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx.deleteVertexArray(GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }
  /** @suppress {duplicate } */
  var _glDeleteVertexArraysOES = _glDeleteVertexArrays;
  var _emscripten_glDeleteVertexArraysOES = _glDeleteVertexArraysOES;

  /** @suppress {duplicate } */
  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }
  var _emscripten_glDepthFunc = _glDepthFunc;

  /** @suppress {duplicate } */
  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }
  var _emscripten_glDepthMask = _glDepthMask;

  /** @suppress {duplicate } */
  function _glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }
  var _emscripten_glDepthRangef = _glDepthRangef;

  /** @suppress {duplicate } */
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program], GL.shaders[shader]);
    }
  var _emscripten_glDetachShader = _glDetachShader;

  /** @suppress {duplicate } */
  function _glDisable(x0) { GLctx.disable(x0) }
  var _emscripten_glDisable = _glDisable;

  /** @suppress {duplicate } */
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  var _emscripten_glDisableVertexAttribArray = _glDisableVertexAttribArray;

  /** @suppress {duplicate } */
  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }
  var _emscripten_glDrawArrays = _glDrawArrays;

  
  /** @suppress {duplicate } */
  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx.drawArraysInstanced(mode, first, count, primcount);
    }
  /** @suppress {duplicate } */
  var _glDrawArraysInstancedANGLE = _glDrawArraysInstanced;
  var _emscripten_glDrawArraysInstancedANGLE = _glDrawArraysInstancedANGLE;

  
  var tempFixedLengthArray = [];
  
  /** @suppress {duplicate } */
  function _glDrawBuffers(n, bufs) {
  
      var bufArray = tempFixedLengthArray[n];
      for (var i = 0; i < n; i++) {
        bufArray[i] = HEAP32[(((bufs)+(i*4))>>2)];
      }
  
      GLctx.drawBuffers(bufArray);
    }
  /** @suppress {duplicate } */
  var _glDrawBuffersWEBGL = _glDrawBuffers;
  var _emscripten_glDrawBuffersWEBGL = _glDrawBuffersWEBGL;

  /** @suppress {duplicate } */
  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }
  var _emscripten_glDrawElements = _glDrawElements;

  
  /** @suppress {duplicate } */
  function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx.drawElementsInstanced(mode, count, type, indices, primcount);
    }
  /** @suppress {duplicate } */
  var _glDrawElementsInstancedANGLE = _glDrawElementsInstanced;
  var _emscripten_glDrawElementsInstancedANGLE = _glDrawElementsInstancedANGLE;

  /** @suppress {duplicate } */
  function _glEnable(x0) { GLctx.enable(x0) }
  var _emscripten_glEnable = _glEnable;

  /** @suppress {duplicate } */
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  var _emscripten_glEnableVertexAttribArray = _glEnableVertexAttribArray;

  /** @suppress {duplicate } */
  function _glEndQueryEXT(target) {
      GLctx.disjointTimerQueryExt['endQueryEXT'](target);
    }
  var _emscripten_glEndQueryEXT = _glEndQueryEXT;

  /** @suppress {duplicate } */
  function _glFinish() { GLctx.finish() }
  var _emscripten_glFinish = _glFinish;

  /** @suppress {duplicate } */
  function _glFlush() { GLctx.flush() }
  var _emscripten_glFlush = _glFlush;

  /** @suppress {duplicate } */
  function _glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }
  var _emscripten_glFramebufferRenderbuffer = _glFramebufferRenderbuffer;

  /** @suppress {duplicate } */
  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }
  var _emscripten_glFramebufferTexture2D = _glFramebufferTexture2D;

  /** @suppress {duplicate } */
  function _glFrontFace(x0) { GLctx.frontFace(x0) }
  var _emscripten_glFrontFace = _glFrontFace;

  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)] = id;
      }
    }
  
  /** @suppress {duplicate } */
  function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }
  var _emscripten_glGenBuffers = _glGenBuffers;

  
  /** @suppress {duplicate } */
  function _glGenFramebuffers(n, ids) {
      __glGenObject(n, ids, 'createFramebuffer', GL.framebuffers
        );
    }
  var _emscripten_glGenFramebuffers = _glGenFramebuffers;

  /** @suppress {duplicate } */
  function _glGenQueriesEXT(n, ids) {
      for (var i = 0; i < n; i++) {
        var query = GLctx.disjointTimerQueryExt['createQueryEXT']();
        if (!query) {
          GL.recordError(0x502 /* GL_INVALID_OPERATION */);
          while (i < n) HEAP32[(((ids)+(i++*4))>>2)] = 0;
          return;
        }
        var id = GL.getNewId(GL.queries);
        query.name = id;
        GL.queries[id] = query;
        HEAP32[(((ids)+(i*4))>>2)] = id;
      }
    }
  var _emscripten_glGenQueriesEXT = _glGenQueriesEXT;

  
  /** @suppress {duplicate } */
  function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }
  var _emscripten_glGenRenderbuffers = _glGenRenderbuffers;

  
  /** @suppress {duplicate } */
  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }
  var _emscripten_glGenTextures = _glGenTextures;

  
  
  /** @suppress {duplicate } */
  function _glGenVertexArrays(n, arrays) {
      __glGenObject(n, arrays, 'createVertexArray', GL.vaos
        );
    }
  /** @suppress {duplicate } */
  var _glGenVertexArraysOES = _glGenVertexArrays;
  var _emscripten_glGenVertexArraysOES = _glGenVertexArraysOES;

  /** @suppress {duplicate } */
  function _glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }
  var _emscripten_glGenerateMipmap = _glGenerateMipmap;

  
  function __glGetActiveAttribOrUniform(funcName, program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx[funcName](program, index);
      if (info) { // If an error occurs, nothing will be written to length, size and type and name.
        var numBytesWrittenExclNull = name && stringToUTF8(info.name, name, bufSize);
        if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
        if (size) HEAP32[((size)>>2)] = info.size;
        if (type) HEAP32[((type)>>2)] = info.type;
      }
    }
  
  /** @suppress {duplicate } */
  function _glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      __glGetActiveAttribOrUniform('getActiveAttrib', program, index, bufSize, length, size, type, name);
    }
  var _emscripten_glGetActiveAttrib = _glGetActiveAttrib;

  
  /** @suppress {duplicate } */
  function _glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      __glGetActiveAttribOrUniform('getActiveUniform', program, index, bufSize, length, size, type, name);
    }
  var _emscripten_glGetActiveUniform = _glGetActiveUniform;

  /** @suppress {duplicate } */
  function _glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)] = len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)] = id;
      }
    }
  var _emscripten_glGetAttachedShaders = _glGetAttachedShaders;

  
  /** @suppress {duplicate } */
  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }
  var _emscripten_glGetAttribLocation = _glGetAttribLocation;

  function readI53FromI64(ptr) {
      return HEAPU32[ptr>>2] + HEAP32[ptr+4>>2] * 4294967296;
    }
  
  function readI53FromU64(ptr) {
      return HEAPU32[ptr>>2] + HEAPU32[ptr+4>>2] * 4294967296;
    }
  function writeI53ToI64(ptr, num) {
      HEAPU32[ptr>>2] = num;
      HEAPU32[ptr+4>>2] = (num - HEAPU32[ptr>>2])/4294967296;
      var deserialized = (num >= 0) ? readI53FromU64(ptr) : readI53FromI64(ptr);
      if (deserialized != num) warnOnce('writeI53ToI64() out of range: serialized JS Number ' + num + ' to Wasm heap as bytes lo=' + ptrToString(HEAPU32[ptr>>2]) + ', hi=' + ptrToString(HEAPU32[ptr+4>>2]) + ', which deserializes back to ' + deserialized + ' instead!');
    }
  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch (name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
  
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof result) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch (name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING or DRAW_FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)] = result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)] = result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: writeI53ToI64(p, ret); break;
        case 0: HEAP32[((p)>>2)] = ret; break;
        case 2:   HEAPF32[((p)>>2)] = ret; break;
        case 4: HEAP8[((p)>>0)] = ret ? 1 : 0; break;
      }
    }
  
  /** @suppress {duplicate } */
  function _glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 4);
    }
  var _emscripten_glGetBooleanv = _glGetBooleanv;

  /** @suppress {duplicate } */
  function _glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)] = GLctx.getBufferParameter(target, value);
    }
  var _emscripten_glGetBufferParameteriv = _glGetBufferParameteriv;

  /** @suppress {duplicate } */
  function _glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }
  var _emscripten_glGetError = _glGetError;

  
  /** @suppress {duplicate } */
  function _glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 2);
    }
  var _emscripten_glGetFloatv = _glGetFloatv;

  /** @suppress {duplicate } */
  function _glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      if (result instanceof WebGLRenderbuffer ||
          result instanceof WebGLTexture) {
        result = result.name | 0;
      }
      HEAP32[((params)>>2)] = result;
    }
  var _emscripten_glGetFramebufferAttachmentParameteriv = _glGetFramebufferAttachmentParameteriv;

  
  /** @suppress {duplicate } */
  function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }
  var _emscripten_glGetIntegerv = _glGetIntegerv;

  /** @suppress {duplicate } */
  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }
  var _emscripten_glGetProgramInfoLog = _glGetProgramInfoLog;

  /** @suppress {duplicate } */
  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
  
      program = GL.programs[program];
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(program);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)] = log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        if (!program.maxUniformLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/); ++i) {
            program.maxUniformLength = Math.max(program.maxUniformLength, GLctx.getActiveUniform(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (!program.maxAttributeLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/); ++i) {
            program.maxAttributeLength = Math.max(program.maxAttributeLength, GLctx.getActiveAttrib(program, i).name.length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (!program.maxUniformBlockNameLength) {
          for (var i = 0; i < GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/); ++i) {
            program.maxUniformBlockNameLength = Math.max(program.maxUniformBlockNameLength, GLctx.getActiveUniformBlockName(program, i).length+1);
          }
        }
        HEAP32[((p)>>2)] = program.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getProgramParameter(program, pname);
      }
    }
  var _emscripten_glGetProgramiv = _glGetProgramiv;

  
  /** @suppress {duplicate } */
  function _glGetQueryObjecti64vEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param;
      {
        param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      }
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      writeI53ToI64(params, ret);
    }
  var _emscripten_glGetQueryObjecti64vEXT = _glGetQueryObjecti64vEXT;

  /** @suppress {duplicate } */
  function _glGetQueryObjectivEXT(id, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var query = GL.queries[id];
      var param = GLctx.disjointTimerQueryExt['getQueryObjectEXT'](query, pname);
      var ret;
      if (typeof param == 'boolean') {
        ret = param ? 1 : 0;
      } else {
        ret = param;
      }
      HEAP32[((params)>>2)] = ret;
    }
  var _emscripten_glGetQueryObjectivEXT = _glGetQueryObjectivEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectui64vEXT = _glGetQueryObjecti64vEXT;
  var _emscripten_glGetQueryObjectui64vEXT = _glGetQueryObjectui64vEXT;

  
  /** @suppress {duplicate } */
  var _glGetQueryObjectuivEXT = _glGetQueryObjectivEXT;
  var _emscripten_glGetQueryObjectuivEXT = _glGetQueryObjectuivEXT;

  /** @suppress {duplicate } */
  function _glGetQueryivEXT(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.disjointTimerQueryExt['getQueryEXT'](target, pname);
    }
  var _emscripten_glGetQueryivEXT = _glGetQueryivEXT;

  /** @suppress {duplicate } */
  function _glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getRenderbufferParameter(target, pname);
    }
  var _emscripten_glGetRenderbufferParameteriv = _glGetRenderbufferParameteriv;

  
  /** @suppress {duplicate } */
  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }
  var _emscripten_glGetShaderInfoLog = _glGetShaderInfoLog;

  /** @suppress {duplicate } */
  function _glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)] = result.rangeMin;
      HEAP32[(((range)+(4))>>2)] = result.rangeMax;
      HEAP32[((precision)>>2)] = result.precision;
    }
  var _emscripten_glGetShaderPrecisionFormat = _glGetShaderPrecisionFormat;

  /** @suppress {duplicate } */
  function _glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      var numBytesWrittenExclNull = (bufSize > 0 && source) ? stringToUTF8(result, source, bufSize) : 0;
      if (length) HEAP32[((length)>>2)] = numBytesWrittenExclNull;
    }
  var _emscripten_glGetShaderSource = _glGetShaderSource;

  /** @suppress {duplicate } */
  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        // The GLES2 specification says that if the shader has an empty info log,
        // a value of 0 is returned. Otherwise the log has a null char appended.
        // (An empty string is falsey, so we can just check that instead of
        // looking at log.length.)
        var logLength = log ? log.length + 1 : 0;
        HEAP32[((p)>>2)] = logLength;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        // source may be a null, or the empty string, both of which are falsey
        // values that we report a 0 length for.
        var sourceLength = source ? source.length + 1 : 0;
        HEAP32[((p)>>2)] = sourceLength;
      } else {
        HEAP32[((p)>>2)] = GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }
  var _emscripten_glGetShaderiv = _glGetShaderiv;

  
  
  function stringToNewUTF8(str) {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    }
  
  /** @suppress {duplicate } */
  function _glGetString(name_) {
      var ret = GL.stringCache[name_];
      if (!ret) {
        switch (name_) {
          case 0x1F03 /* GL_EXTENSIONS */:
            var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
            exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
            ret = stringToNewUTF8(exts.join(' '));
            break;
          case 0x1F00 /* GL_VENDOR */:
          case 0x1F01 /* GL_RENDERER */:
          case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
          case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
            var s = GLctx.getParameter(name_);
            if (!s) {
              GL.recordError(0x500/*GL_INVALID_ENUM*/);
            }
            ret = s && stringToNewUTF8(s);
            break;
  
          case 0x1F02 /* GL_VERSION */:
            var glVersion = GLctx.getParameter(0x1F02 /*GL_VERSION*/);
            // return GLES version string corresponding to the version of the WebGL context
            {
              glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
            }
            ret = stringToNewUTF8(glVersion);
            break;
          case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
            var glslVersion = GLctx.getParameter(0x8B8C /*GL_SHADING_LANGUAGE_VERSION*/);
            // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
            var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
            var ver_num = glslVersion.match(ver_re);
            if (ver_num !== null) {
              if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
              glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
            }
            ret = stringToNewUTF8(glslVersion);
            break;
          default:
            GL.recordError(0x500/*GL_INVALID_ENUM*/);
            // fall through
        }
        GL.stringCache[name_] = ret;
      }
      return ret;
    }
  var _emscripten_glGetString = _glGetString;

  /** @suppress {duplicate } */
  function _glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    }
  var _emscripten_glGetTexParameterfv = _glGetTexParameterfv;

  /** @suppress {duplicate } */
  function _glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)] = GLctx.getTexParameter(target, pname);
    }
  var _emscripten_glGetTexParameteriv = _glGetTexParameteriv;

  /** @suppress {checkTypes} */
  function jstoi_q(str) {
      return parseInt(str);
    }
  
  /** @noinline */
  function webglGetLeftBracePos(name) {
      return name.slice(-1) == ']' && name.lastIndexOf('[');
    }
  
  function webglPrepareUniformLocationsBeforeFirstUse(program) {
      var uniformLocsById = program.uniformLocsById, // Maps GLuint -> WebGLUniformLocation
        uniformSizeAndIdsByName = program.uniformSizeAndIdsByName, // Maps name -> [uniform array length, GLuint]
        i, j;
  
      // On the first time invocation of glGetUniformLocation on this shader program:
      // initialize cache data structures and discover which uniforms are arrays.
      if (!uniformLocsById) {
        // maps GLint integer locations to WebGLUniformLocations
        program.uniformLocsById = uniformLocsById = {};
        // maps integer locations back to uniform name strings, so that we can lazily fetch uniform array locations
        program.uniformArrayNamesById = {};
  
        for (i = 0; i < GLctx.getProgramParameter(program, 0x8B86/*GL_ACTIVE_UNIFORMS*/); ++i) {
          var u = GLctx.getActiveUniform(program, i);
          var nm = u.name;
          var sz = u.size;
          var lb = webglGetLeftBracePos(nm);
          var arrayName = lb > 0 ? nm.slice(0, lb) : nm;
  
          // Assign a new location.
          var id = program.uniformIdCounter;
          program.uniformIdCounter += sz;
          // Eagerly get the location of the uniformArray[0] base element.
          // The remaining indices >0 will be left for lazy evaluation to
          // improve performance. Those may never be needed to fetch, if the
          // application fills arrays always in full starting from the first
          // element of the array.
          uniformSizeAndIdsByName[arrayName] = [sz, id];
  
          // Store placeholder integers in place that highlight that these
          // >0 index locations are array indices pending population.
          for(j = 0; j < sz; ++j) {
            uniformLocsById[id] = j;
            program.uniformArrayNamesById[id++] = arrayName;
          }
        }
      }
    }
  
  
  
  /** @suppress {duplicate } */
  function _glGetUniformLocation(program, name) {
  
      name = UTF8ToString(name);
  
      if (program = GL.programs[program]) {
        webglPrepareUniformLocationsBeforeFirstUse(program);
        var uniformLocsById = program.uniformLocsById; // Maps GLuint -> WebGLUniformLocation
        var arrayIndex = 0;
        var uniformBaseName = name;
  
        // Invariant: when populating integer IDs for uniform locations, we must maintain the precondition that
        // arrays reside in contiguous addresses, i.e. for a 'vec4 colors[10];', colors[4] must be at location colors[0]+4.
        // However, user might call glGetUniformLocation(program, "colors") for an array, so we cannot discover based on the user
        // input arguments whether the uniform we are dealing with is an array. The only way to discover which uniforms are arrays
        // is to enumerate over all the active uniforms in the program.
        var leftBrace = webglGetLeftBracePos(name);
  
        // If user passed an array accessor "[index]", parse the array index off the accessor.
        if (leftBrace > 0) {
          arrayIndex = jstoi_q(name.slice(leftBrace + 1)) >>> 0; // "index]", coerce parseInt(']') with >>>0 to treat "foo[]" as "foo[0]" and foo[-1] as unsigned out-of-bounds.
          uniformBaseName = name.slice(0, leftBrace);
        }
  
        // Have we cached the location of this uniform before?
        var sizeAndId = program.uniformSizeAndIdsByName[uniformBaseName]; // A pair [array length, GLint of the uniform location]
  
        // If an uniform with this name exists, and if its index is within the array limits (if it's even an array),
        // query the WebGLlocation, or return an existing cached location.
        if (sizeAndId && arrayIndex < sizeAndId[0]) {
          arrayIndex += sizeAndId[1]; // Add the base location of the uniform to the array index offset.
          if ((uniformLocsById[arrayIndex] = uniformLocsById[arrayIndex] || GLctx.getUniformLocation(program, name))) {
            return arrayIndex;
          }
        }
      }
      else {
        // N.b. we are currently unable to distinguish between GL program IDs that never existed vs GL program IDs that have been deleted,
        // so report GL_INVALID_VALUE in both cases.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
      }
      return -1;
    }
  var _emscripten_glGetUniformLocation = _glGetUniformLocation;

  function webglGetUniformLocation(location) {
      var p = GLctx.currentProgram;
  
      if (p) {
        var webglLoc = p.uniformLocsById[location];
        // p.uniformLocsById[location] stores either an integer, or a WebGLUniformLocation.
  
        // If an integer, we have not yet bound the location, so do it now. The integer value specifies the array index
        // we should bind to.
        if (typeof webglLoc == 'number') {
          p.uniformLocsById[location] = webglLoc = GLctx.getUniformLocation(p, p.uniformArrayNamesById[location] + (webglLoc > 0 ? '[' + webglLoc + ']' : ''));
        }
        // Else an already cached WebGLUniformLocation, return it.
        return webglLoc;
      } else {
        GL.recordError(0x502/*GL_INVALID_OPERATION*/);
      }
    }
  
  
  /** @suppress{checkTypes} */
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      program = GL.programs[program];
      webglPrepareUniformLocationsBeforeFirstUse(program);
      var data = GLctx.getUniform(program, webglGetUniformLocation(location));
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
          }
        }
      }
    }
  
  /** @suppress {duplicate } */
  function _glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 2);
    }
  var _emscripten_glGetUniformfv = _glGetUniformfv;

  
  /** @suppress {duplicate } */
  function _glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 0);
    }
  var _emscripten_glGetUniformiv = _glGetUniformiv;

  /** @suppress {duplicate } */
  function _glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)] = GLctx.getVertexAttribOffset(index, pname);
    }
  var _emscripten_glGetVertexAttribPointerv = _glGetVertexAttribPointerv;

  /** @suppress{checkTypes} */
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it.
        GL.recordError(0x501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (pname == 0x889F/*VERTEX_ATTRIB_ARRAY_BUFFER_BINDING*/) {
        HEAP32[((params)>>2)] = data && data["name"];
      } else if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 0: HEAP32[((params)>>2)] = data; break;
          case 2: HEAPF32[((params)>>2)] = data; break;
          case 5: HEAP32[((params)>>2)] = Math.fround(data); break;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 0: HEAP32[(((params)+(i*4))>>2)] = data[i]; break;
            case 2: HEAPF32[(((params)+(i*4))>>2)] = data[i]; break;
            case 5: HEAP32[(((params)+(i*4))>>2)] = Math.fround(data[i]); break;
          }
        }
      }
    }
  
  /** @suppress {duplicate } */
  function _glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 2);
    }
  var _emscripten_glGetVertexAttribfv = _glGetVertexAttribfv;

  
  /** @suppress {duplicate } */
  function _glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 5);
    }
  var _emscripten_glGetVertexAttribiv = _glGetVertexAttribiv;

  /** @suppress {duplicate } */
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  var _emscripten_glHint = _glHint;

  /** @suppress {duplicate } */
  function _glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }
  var _emscripten_glIsBuffer = _glIsBuffer;

  /** @suppress {duplicate } */
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  var _emscripten_glIsEnabled = _glIsEnabled;

  /** @suppress {duplicate } */
  function _glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }
  var _emscripten_glIsFramebuffer = _glIsFramebuffer;

  /** @suppress {duplicate } */
  function _glIsProgram(program) {
      program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }
  var _emscripten_glIsProgram = _glIsProgram;

  /** @suppress {duplicate } */
  function _glIsQueryEXT(id) {
      var query = GL.queries[id];
      if (!query) return 0;
      return GLctx.disjointTimerQueryExt['isQueryEXT'](query);
    }
  var _emscripten_glIsQueryEXT = _glIsQueryEXT;

  /** @suppress {duplicate } */
  function _glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }
  var _emscripten_glIsRenderbuffer = _glIsRenderbuffer;

  /** @suppress {duplicate } */
  function _glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }
  var _emscripten_glIsShader = _glIsShader;

  /** @suppress {duplicate } */
  function _glIsTexture(id) {
      var texture = GL.textures[id];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }
  var _emscripten_glIsTexture = _glIsTexture;

  
  /** @suppress {duplicate } */
  function _glIsVertexArray(array) {
  
      var vao = GL.vaos[array];
      if (!vao) return 0;
      return GLctx.isVertexArray(vao);
    }
  /** @suppress {duplicate } */
  var _glIsVertexArrayOES = _glIsVertexArray;
  var _emscripten_glIsVertexArrayOES = _glIsVertexArrayOES;

  /** @suppress {duplicate } */
  function _glLineWidth(x0) { GLctx.lineWidth(x0) }
  var _emscripten_glLineWidth = _glLineWidth;

  /** @suppress {duplicate } */
  function _glLinkProgram(program) {
      program = GL.programs[program];
      GLctx.linkProgram(program);
      // Invalidate earlier computed uniform->ID mappings, those have now become stale
      program.uniformLocsById = 0; // Mark as null-like so that glGetUniformLocation() knows to populate this again.
      program.uniformSizeAndIdsByName = {};
  
    }
  var _emscripten_glLinkProgram = _glLinkProgram;

  /** @suppress {duplicate } */
  function _glPixelStorei(pname, param) {
      if (pname == 0xCF5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }
  var _emscripten_glPixelStorei = _glPixelStorei;

  /** @suppress {duplicate } */
  function _glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }
  var _emscripten_glPolygonOffset = _glPolygonOffset;

  /** @suppress {duplicate } */
  function _glQueryCounterEXT(id, target) {
      GLctx.disjointTimerQueryExt['queryCounterEXT'](GL.queries[id], target);
    }
  var _emscripten_glQueryCounterEXT = _glQueryCounterEXT;

  function computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  function colorChannelsInGlTextureFormat(format) {
      // Micro-optimizations for size: map format to size by subtracting smallest enum value (0x1902) from all values first.
      // Also omit the most common size value (1) from the list, which is assumed by formats not on the list.
      var colorChannels = {
        // 0x1902 /* GL_DEPTH_COMPONENT */ - 0x1902: 1,
        // 0x1906 /* GL_ALPHA */ - 0x1902: 1,
        5: 3,
        6: 4,
        // 0x1909 /* GL_LUMINANCE */ - 0x1902: 1,
        8: 2,
        29502: 3,
        29504: 4,
      };
      return colorChannels[format - 0x1902]||1;
    }
  
  function heapObjectForWebGLType(type) {
      // Micro-optimization for size: Subtract lowest GL enum number (0x1400/* GL_BYTE */) from type to compare
      // smaller values for the heap, for shorter generated code size.
      // Also the type HEAPU16 is not tested for explicitly, but any unrecognized type will return out HEAPU16.
      // (since most types are HEAPU16)
      type -= 0x1400;
  
      if (type == 1) return HEAPU8;
  
      if (type == 4) return HEAP32;
  
      if (type == 6) return HEAPF32;
  
      if (type == 5
        || type == 28922
        )
        return HEAPU32;
  
      return HEAPU16;
    }
  
  function heapAccessShiftForWebGLHeap(heap) {
      return 31 - Math.clz32(heap.BYTES_PER_ELEMENT);
    }
  
  function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var heap = heapObjectForWebGLType(type);
      var shift = heapAccessShiftForWebGLHeap(heap);
      var byteSize = 1<<shift;
      var sizePerPixel = colorChannelsInGlTextureFormat(format) * byteSize;
      var bytes = computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      return heap.subarray(pixels >> shift, pixels + bytes >> shift);
    }
  
  /** @suppress {duplicate } */
  function _glReadPixels(x, y, width, height, format, type, pixels) {
      var pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!pixelData) {
        GL.recordError(0x500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, pixelData);
    }
  var _emscripten_glReadPixels = _glReadPixels;

  /** @suppress {duplicate } */
  function _glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }
  var _emscripten_glReleaseShaderCompiler = _glReleaseShaderCompiler;

  /** @suppress {duplicate } */
  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }
  var _emscripten_glRenderbufferStorage = _glRenderbufferStorage;

  /** @suppress {duplicate } */
  function _glSampleCoverage(value, invert) {
      GLctx.sampleCoverage(value, !!invert);
    }
  var _emscripten_glSampleCoverage = _glSampleCoverage;

  /** @suppress {duplicate } */
  function _glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }
  var _emscripten_glScissor = _glScissor;

  /** @suppress {duplicate } */
  function _glShaderBinary(count, shaders, binaryformat, binary, length) {
      GL.recordError(0x500/*GL_INVALID_ENUM*/);
    }
  var _emscripten_glShaderBinary = _glShaderBinary;

  /** @suppress {duplicate } */
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  var _emscripten_glShaderSource = _glShaderSource;

  /** @suppress {duplicate } */
  function _glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }
  var _emscripten_glStencilFunc = _glStencilFunc;

  /** @suppress {duplicate } */
  function _glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }
  var _emscripten_glStencilFuncSeparate = _glStencilFuncSeparate;

  /** @suppress {duplicate } */
  function _glStencilMask(x0) { GLctx.stencilMask(x0) }
  var _emscripten_glStencilMask = _glStencilMask;

  /** @suppress {duplicate } */
  function _glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }
  var _emscripten_glStencilMaskSeparate = _glStencilMaskSeparate;

  /** @suppress {duplicate } */
  function _glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }
  var _emscripten_glStencilOp = _glStencilOp;

  /** @suppress {duplicate } */
  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }
  var _emscripten_glStencilOpSeparate = _glStencilOpSeparate;

  
  /** @suppress {duplicate } */
  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }
  var _emscripten_glTexImage2D = _glTexImage2D;

  /** @suppress {duplicate } */
  function _glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }
  var _emscripten_glTexParameterf = _glTexParameterf;

  /** @suppress {duplicate } */
  function _glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }
  var _emscripten_glTexParameterfv = _glTexParameterfv;

  /** @suppress {duplicate } */
  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }
  var _emscripten_glTexParameteri = _glTexParameteri;

  /** @suppress {duplicate } */
  function _glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }
  var _emscripten_glTexParameteriv = _glTexParameteriv;

  
  /** @suppress {duplicate } */
  function _glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData = null;
      if (pixels) pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, 0);
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }
  var _emscripten_glTexSubImage2D = _glTexSubImage2D;

  
  /** @suppress {duplicate } */
  function _glUniform1f(location, v0) {
      GLctx.uniform1f(webglGetUniformLocation(location), v0);
    }
  var _emscripten_glUniform1f = _glUniform1f;

  
  var miniTempWebGLFloatBuffers = [];
  
  /** @suppress {duplicate } */
  function _glUniform1fv(location, count, value) {
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*4)>>2);
      }
      GLctx.uniform1fv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform1fv = _glUniform1fv;

  
  /** @suppress {duplicate } */
  function _glUniform1i(location, v0) {
      GLctx.uniform1i(webglGetUniformLocation(location), v0);
    }
  var _emscripten_glUniform1i = _glUniform1i;

  
  var miniTempWebGLIntBuffers = [];
  
  /** @suppress {duplicate } */
  function _glUniform1iv(location, count, value) {
  
      if (count <= 288) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLIntBuffers[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2, (value+count*4)>>2);
      }
      GLctx.uniform1iv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform1iv = _glUniform1iv;

  
  /** @suppress {duplicate } */
  function _glUniform2f(location, v0, v1) {
      GLctx.uniform2f(webglGetUniformLocation(location), v0, v1);
    }
  var _emscripten_glUniform2f = _glUniform2f;

  
  
  /** @suppress {duplicate } */
  function _glUniform2fv(location, count, value) {
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*8)>>2);
      }
      GLctx.uniform2fv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform2fv = _glUniform2fv;

  
  /** @suppress {duplicate } */
  function _glUniform2i(location, v0, v1) {
      GLctx.uniform2i(webglGetUniformLocation(location), v0, v1);
    }
  var _emscripten_glUniform2i = _glUniform2i;

  
  
  /** @suppress {duplicate } */
  function _glUniform2iv(location, count, value) {
  
      if (count <= 144) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLIntBuffers[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2, (value+count*8)>>2);
      }
      GLctx.uniform2iv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform2iv = _glUniform2iv;

  
  /** @suppress {duplicate } */
  function _glUniform3f(location, v0, v1, v2) {
      GLctx.uniform3f(webglGetUniformLocation(location), v0, v1, v2);
    }
  var _emscripten_glUniform3f = _glUniform3f;

  
  
  /** @suppress {duplicate } */
  function _glUniform3fv(location, count, value) {
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*12)>>2);
      }
      GLctx.uniform3fv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform3fv = _glUniform3fv;

  
  /** @suppress {duplicate } */
  function _glUniform3i(location, v0, v1, v2) {
      GLctx.uniform3i(webglGetUniformLocation(location), v0, v1, v2);
    }
  var _emscripten_glUniform3i = _glUniform3i;

  
  
  /** @suppress {duplicate } */
  function _glUniform3iv(location, count, value) {
  
      if (count <= 96) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLIntBuffers[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2, (value+count*12)>>2);
      }
      GLctx.uniform3iv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform3iv = _glUniform3iv;

  
  /** @suppress {duplicate } */
  function _glUniform4f(location, v0, v1, v2, v3) {
      GLctx.uniform4f(webglGetUniformLocation(location), v0, v1, v2, v3);
    }
  var _emscripten_glUniform4f = _glUniform4f;

  
  
  /** @suppress {duplicate } */
  function _glUniform4fv(location, count, value) {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 4 * count; i += 4) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*16)>>2);
      }
      GLctx.uniform4fv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform4fv = _glUniform4fv;

  
  /** @suppress {duplicate } */
  function _glUniform4i(location, v0, v1, v2, v3) {
      GLctx.uniform4i(webglGetUniformLocation(location), v0, v1, v2, v3);
    }
  var _emscripten_glUniform4i = _glUniform4i;

  
  
  /** @suppress {duplicate } */
  function _glUniform4iv(location, count, value) {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLIntBuffers[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAP32[(((value)+(4*i))>>2)];
          view[i+1] = HEAP32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAP32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAP32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAP32.subarray((value)>>2, (value+count*16)>>2);
      }
      GLctx.uniform4iv(webglGetUniformLocation(location), view);
    }
  var _emscripten_glUniform4iv = _glUniform4iv;

  
  
  /** @suppress {duplicate } */
  function _glUniformMatrix2fv(location, count, transpose, value) {
  
      if (count <= 72) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(webglGetUniformLocation(location), !!transpose, view);
    }
  var _emscripten_glUniformMatrix2fv = _glUniformMatrix2fv;

  
  
  /** @suppress {duplicate } */
  function _glUniformMatrix3fv(location, count, transpose, value) {
  
      if (count <= 32) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[9*count-1];
        for (var i = 0; i < 9*count; i += 9) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(webglGetUniformLocation(location), !!transpose, view);
    }
  var _emscripten_glUniformMatrix3fv = _glUniformMatrix3fv;

  
  
  /** @suppress {duplicate } */
  function _glUniformMatrix4fv(location, count, transpose, value) {
  
      if (count <= 18) {
        // avoid allocation when uploading few enough uniforms
        var view = miniTempWebGLFloatBuffers[16*count-1];
        // hoist the heap out of the loop for size and for pthreads+growth.
        var heap = HEAPF32;
        value >>= 2;
        for (var i = 0; i < 16 * count; i += 16) {
          var dst = value + i;
          view[i] = heap[dst];
          view[i + 1] = heap[dst + 1];
          view[i + 2] = heap[dst + 2];
          view[i + 3] = heap[dst + 3];
          view[i + 4] = heap[dst + 4];
          view[i + 5] = heap[dst + 5];
          view[i + 6] = heap[dst + 6];
          view[i + 7] = heap[dst + 7];
          view[i + 8] = heap[dst + 8];
          view[i + 9] = heap[dst + 9];
          view[i + 10] = heap[dst + 10];
          view[i + 11] = heap[dst + 11];
          view[i + 12] = heap[dst + 12];
          view[i + 13] = heap[dst + 13];
          view[i + 14] = heap[dst + 14];
          view[i + 15] = heap[dst + 15];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2, (value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(webglGetUniformLocation(location), !!transpose, view);
    }
  var _emscripten_glUniformMatrix4fv = _glUniformMatrix4fv;

  /** @suppress {duplicate } */
  function _glUseProgram(program) {
      program = GL.programs[program];
      GLctx.useProgram(program);
      // Record the currently active program so that we can access the uniform
      // mapping table of that program.
      GLctx.currentProgram = program;
    }
  var _emscripten_glUseProgram = _glUseProgram;

  /** @suppress {duplicate } */
  function _glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }
  var _emscripten_glValidateProgram = _glValidateProgram;

  /** @suppress {duplicate } */
  function _glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }
  var _emscripten_glVertexAttrib1f = _glVertexAttrib1f;

  /** @suppress {duplicate } */
  function _glVertexAttrib1fv(index, v) {
  
      GLctx.vertexAttrib1f(index, HEAPF32[v>>2]);
    }
  var _emscripten_glVertexAttrib1fv = _glVertexAttrib1fv;

  /** @suppress {duplicate } */
  function _glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }
  var _emscripten_glVertexAttrib2f = _glVertexAttrib2f;

  /** @suppress {duplicate } */
  function _glVertexAttrib2fv(index, v) {
  
      GLctx.vertexAttrib2f(index, HEAPF32[v>>2], HEAPF32[v+4>>2]);
    }
  var _emscripten_glVertexAttrib2fv = _glVertexAttrib2fv;

  /** @suppress {duplicate } */
  function _glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }
  var _emscripten_glVertexAttrib3f = _glVertexAttrib3f;

  /** @suppress {duplicate } */
  function _glVertexAttrib3fv(index, v) {
  
      GLctx.vertexAttrib3f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2]);
    }
  var _emscripten_glVertexAttrib3fv = _glVertexAttrib3fv;

  /** @suppress {duplicate } */
  function _glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }
  var _emscripten_glVertexAttrib4f = _glVertexAttrib4f;

  /** @suppress {duplicate } */
  function _glVertexAttrib4fv(index, v) {
  
      GLctx.vertexAttrib4f(index, HEAPF32[v>>2], HEAPF32[v+4>>2], HEAPF32[v+8>>2], HEAPF32[v+12>>2]);
    }
  var _emscripten_glVertexAttrib4fv = _glVertexAttrib4fv;

  
  /** @suppress {duplicate } */
  function _glVertexAttribDivisor(index, divisor) {
      GLctx.vertexAttribDivisor(index, divisor);
    }
  /** @suppress {duplicate } */
  var _glVertexAttribDivisorANGLE = _glVertexAttribDivisor;
  var _emscripten_glVertexAttribDivisorANGLE = _glVertexAttribDivisorANGLE;

  /** @suppress {duplicate } */
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }
  var _emscripten_glVertexAttribPointer = _glVertexAttribPointer;

  /** @suppress {duplicate } */
  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }
  var _emscripten_glViewport = _glViewport;

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ' + HEAP8.length + ', (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _emscripten_run_script(ptr) {
      eval(UTF8ToString(ptr));
    }

  function _emscripten_sample_gamepad_data() {
      return (JSEvents.lastGamepadState = (navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : null)))
        ? 0 : -1;
    }

  
  
  
  function fillMouseEventData(eventStruct, e, target) {
      assert(eventStruct % 4 == 0);
      HEAPF64[((eventStruct)>>3)] = e.timeStamp;
      var idx = eventStruct >> 2;
      HEAP32[idx + 2] = e.screenX;
      HEAP32[idx + 3] = e.screenY;
      HEAP32[idx + 4] = e.clientX;
      HEAP32[idx + 5] = e.clientY;
      HEAP32[idx + 6] = e.ctrlKey;
      HEAP32[idx + 7] = e.shiftKey;
      HEAP32[idx + 8] = e.altKey;
      HEAP32[idx + 9] = e.metaKey;
      HEAP16[idx*2 + 20] = e.button;
      HEAP16[idx*2 + 21] = e.buttons;
  
      HEAP32[idx + 11] = e["movementX"]
        ;
  
      HEAP32[idx + 12] = e["movementY"]
        ;
  
      var rect = getBoundingClientRect(target);
      HEAP32[idx + 13] = e.clientX - rect.left;
      HEAP32[idx + 14] = e.clientY - rect.top;
  
    }
  
  
  
  var wasmTableMirror = [];
  
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      assert(wasmTable.get(funcPtr) == func, "JavaScript-side Wasm function table mirror is out of date!");
      return func;
    }
  function registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = findEventTarget(target);
  
      var mouseEventHandlerFunc = function(e = event) {
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_click_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      registerMouseEventCallback(target, userData, useCapture, callbackfunc, 4, "click", targetThread);
      return 0;
    }

  
  
  
  function fillFullscreenChangeEventData(eventStruct) {
      var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
      var isFullscreen = !!fullscreenElement;
      // Assigning a boolean to HEAP32 with expected type coercion.
      /** @suppress{checkTypes} */
      HEAP32[((eventStruct)>>2)] = isFullscreen;
      HEAP32[(((eventStruct)+(4))>>2)] = JSEvents.fullscreenEnabled();
      // If transitioning to fullscreen, report info about the element that is now fullscreen.
      // If transitioning to windowed mode, report info about the element that just was fullscreen.
      var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
      var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
      var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
      stringToUTF8(nodeName, eventStruct + 8, 128);
      stringToUTF8(id, eventStruct + 136, 128);
      HEAP32[(((eventStruct)+(264))>>2)] = reportedElement ? reportedElement.clientWidth : 0;
      HEAP32[(((eventStruct)+(268))>>2)] = reportedElement ? reportedElement.clientHeight : 0;
      HEAP32[(((eventStruct)+(272))>>2)] = screen.width;
      HEAP32[(((eventStruct)+(276))>>2)] = screen.height;
      if (isFullscreen) {
        JSEvents.previousFullscreenElement = fullscreenElement;
      }
    }
  
  
  
  function registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.fullscreenChangeEvent) JSEvents.fullscreenChangeEvent = _malloc( 280 );
  
      var fullscreenChangeEventhandlerFunc = function(e = event) {
        var fullscreenChangeEvent = JSEvents.fullscreenChangeEvent;
  
        fillFullscreenChangeEventData(fullscreenChangeEvent);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, fullscreenChangeEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: fullscreenChangeEventhandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  
  
  function _emscripten_set_fullscreenchange_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      if (!JSEvents.fullscreenEnabled()) return -1;
      target = findEventTarget(target);
      if (!target) return -4;
      registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "fullscreenchange", targetThread);
  
      // Unprefixed Fullscreen API shipped in Chromium 71 (https://bugs.chromium.org/p/chromium/issues/detail?id=383813)
      // As of Safari 13.0.3 on macOS Catalina 10.15.1 still ships with prefixed webkitfullscreenchange. TODO: revisit this check once Safari ships unprefixed version.
      registerFullscreenChangeEventCallback(target, userData, useCapture, callbackfunc, 19, "webkitfullscreenchange", targetThread);
  
      return 0;
    }

  
  
  
  
  function registerGamepadEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.gamepadEvent) JSEvents.gamepadEvent = _malloc( 1432 );
  
      var gamepadEventHandlerFunc = function(e = event) {
        var gamepadEvent = JSEvents.gamepadEvent;
        fillGamepadEventData(gamepadEvent, e["gamepad"]);
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, gamepadEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: findEventTarget(target),
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: gamepadEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_gamepadconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 26, "gamepadconnected", targetThread);
      return 0;
    }

  function _emscripten_set_gamepaddisconnected_callback_on_thread(userData, useCapture, callbackfunc, targetThread) {
      if (!navigator.getGamepads && !navigator.webkitGetGamepads) return -1;
      registerGamepadEventCallback(2, userData, useCapture, callbackfunc, 27, "gamepaddisconnected", targetThread);
      return 0;
    }

  
  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      checkStackCookie();
      if (e instanceof WebAssembly.RuntimeError) {
        if (_emscripten_stack_get_current() <= 0) {
          err('Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to ' + 65536 + ')');
        }
      }
      quit_(1, e);
    }
  
  
  function _proc_exit(code) {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        if (Module['onExit']) Module['onExit'](code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    }
  /** @suppress {duplicate } */
  /** @param {boolean|number=} implicit */
  function exitJS(status, implicit) {
      EXITSTATUS = status;
  
      checkUnflushedContent();
  
      // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
      if (keepRuntimeAlive() && !implicit) {
        var msg = 'program exited (with status: ' + status + '), but keepRuntimeAlive() is set (counter=' + runtimeKeepaliveCounter + ') due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)';
        err(msg);
      }
  
      _proc_exit(status);
    }
  var _exit = exitJS;
  
  function maybeExit() {
      if (!keepRuntimeAlive()) {
        try {
          _exit(EXITSTATUS);
        } catch (e) {
          handleException(e);
        }
      }
    }
  function callUserCallback(func) {
      if (ABORT) {
        err('user callback triggered after runtime exited or application aborted.  Ignoring.');
        return;
      }
      try {
        func();
        maybeExit();
      } catch (e) {
        handleException(e);
      }
    }
  
  /** @param {number=} timeout */
  function safeSetTimeout(func, timeout) {
      
      return setTimeout(() => {
        
        callUserCallback(func);
      }, timeout);
    }
  
  
  
  var Browser = {mainLoop:{running:false,scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function() {
          Browser.mainLoop.scheduler = null;
          // Incrementing this signals the previous main loop that it's now become old, and it must return.
          Browser.mainLoop.currentlyRunningMainloop++;
        },resume:function() {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          // do not set timing and call scheduler, we will do it on the next lines
          setMainLoop(func, 0, false, Browser.mainLoop.arg, true);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function() {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function(func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          callUserCallback(func);
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function() {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          err("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? err("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject == 'undefined') {
          err("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = () => {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = /** @type {!HTMLCanvasElement} */ (document.createElement('canvas'));
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            preloadedImages[name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = (event) => {
            out('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            preloadedAudios[name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            preloadedAudios[name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', () => finish(audio), false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              err('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            safeSetTimeout(() => {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      (() => {});
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   (() => {}); // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", (ev) => {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },handledByPreloadPlugin:function(byteArray, fullname, finish, onerror) {
        // Ensure plugins are ready.
        Browser.init();
  
        var handled = false;
        Module['preloadPlugins'].forEach((plugin) => {
          if (handled) return;
          if (plugin['canHandle'](fullname)) {
            plugin['handle'](byteArray, fullname, finish, onerror);
            handled = true;
          }
        });
        return handled;
      },createContext:function(/** @type {HTMLCanvasElement} */ canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false,
            majorVersion: 1,
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          // This check of existence of GL is here to satisfy Closure compiler, which yells if variable GL is referenced below but GL object is not
          // actually compiled in because application is not doing any GL operations. TODO: Ideally if GL is not being used, this function
          // Browser.createContext() should not even be emitted.
          if (typeof GL != 'undefined') {
            contextHandle = GL.createContext(canvas, contextAttributes);
            if (contextHandle) {
              ctx = GL.getContext(contextHandle).GLctx;
            }
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx == 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach((callback) => callback());
          Browser.init();
        }
        return ctx;
      },destroyContext:function(canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function(lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer == 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas == 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = Browser.exitFullscreen;
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) {
              Browser.setFullscreenCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          } else {
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) {
              Browser.setWindowedCanvasSize();
            } else {
              Browser.updateCanvasDimensions(canvas);
            }
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? () => canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? () => canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) : null);
  
        canvasContainer.requestFullscreen();
      },requestFullScreen:function() {
        abort('Module.requestFullScreen has been replaced by Module.requestFullscreen (without a capital S)');
      },exitFullscreen:function() {
        // This is workaround for chrome. Trying to exit from fullscreen
        // not in fullscreen state will cause "TypeError: Document not active"
        // in chrome. See https://github.com/emscripten-core/emscripten/pull/8236
        if (!Browser.isFullscreen) {
          return false;
        }
  
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['msExitFullscreen'] ||
                  document['webkitCancelFullScreen'] ||
            (() => {});
        CFS.apply(document, []);
        return true;
      },nextRAF:0,fakeRequestAnimationFrame:function(func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function(func) {
        if (typeof requestAnimationFrame == 'function') {
          requestAnimationFrame(func);
          return;
        }
        var RAF = Browser.fakeRequestAnimationFrame;
        RAF(func);
      },safeSetTimeout:function(func, timeout) {
        // Legacy function, this is used by the SDL2 port so we need to keep it
        // around at least until that is updated.
        // See https://github.com/libsdl-org/SDL/pull/6304
        return safeSetTimeout(func, timeout);
      },safeRequestAnimationFrame:function(func) {
        
        return Browser.requestAnimationFrame(() => {
          
          callUserCallback(func);
        });
      },getMimetype:function(name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function(func) {
        if (!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function(event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function(event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function(event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            // 3 lines make up a step
            delta = event.detail / 3;
            break;
          case 'mousewheel':
            // 120 units make up a step
            delta = event.wheelDelta / 120;
            break;
          case 'wheel':
            delta = event.deltaY
            switch (event.deltaMode) {
              case 0:
                // DOM_DELTA_PIXEL: 100 pixels make up a step
                delta /= 100;
                break;
              case 1:
                // DOM_DELTA_LINE: 3 lines make up a step
                delta /= 3;
                break;
              case 2:
                // DOM_DELTA_PAGE: A page makes up 80 steps
                delta *= 80;
                break;
              default:
                throw 'unrecognized mouse wheel delta mode: ' + event.deltaMode;
            }
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function(event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX != 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY != 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX != 'undefined') && (typeof scrollY != 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },resizeListeners:[],updateResizeListeners:function() {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach((listener) => listener(canvas.width, canvas.height));
      },setCanvasSize:function(width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function() {
        // check if SDL is available
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)] = flags;
        }
        Browser.updateCanvasDimensions(Module['canvas']);
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function(canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        err('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (!Browser.mainLoop.running) {
        
        Browser.mainLoop.running = true;
      }
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate == 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          /** @param {Event} event */
          var Browser_setImmediate_messageHandler = (event) => {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          };
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = /** @type{function(function(): ?, ...?): number} */(function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          })
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  
  
    /**
     * @param {number=} arg
     * @param {boolean=} noSetTiming
     */
  function setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop, arg, noSetTiming) {
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = browserIterationFunc;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
      function checkIsRunning() {
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) {
          
          return false;
        }
        return true;
      }
  
      // We create the loop runner here but it is not actually running until
      // _emscripten_set_main_loop_timing is called (which might happen a
      // later time).  This member signifies that the current runner has not
      // yet been started so that we can call runtimeKeepalivePush when it
      // gets it timing set for the first time.
      Browser.mainLoop.running = false;
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          out('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (!checkIsRunning()) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (!checkIsRunning()) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          warnOnce('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (!checkIsRunning()) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL == 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'unwind';
      }
    }
  
  
  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop) {
      var browserIterationFunc = getWasmTableEntry(func);
      setMainLoop(browserIterationFunc, fps, simulateInfiniteLoop);
    }

  
  
  
  
  function registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1696 );
  
      target = findEventTarget(target);
  
      var touchEventHandlerFunc = function(e) {
        assert(e);
        var t, touches = {}, et = e.touches;
        // To ease marshalling different kinds of touches that browser reports (all touches are listed in e.touches, 
        // only changed touches in e.changedTouches, and touches on target at a.targetTouches), mark a boolean in
        // each Touch object so that we can later loop only once over all touches we see to marshall over to Wasm.
  
        for (var i = 0; i < et.length; ++i) {
          t = et[i];
          // Browser might recycle the generated Touch objects between each frame (Firefox on Android), so reset any
          // changed/target states we may have set from previous frame.
          t.isChanged = t.onTarget = 0;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the changedTouches list.
        for (var i = 0; i < e.changedTouches.length; ++i) {
          t = e.changedTouches[i];
          t.isChanged = 1;
          touches[t.identifier] = t;
        }
        // Mark which touches are part of the targetTouches list.
        for (var i = 0; i < e.targetTouches.length; ++i) {
          touches[e.targetTouches[i].identifier].onTarget = 1;
        }
  
        var touchEvent = JSEvents.touchEvent;
        HEAPF64[((touchEvent)>>3)] = e.timeStamp;
        var idx = touchEvent>>2; // Pre-shift the ptr to index to HEAP32 to save code size
        HEAP32[idx + 3] = e.ctrlKey;
        HEAP32[idx + 4] = e.shiftKey;
        HEAP32[idx + 5] = e.altKey;
        HEAP32[idx + 6] = e.metaKey;
        idx += 7; // Advance to the start of the touch array.
        var targetRect = getBoundingClientRect(target);
        var numTouches = 0;
        for (var i in touches) {
          t = touches[i];
          HEAP32[idx + 0] = t.identifier;
          HEAP32[idx + 1] = t.screenX;
          HEAP32[idx + 2] = t.screenY;
          HEAP32[idx + 3] = t.clientX;
          HEAP32[idx + 4] = t.clientY;
          HEAP32[idx + 5] = t.pageX;
          HEAP32[idx + 6] = t.pageY;
          HEAP32[idx + 7] = t.isChanged;
          HEAP32[idx + 8] = t.onTarget;
          HEAP32[idx + 9] = t.clientX - targetRect.left;
          HEAP32[idx + 10] = t.clientY - targetRect.top;
  
          idx += 13;
  
          if (++numTouches > 31) {
            break;
          }
        }
        HEAP32[(((touchEvent)+(8))>>2)] = numTouches;
  
        if (getWasmTableEntry(callbackfunc)(eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }
  function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }


  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doReadv(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset !== 'undefined') {
          offset += curr;
        }
      }
      return ret;
    }
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  function convertI32PairToI53Checked(lo, hi) {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  
  
  
  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
  try {
  
      var offset = convertI32PairToI53Checked(offset_low, offset_high); if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  function doWritev(stream, iov, iovcnt, offset) {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8,ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (typeof offset !== 'undefined') {
          offset += curr;
        }
      }
      return ret;
    }
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }





















































  
  
  
  /** @constructor */
  function GLFW_Window(id, width, height, title, monitor, share) {
        this.id = id;
        this.x = 0;
        this.y = 0;
        this.fullscreen = false; // Used to determine if app in fullscreen mode
        this.storedX = 0; // Used to store X before fullscreen
        this.storedY = 0; // Used to store Y before fullscreen
        this.width = width;
        this.height = height;
        this.storedWidth = width; // Used to store width before fullscreen
        this.storedHeight = height; // Used to store height before fullscreen
        this.title = title;
        this.monitor = monitor;
        this.share = share;
        this.attributes = GLFW.hints;
        this.inputModes = {
          0x00033001:0x00034001, // GLFW_CURSOR (GLFW_CURSOR_NORMAL)
          0x00033002:0, // GLFW_STICKY_KEYS
          0x00033003:0, // GLFW_STICKY_MOUSE_BUTTONS
        };
        this.buttons = 0;
        this.keys = new Array();
        this.domKeys = new Array();
        this.shouldClose = 0;
        this.title = null;
        this.windowPosFunc = null; // GLFWwindowposfun
        this.windowSizeFunc = null; // GLFWwindowsizefun
        this.windowCloseFunc = null; // GLFWwindowclosefun
        this.windowRefreshFunc = null; // GLFWwindowrefreshfun
        this.windowFocusFunc = null; // GLFWwindowfocusfun
        this.windowIconifyFunc = null; // GLFWwindowiconifyfun
        this.windowMaximizeFunc = null; // GLFWwindowmaximizefun
        this.framebufferSizeFunc = null; // GLFWframebuffersizefun
        this.windowContentScaleFunc = null; // GLFWwindowcontentscalefun
        this.mouseButtonFunc = null; // GLFWmousebuttonfun
        this.cursorPosFunc = null; // GLFWcursorposfun
        this.cursorEnterFunc = null; // GLFWcursorenterfun
        this.scrollFunc = null; // GLFWscrollfun
        this.dropFunc = null; // GLFWdropfun
        this.keyFunc = null; // GLFWkeyfun
        this.charFunc = null; // GLFWcharfun
        this.userptr = null;
      }
  
  
  
  
  
  var GLFW = {WindowFromId:function(id) {
        if (id <= 0 || !GLFW.windows) return null;
        return GLFW.windows[id - 1];
      },joystickFunc:null,errorFunc:null,monitorFunc:null,active:null,scale:null,windows:null,monitors:null,monitorString:null,versionString:null,initialTime:null,extensions:null,hints:null,defaultHints:{131073:0,131074:0,131075:1,131076:1,131077:1,131082:0,135169:8,135170:8,135171:8,135172:8,135173:24,135174:8,135175:0,135176:0,135177:0,135178:0,135179:0,135180:0,135181:0,135182:0,135183:0,139265:196609,139266:1,139267:0,139268:0,139269:0,139270:0,139271:0,139272:0,139276:0},DOMToGLFWKeyCode:function(keycode) {
        switch (keycode) {
          // these keycodes are only defined for GLFW3, assume they are the same for GLFW2
          case 0x20:return 32; // DOM_VK_SPACE -> GLFW_KEY_SPACE
          case 0xDE:return 39; // DOM_VK_QUOTE -> GLFW_KEY_APOSTROPHE
          case 0xBC:return 44; // DOM_VK_COMMA -> GLFW_KEY_COMMA
          case 0xAD:return 45; // DOM_VK_HYPHEN_MINUS -> GLFW_KEY_MINUS
          case 0xBD:return 45; // DOM_VK_MINUS -> GLFW_KEY_MINUS
          case 0xBE:return 46; // DOM_VK_PERIOD -> GLFW_KEY_PERIOD
          case 0xBF:return 47; // DOM_VK_SLASH -> GLFW_KEY_SLASH
          case 0x30:return 48; // DOM_VK_0 -> GLFW_KEY_0
          case 0x31:return 49; // DOM_VK_1 -> GLFW_KEY_1
          case 0x32:return 50; // DOM_VK_2 -> GLFW_KEY_2
          case 0x33:return 51; // DOM_VK_3 -> GLFW_KEY_3
          case 0x34:return 52; // DOM_VK_4 -> GLFW_KEY_4
          case 0x35:return 53; // DOM_VK_5 -> GLFW_KEY_5
          case 0x36:return 54; // DOM_VK_6 -> GLFW_KEY_6
          case 0x37:return 55; // DOM_VK_7 -> GLFW_KEY_7
          case 0x38:return 56; // DOM_VK_8 -> GLFW_KEY_8
          case 0x39:return 57; // DOM_VK_9 -> GLFW_KEY_9
          case 0x3B:return 59; // DOM_VK_SEMICOLON -> GLFW_KEY_SEMICOLON
          case 0x3D:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0xBB:return 61; // DOM_VK_EQUALS -> GLFW_KEY_EQUAL
          case 0x41:return 65; // DOM_VK_A -> GLFW_KEY_A
          case 0x42:return 66; // DOM_VK_B -> GLFW_KEY_B
          case 0x43:return 67; // DOM_VK_C -> GLFW_KEY_C
          case 0x44:return 68; // DOM_VK_D -> GLFW_KEY_D
          case 0x45:return 69; // DOM_VK_E -> GLFW_KEY_E
          case 0x46:return 70; // DOM_VK_F -> GLFW_KEY_F
          case 0x47:return 71; // DOM_VK_G -> GLFW_KEY_G
          case 0x48:return 72; // DOM_VK_H -> GLFW_KEY_H
          case 0x49:return 73; // DOM_VK_I -> GLFW_KEY_I
          case 0x4A:return 74; // DOM_VK_J -> GLFW_KEY_J
          case 0x4B:return 75; // DOM_VK_K -> GLFW_KEY_K
          case 0x4C:return 76; // DOM_VK_L -> GLFW_KEY_L
          case 0x4D:return 77; // DOM_VK_M -> GLFW_KEY_M
          case 0x4E:return 78; // DOM_VK_N -> GLFW_KEY_N
          case 0x4F:return 79; // DOM_VK_O -> GLFW_KEY_O
          case 0x50:return 80; // DOM_VK_P -> GLFW_KEY_P
          case 0x51:return 81; // DOM_VK_Q -> GLFW_KEY_Q
          case 0x52:return 82; // DOM_VK_R -> GLFW_KEY_R
          case 0x53:return 83; // DOM_VK_S -> GLFW_KEY_S
          case 0x54:return 84; // DOM_VK_T -> GLFW_KEY_T
          case 0x55:return 85; // DOM_VK_U -> GLFW_KEY_U
          case 0x56:return 86; // DOM_VK_V -> GLFW_KEY_V
          case 0x57:return 87; // DOM_VK_W -> GLFW_KEY_W
          case 0x58:return 88; // DOM_VK_X -> GLFW_KEY_X
          case 0x59:return 89; // DOM_VK_Y -> GLFW_KEY_Y
          case 0x5a:return 90; // DOM_VK_Z -> GLFW_KEY_Z
          case 0xDB:return 91; // DOM_VK_OPEN_BRACKET -> GLFW_KEY_LEFT_BRACKET
          case 0xDC:return 92; // DOM_VK_BACKSLASH -> GLFW_KEY_BACKSLASH
          case 0xDD:return 93; // DOM_VK_CLOSE_BRACKET -> GLFW_KEY_RIGHT_BRACKET
          case 0xC0:return 96; // DOM_VK_BACK_QUOTE -> GLFW_KEY_GRAVE_ACCENT
  
          case 0x1B:return 256; // DOM_VK_ESCAPE -> GLFW_KEY_ESCAPE
          case 0x0D:return 257; // DOM_VK_RETURN -> GLFW_KEY_ENTER
          case 0x09:return 258; // DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x08:return 259; // DOM_VK_BACK -> GLFW_KEY_BACKSPACE
          case 0x2D:return 260; // DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 0x2E:return 261; // DOM_VK_DELETE -> GLFW_KEY_DELETE
          case 0x27:return 262; // DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x25:return 263; // DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x28:return 264; // DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x26:return 265; // DOM_VK_UP -> GLFW_KEY_UP
          case 0x21:return 266; // DOM_VK_PAGE_UP -> GLFW_KEY_PAGE_UP
          case 0x22:return 267; // DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGE_DOWN
          case 0x24:return 268; // DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23:return 269; // DOM_VK_END -> GLFW_KEY_END
          case 0x14:return 280; // DOM_VK_CAPS_LOCK -> GLFW_KEY_CAPS_LOCK
          case 0x91:return 281; // DOM_VK_SCROLL_LOCK -> GLFW_KEY_SCROLL_LOCK
          case 0x90:return 282; // DOM_VK_NUM_LOCK -> GLFW_KEY_NUM_LOCK
          case 0x2C:return 283; // DOM_VK_SNAPSHOT -> GLFW_KEY_PRINT_SCREEN
          case 0x13:return 284; // DOM_VK_PAUSE -> GLFW_KEY_PAUSE
          case 0x70:return 290; // DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71:return 291; // DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72:return 292; // DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73:return 293; // DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74:return 294; // DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75:return 295; // DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76:return 296; // DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77:return 297; // DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78:return 298; // DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79:return 299; // DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7A:return 300; // DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7B:return 301; // DOM_VK_F12 -> GLFW_KEY_F12
          case 0x7C:return 302; // DOM_VK_F13 -> GLFW_KEY_F13
          case 0x7D:return 303; // DOM_VK_F14 -> GLFW_KEY_F14
          case 0x7E:return 304; // DOM_VK_F15 -> GLFW_KEY_F15
          case 0x7F:return 305; // DOM_VK_F16 -> GLFW_KEY_F16
          case 0x80:return 306; // DOM_VK_F17 -> GLFW_KEY_F17
          case 0x81:return 307; // DOM_VK_F18 -> GLFW_KEY_F18
          case 0x82:return 308; // DOM_VK_F19 -> GLFW_KEY_F19
          case 0x83:return 309; // DOM_VK_F20 -> GLFW_KEY_F20
          case 0x84:return 310; // DOM_VK_F21 -> GLFW_KEY_F21
          case 0x85:return 311; // DOM_VK_F22 -> GLFW_KEY_F22
          case 0x86:return 312; // DOM_VK_F23 -> GLFW_KEY_F23
          case 0x87:return 313; // DOM_VK_F24 -> GLFW_KEY_F24
          case 0x88:return 314; // 0x88 (not used?) -> GLFW_KEY_F25
          case 0x60:return 320; // DOM_VK_NUMPAD0 -> GLFW_KEY_KP_0
          case 0x61:return 321; // DOM_VK_NUMPAD1 -> GLFW_KEY_KP_1
          case 0x62:return 322; // DOM_VK_NUMPAD2 -> GLFW_KEY_KP_2
          case 0x63:return 323; // DOM_VK_NUMPAD3 -> GLFW_KEY_KP_3
          case 0x64:return 324; // DOM_VK_NUMPAD4 -> GLFW_KEY_KP_4
          case 0x65:return 325; // DOM_VK_NUMPAD5 -> GLFW_KEY_KP_5
          case 0x66:return 326; // DOM_VK_NUMPAD6 -> GLFW_KEY_KP_6
          case 0x67:return 327; // DOM_VK_NUMPAD7 -> GLFW_KEY_KP_7
          case 0x68:return 328; // DOM_VK_NUMPAD8 -> GLFW_KEY_KP_8
          case 0x69:return 329; // DOM_VK_NUMPAD9 -> GLFW_KEY_KP_9
          case 0x6E:return 330; // DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F:return 331; // DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x6A:return 332; // DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6D:return 333; // DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6B:return 334; // DOM_VK_ADD -> GLFW_KEY_KP_ADD
          // case 0x0D:return 335; // DOM_VK_RETURN -> GLFW_KEY_KP_ENTER (DOM_KEY_LOCATION_RIGHT)
          // case 0x61:return 336; // DOM_VK_EQUALS -> GLFW_KEY_KP_EQUAL (DOM_KEY_LOCATION_RIGHT)
          case 0x10:return 340; // DOM_VK_SHIFT -> GLFW_KEY_LEFT_SHIFT
          case 0x11:return 341; // DOM_VK_CONTROL -> GLFW_KEY_LEFT_CONTROL
          case 0x12:return 342; // DOM_VK_ALT -> GLFW_KEY_LEFT_ALT
          case 0x5B:return 343; // DOM_VK_WIN -> GLFW_KEY_LEFT_SUPER
          // case 0x10:return 344; // DOM_VK_SHIFT -> GLFW_KEY_RIGHT_SHIFT (DOM_KEY_LOCATION_RIGHT)
          // case 0x11:return 345; // DOM_VK_CONTROL -> GLFW_KEY_RIGHT_CONTROL (DOM_KEY_LOCATION_RIGHT)
          // case 0x12:return 346; // DOM_VK_ALT -> GLFW_KEY_RIGHT_ALT (DOM_KEY_LOCATION_RIGHT)
          // case 0x5B:return 347; // DOM_VK_WIN -> GLFW_KEY_RIGHT_SUPER (DOM_KEY_LOCATION_RIGHT)
          case 0x5D:return 348; // DOM_VK_CONTEXT_MENU -> GLFW_KEY_MENU
          // XXX: GLFW_KEY_WORLD_1, GLFW_KEY_WORLD_2 what are these?
          default:return -1; // GLFW_KEY_UNKNOWN
        };
      },getModBits:function(win) {
        var mod = 0;
        if (win.keys[340]) mod |= 0x0001; // GLFW_MOD_SHIFT
        if (win.keys[341]) mod |= 0x0002; // GLFW_MOD_CONTROL
        if (win.keys[342]) mod |= 0x0004; // GLFW_MOD_ALT
        if (win.keys[343]) mod |= 0x0008; // GLFW_MOD_SUPER
        // add caps and num lock keys? only if lock_key_mod is set
        return mod;
      },onKeyPress:function(event) {
        if (!GLFW.active || !GLFW.active.charFunc) return;
        if (event.ctrlKey || event.metaKey) return;
  
        // correct unicode charCode is only available with onKeyPress event
        var charCode = event.charCode;
        if (charCode == 0 || (charCode >= 0x00 && charCode <= 0x1F)) return;
  
        getWasmTableEntry(GLFW.active.charFunc)(GLFW.active.id, charCode);
      },onKeyChanged:function(keyCode, status) {
        if (!GLFW.active) return;
  
        var key = GLFW.DOMToGLFWKeyCode(keyCode);
        if (key == -1) return;
  
        var repeat = status && GLFW.active.keys[key];
        GLFW.active.keys[key] = status;
        GLFW.active.domKeys[keyCode] = status;
  
        if (GLFW.active.keyFunc) {
          if (repeat) status = 2; // GLFW_REPEAT
          getWasmTableEntry(GLFW.active.keyFunc)(GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
        }
      },onGamepadConnected:function(event) {
        GLFW.refreshJoysticks();
      },onGamepadDisconnected:function(event) {
        GLFW.refreshJoysticks();
      },onKeydown:function(event) {
        GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
  
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function(event) {
        GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
      },onBlur:function(event) {
        if (!GLFW.active) return;
  
        for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
          if (GLFW.active.domKeys[i]) {
            GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
          }
        }
      },onMousemove:function(event) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"] || !GLFW.active.cursorPosFunc) return;
  
        if (GLFW.active.cursorPosFunc) {
          getWasmTableEntry(GLFW.active.cursorPosFunc)(GLFW.active.id, Browser.mouseX, Browser.mouseY);
        }
      },DOMToGLFWMouseButton:function(event) {
        // DOM and glfw have different button codes.
        // See http://www.w3schools.com/jsref/event_button.asp.
        var eventButton = event['button'];
        if (eventButton > 0) {
          if (eventButton == 1) {
            eventButton = 2;
          } else {
            eventButton = 1;
          }
        }
        return eventButton;
      },onMouseenter:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"]) return;
  
        if (GLFW.active.cursorEnterFunc) {
          getWasmTableEntry(GLFW.active.cursorEnterFunc)(GLFW.active.id, 1);
        }
      },onMouseleave:function(event) {
        if (!GLFW.active) return;
  
        if (event.target != Module["canvas"]) return;
  
        if (GLFW.active.cursorEnterFunc) {
          getWasmTableEntry(GLFW.active.cursorEnterFunc)(GLFW.active.id, 0);
        }
      },onMouseButtonChanged:function(event, status) {
        if (!GLFW.active) return;
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) return;
  
        var eventButton = GLFW.DOMToGLFWMouseButton(event);
  
        if (status == 1) { // GLFW_PRESS
          GLFW.active.buttons |= (1 << eventButton);
          try {
            event.target.setCapture();
          } catch (e) {}
        } else {  // GLFW_RELEASE
          GLFW.active.buttons &= ~(1 << eventButton);
        }
  
        if (GLFW.active.mouseButtonFunc) {
          getWasmTableEntry(GLFW.active.mouseButtonFunc)(GLFW.active.id, eventButton, status, GLFW.getModBits(GLFW.active));
        }
      },onMouseButtonDown:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 1); // GLFW_PRESS
      },onMouseButtonUp:function(event) {
        if (!GLFW.active) return;
        GLFW.onMouseButtonChanged(event, 0); // GLFW_RELEASE
      },onMouseWheel:function(event) {
        // Note the minus sign that flips browser wheel direction (positive direction scrolls page down) to native wheel direction (positive direction is mouse wheel up)
        var delta = -Browser.getMouseWheelDelta(event);
        delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
        GLFW.wheelPos += delta;
  
        if (!GLFW.active || !GLFW.active.scrollFunc || event.target != Module['canvas']) return;
        var sx = 0;
        var sy = delta;
        if (event.type == 'mousewheel') {
          sx = event.wheelDeltaX;
        } else {
          sx = event.deltaX;
        }
  
        getWasmTableEntry(GLFW.active.scrollFunc)(GLFW.active.id, sx, sy);
  
        event.preventDefault();
      },onCanvasResize:function(width, height) {
        if (!GLFW.active) return;
  
        var resizeNeeded = true;
  
        // If the client is requesting fullscreen mode
        if (document["fullscreen"] || document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          GLFW.active.storedX = GLFW.active.x;
          GLFW.active.storedY = GLFW.active.y;
          GLFW.active.storedWidth = GLFW.active.width;
          GLFW.active.storedHeight = GLFW.active.height;
          GLFW.active.x = GLFW.active.y = 0;
          GLFW.active.width = screen.width;
          GLFW.active.height = screen.height;
          GLFW.active.fullscreen = true;
  
        // If the client is reverting from fullscreen mode
        } else if (GLFW.active.fullscreen == true) {
          GLFW.active.x = GLFW.active.storedX;
          GLFW.active.y = GLFW.active.storedY;
          GLFW.active.width = GLFW.active.storedWidth;
          GLFW.active.height = GLFW.active.storedHeight;
          GLFW.active.fullscreen = false;
  
        // If the width/height values do not match current active window sizes
        } else if (GLFW.active.width != width || GLFW.active.height != height) {
            GLFW.active.width = width;
            GLFW.active.height = height;
        } else {
          resizeNeeded = false;
        }
  
        // If any of the above conditions were true, we need to resize the canvas
        if (resizeNeeded) {
          // resets the canvas size to counter the aspect preservation of Browser.updateCanvasDimensions
          Browser.setCanvasSize(GLFW.active.width, GLFW.active.height, true);
          // TODO: Client dimensions (clientWidth/clientHeight) vs pixel dimensions (width/height) of
          // the canvas should drive window and framebuffer size respectfully.
          GLFW.onWindowSizeChanged();
          GLFW.onFramebufferSizeChanged();
        }
      },onWindowSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (GLFW.active.windowSizeFunc) {
          getWasmTableEntry(GLFW.active.windowSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
        }
      },onFramebufferSizeChanged:function() {
        if (!GLFW.active) return;
  
        if (GLFW.active.framebufferSizeFunc) {
          getWasmTableEntry(GLFW.active.framebufferSizeFunc)(GLFW.active.id, GLFW.active.width, GLFW.active.height);
        }
      },onWindowContentScaleChanged:function(scale) {
        GLFW.scale = scale;
        if (!GLFW.active) return;
  
        if (GLFW.active.windowContentScaleFunc) {
          getWasmTableEntry(GLFW.active.windowContentScaleFunc)(GLFW.active.id, GLFW.scale, GLFW.scale);
        }
      },getTime:function() {
        return _emscripten_get_now() / 1000;
      },setWindowTitle:function(winid, title) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        win.title = UTF8ToString(title);
        if (GLFW.active.id == win.id) {
          document.title = win.title;
        }
      },setJoystickCallback:function(cbfun) {
        GLFW.joystickFunc = cbfun;
        GLFW.refreshJoysticks();
      },joys:{},lastGamepadState:[],lastGamepadStateFrame:null,refreshJoysticks:function() {
        // Produce a new Gamepad API sample if we are ticking a new game frame, or if not using emscripten_set_main_loop() at all to drive animation.
        if (Browser.mainLoop.currentFrameNumber !== GLFW.lastGamepadStateFrame || !Browser.mainLoop.currentFrameNumber) {
          GLFW.lastGamepadState = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);
          GLFW.lastGamepadStateFrame = Browser.mainLoop.currentFrameNumber;
  
          for (var joy = 0; joy < GLFW.lastGamepadState.length; ++joy) {
            var gamepad = GLFW.lastGamepadState[joy];
  
            if (gamepad) {
              if (!GLFW.joys[joy]) {
                out('glfw joystick connected:',joy);
                GLFW.joys[joy] = {
                  id: stringToNewUTF8(gamepad.id),
                  buttonsCount: gamepad.buttons.length,
                  axesCount: gamepad.axes.length,
                  buttons: _malloc(gamepad.buttons.length),
                  axes: _malloc(gamepad.axes.length*4),
                };
  
                if (GLFW.joystickFunc) {
                  getWasmTableEntry(GLFW.joystickFunc)(joy, 0x00040001); // GLFW_CONNECTED
                }
              }
  
              var data = GLFW.joys[joy];
  
              for (var i = 0; i < gamepad.buttons.length;  ++i) {
                HEAP8[((data.buttons + i)>>0)] = gamepad.buttons[i].pressed;
              }
  
              for (var i = 0; i < gamepad.axes.length; ++i) {
                HEAPF32[((data.axes + i*4)>>2)] = gamepad.axes[i];
              }
            } else {
              if (GLFW.joys[joy]) {
                out('glfw joystick disconnected',joy);
  
                if (GLFW.joystickFunc) {
                  getWasmTableEntry(GLFW.joystickFunc)(joy, 0x00040002); // GLFW_DISCONNECTED
                }
  
                _free(GLFW.joys[joy].id);
                _free(GLFW.joys[joy].buttons);
                _free(GLFW.joys[joy].axes);
  
                delete GLFW.joys[joy];
              }
            }
          }
        }
      },setKeyCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.keyFunc;
        win.keyFunc = cbfun;
        return prevcbfun;
      },setCharCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.charFunc;
        win.charFunc = cbfun;
        return prevcbfun;
      },setMouseButtonCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.mouseButtonFunc;
        win.mouseButtonFunc = cbfun;
        return prevcbfun;
      },setCursorPosCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.cursorPosFunc;
        win.cursorPosFunc = cbfun;
        return prevcbfun;
      },setScrollCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.scrollFunc;
        win.scrollFunc = cbfun;
        return prevcbfun;
      },setDropCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.dropFunc;
        win.dropFunc = cbfun;
        return prevcbfun;
      },onDrop:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
        if (!event.dataTransfer || !event.dataTransfer.files || event.dataTransfer.files.length == 0) return;
  
        event.preventDefault();
  
        var filenames = _malloc(event.dataTransfer.files.length*4);
        var filenamesArray = [];
        var count = event.dataTransfer.files.length;
  
        // Read and save the files to emscripten's FS
        var written = 0;
        var drop_dir = '.glfw_dropped_files';
        FS.createPath('/', drop_dir);
  
        function save(file) {
          var path = '/' + drop_dir + '/' + file.name.replace(/\//g, '_');
          var reader = new FileReader();
          reader.onloadend = (e) => {
            if (reader.readyState != 2) { // not DONE
              ++written;
              out('failed to read dropped file: '+file.name+': '+reader.error);
              return;
            }
  
            var data = e.target.result;
            FS.writeFile(path, new Uint8Array(data));
            if (++written === count) {
              getWasmTableEntry(GLFW.active.dropFunc)(GLFW.active.id, count, filenames);
  
              for (var i = 0; i < filenamesArray.length; ++i) {
                _free(filenamesArray[i]);
              }
              _free(filenames);
            }
          };
          reader.readAsArrayBuffer(file);
  
          var filename = stringToNewUTF8(path);
          filenamesArray.push(filename);
          HEAPU32[((filenames + i*4)>>2)] = filename;
        }
  
        for (var i = 0; i < count; ++i) {
          save(event.dataTransfer.files[i]);
        }
  
        return false;
      },onDragover:function(event) {
        if (!GLFW.active || !GLFW.active.dropFunc) return;
  
        event.preventDefault();
        return false;
      },setWindowSizeCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowSizeFunc;
        win.windowSizeFunc = cbfun;
  
        return prevcbfun;
      },setWindowCloseCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowCloseFunc;
        win.windowCloseFunc = cbfun;
        return prevcbfun;
      },setWindowRefreshCallback:function(winid, cbfun) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return null;
        var prevcbfun = win.windowRefreshFunc;
        win.windowRefreshFunc = cbfun;
        return prevcbfun;
      },onClickRequestPointerLock:function(e) {
        if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
          Module['canvas'].requestPointerLock();
          e.preventDefault();
        }
      },setInputMode:function(winid, mode, value) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        switch (mode) {
          case 0x00033001: { // GLFW_CURSOR
            switch (value) {
              case 0x00034001: { // GLFW_CURSOR_NORMAL
                win.inputModes[mode] = value;
                Module['canvas'].removeEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].exitPointerLock();
                break;
              }
              case 0x00034002: { // GLFW_CURSOR_HIDDEN
                out("glfwSetInputMode called with GLFW_CURSOR_HIDDEN value not implemented.");
                break;
              }
              case 0x00034003: { // GLFW_CURSOR_DISABLED
                win.inputModes[mode] = value;
                Module['canvas'].addEventListener('click', GLFW.onClickRequestPointerLock, true);
                Module['canvas'].requestPointerLock();
                break;
              }
              default: {
                out("glfwSetInputMode called with unknown value parameter value: " + value + ".");
                break;
              }
            }
            break;
          }
          case 0x00033002: { // GLFW_STICKY_KEYS
            out("glfwSetInputMode called with GLFW_STICKY_KEYS mode not implemented.");
            break;
          }
          case 0x00033003: { // GLFW_STICKY_MOUSE_BUTTONS
            out("glfwSetInputMode called with GLFW_STICKY_MOUSE_BUTTONS mode not implemented.");
            break;
          }
          case 0x00033004: { // GLFW_LOCK_KEY_MODS
            out("glfwSetInputMode called with GLFW_LOCK_KEY_MODS mode not implemented.");
            break;
          }
          case 0x000330005: { // GLFW_RAW_MOUSE_MOTION
            out("glfwSetInputMode called with GLFW_RAW_MOUSE_MOTION mode not implemented.");
            break;
          }
          default: {
            out("glfwSetInputMode called with unknown mode parameter value: " + mode + ".");
            break;
          }
        }
      },getKey:function(winid, key) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return win.keys[key];
      },getMouseButton:function(winid, button) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return 0;
        return (win.buttons & (1 << button)) > 0;
      },getCursorPos:function(winid, x, y) {
        HEAPF64[((x)>>3)] = Browser.mouseX;
        HEAPF64[((y)>>3)] = Browser.mouseY;
      },getMousePos:function(winid, x, y) {
        HEAP32[((x)>>2)] = Browser.mouseX;
        HEAP32[((y)>>2)] = Browser.mouseY;
      },setCursorPos:function(winid, x, y) {
      },getWindowPos:function(winid, x, y) {
        var wx = 0;
        var wy = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          wx = win.x;
          wy = win.y;
        }
  
        if (x) {
          HEAP32[((x)>>2)] = wx;
        }
  
        if (y) {
          HEAP32[((y)>>2)] = wy;
        }
      },setWindowPos:function(winid, x, y) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
        win.x = x;
        win.y = y;
      },getWindowSize:function(winid, width, height) {
        var ww = 0;
        var wh = 0;
  
        var win = GLFW.WindowFromId(winid);
        if (win) {
          ww = win.width;
          wh = win.height;
        }
  
        if (width) {
          HEAP32[((width)>>2)] = ww;
        }
  
        if (height) {
          HEAP32[((height)>>2)] = wh;
        }
      },setWindowSize:function(winid, width, height) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (GLFW.active.id == win.id) {
          if (width == screen.width && height == screen.height) {
            Browser.requestFullscreen();
          } else {
            Browser.exitFullscreen();
            Browser.setCanvasSize(width, height);
            win.width = width;
            win.height = height;
          }
        }
  
        if (win.windowSizeFunc) {
          getWasmTableEntry(win.windowSizeFunc)(win.id, width, height);
        }
      },createWindow:function(width, height, title, monitor, share) {
        var i, id;
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] !== null; i++) {
          // no-op
        }
        if (i > 0) throw "glfwCreateWindow only supports one window at time currently";
  
        // id for window
        id = i + 1;
  
        // not valid
        if (width <= 0 || height <= 0) return 0;
  
        if (monitor) {
          Browser.requestFullscreen();
        } else {
          Browser.setCanvasSize(width, height);
        }
  
        // Create context when there are no existing alive windows
        for (i = 0; i < GLFW.windows.length && GLFW.windows[i] == null; i++) {
          // no-op
        }
        var useWebGL = GLFW.hints[0x00022001] > 0; // Use WebGL when we are told to based on GLFW_CLIENT_API
        if (i == GLFW.windows.length) {
          if (useWebGL) {
            var contextAttributes = {
              antialias: (GLFW.hints[0x0002100D] > 1), // GLFW_SAMPLES
              depth: (GLFW.hints[0x00021005] > 0),     // GLFW_DEPTH_BITS
              stencil: (GLFW.hints[0x00021006] > 0),   // GLFW_STENCIL_BITS
              alpha: (GLFW.hints[0x00021004] > 0)      // GLFW_ALPHA_BITS
            }
            Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
          } else {
            Browser.init();
          }
        }
  
        // If context creation failed, do not return a valid window
        if (!Module.ctx && useWebGL) return 0;
  
        // Get non alive id
        var win = new GLFW_Window(id, width, height, title, monitor, share);
  
        // Set window to array
        if (id - 1 == GLFW.windows.length) {
          GLFW.windows.push(win);
        } else {
          GLFW.windows[id - 1] = win;
        }
  
        GLFW.active = win;
        return win.id;
      },destroyWindow:function(winid) {
        var win = GLFW.WindowFromId(winid);
        if (!win) return;
  
        if (win.windowCloseFunc) {
          getWasmTableEntry(win.windowCloseFunc)(win.id);
        }
  
        GLFW.windows[win.id - 1] = null;
        if (GLFW.active.id == win.id)
          GLFW.active = null;
  
        // Destroy context when no alive windows
        for (var i = 0; i < GLFW.windows.length; i++)
          if (GLFW.windows[i] !== null) return;
  
        Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
      },swapBuffers:function(winid) {
      },GLFW2ParamToGLFW3Param:function(param) {
        var table = {
          0x00030001:0, // GLFW_MOUSE_CURSOR
          0x00030002:0, // GLFW_STICKY_KEYS
          0x00030003:0, // GLFW_STICKY_MOUSE_BUTTONS
          0x00030004:0, // GLFW_SYSTEM_KEYS
          0x00030005:0, // GLFW_KEY_REPEAT
          0x00030006:0, // GLFW_AUTO_POLL_EVENTS
          0x00020001:0, // GLFW_OPENED
          0x00020002:0, // GLFW_ACTIVE
          0x00020003:0, // GLFW_ICONIFIED
          0x00020004:0, // GLFW_ACCELERATED
          0x00020005:0x00021001, // GLFW_RED_BITS
          0x00020006:0x00021002, // GLFW_GREEN_BITS
          0x00020007:0x00021003, // GLFW_BLUE_BITS
          0x00020008:0x00021004, // GLFW_ALPHA_BITS
          0x00020009:0x00021005, // GLFW_DEPTH_BITS
          0x0002000A:0x00021006, // GLFW_STENCIL_BITS
          0x0002000B:0x0002100F, // GLFW_REFRESH_RATE
          0x0002000C:0x00021007, // GLFW_ACCUM_RED_BITS
          0x0002000D:0x00021008, // GLFW_ACCUM_GREEN_BITS
          0x0002000E:0x00021009, // GLFW_ACCUM_BLUE_BITS
          0x0002000F:0x0002100A, // GLFW_ACCUM_ALPHA_BITS
          0x00020010:0x0002100B, // GLFW_AUX_BUFFERS
          0x00020011:0x0002100C, // GLFW_STEREO
          0x00020012:0, // GLFW_WINDOW_NO_RESIZE
          0x00020013:0x0002100D, // GLFW_FSAA_SAMPLES
          0x00020014:0x00022002, // GLFW_OPENGL_VERSION_MAJOR
          0x00020015:0x00022003, // GLFW_OPENGL_VERSION_MINOR
          0x00020016:0x00022006, // GLFW_OPENGL_FORWARD_COMPAT
          0x00020017:0x00022007, // GLFW_OPENGL_DEBUG_CONTEXT
          0x00020018:0x00022008, // GLFW_OPENGL_PROFILE
        };
        return table[param];
      }};
  function _glfwCreateWindow(width, height, title, monitor, share) {
      return GLFW.createWindow(width, height, title, monitor, share);
    }

  function _glfwDefaultWindowHints() {
      GLFW.hints = GLFW.defaultHints;
    }

  function _glfwDestroyWindow(winid) {
      return GLFW.destroyWindow(winid);
    }

  function _glfwGetPrimaryMonitor() {
      return 1;
    }

  function _glfwGetTime() {
      return GLFW.getTime() - GLFW.initialTime;
    }

  function _glfwGetVideoModes(monitor, count) {
      HEAP32[((count)>>2)] = 0;
      return 0;
    }

  function _emscripten_get_device_pixel_ratio() {
      return (typeof devicePixelRatio == 'number' && devicePixelRatio) || 1.0;
    }
  
  
  
  function _glfwInit() {
      if (GLFW.windows) return 1; // GL_TRUE
  
      GLFW.initialTime = GLFW.getTime();
      GLFW.hints = GLFW.defaultHints;
      GLFW.windows = new Array()
      GLFW.active = null;
      GLFW.scale  = _emscripten_get_device_pixel_ratio();
  
      window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("blur", GLFW.onBlur, true);
      // from https://stackoverflow.com/a/70514686/7484780 . maybe add this to browser.js?
      // no idea how to remove this listener.
      (function updatePixelRatio(){
        window.matchMedia("(resolution: " + window.devicePixelRatio + "dppx)")
        .addEventListener('change', updatePixelRatio, {once: true});
        GLFW.onWindowContentScaleChanged(_emscripten_get_device_pixel_ratio());
        })();
      Module["canvas"].addEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].addEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].addEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].addEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].addEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].addEventListener('dragover', GLFW.onDragover, true);
  
      Browser.resizeListeners.push((width, height) => {
         GLFW.onCanvasResize(width, height);
      });
      return 1; // GL_TRUE
    }

  function _glfwMakeContextCurrent(winid) {}

  function _glfwSetCharCallback(winid, cbfun) {
      return GLFW.setCharCallback(winid, cbfun);
    }

  function _glfwSetCursorEnterCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.cursorEnterFunc;
      win.cursorEnterFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetCursorPosCallback(winid, cbfun) {
      return GLFW.setCursorPosCallback(winid, cbfun);
    }

  function _glfwSetDropCallback(winid, cbfun) {
      return GLFW.setDropCallback(winid, cbfun);
    }

  function _glfwSetErrorCallback(cbfun) {
      var prevcbfun = GLFW.errorFunc;
      GLFW.errorFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetKeyCallback(winid, cbfun) {
      return GLFW.setKeyCallback(winid, cbfun);
    }

  function _glfwSetMouseButtonCallback(winid, cbfun) {
      return GLFW.setMouseButtonCallback(winid, cbfun);
    }

  function _glfwSetScrollCallback(winid, cbfun) {
      return GLFW.setScrollCallback(winid, cbfun);
    }

  function _glfwSetWindowFocusCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowFocusFunc;
      win.windowFocusFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowIconifyCallback(winid, cbfun) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return null;
      var prevcbfun = win.windowIconifyFunc;
      win.windowIconifyFunc = cbfun;
      return prevcbfun;
    }

  function _glfwSetWindowShouldClose(winid, value) {
      var win = GLFW.WindowFromId(winid);
      if (!win) return;
      win.shouldClose = value;
    }

  function _glfwSetWindowSizeCallback(winid, cbfun) {
      return GLFW.setWindowSizeCallback(winid, cbfun);
    }

  function _glfwSwapBuffers(winid) {
      GLFW.swapBuffers(winid);
    }

  
  function _glfwSwapInterval(interval) {
      interval = Math.abs(interval); // GLFW uses negative values to enable GLX_EXT_swap_control_tear, which we don't have, so just treat negative and positive the same.
      if (interval == 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 0);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, interval);
    }

  function _glfwTerminate() {
      window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
      window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
      window.removeEventListener("keydown", GLFW.onKeydown, true);
      window.removeEventListener("keypress", GLFW.onKeyPress, true);
      window.removeEventListener("keyup", GLFW.onKeyup, true);
      window.removeEventListener("blur", GLFW.onBlur, true);
      Module["canvas"].removeEventListener("touchmove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("touchstart", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("touchcancel", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("touchend", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
      Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
      Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
      Module["canvas"].removeEventListener('wheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mousewheel', GLFW.onMouseWheel, true);
      Module["canvas"].removeEventListener('mouseenter', GLFW.onMouseenter, true);
      Module["canvas"].removeEventListener('mouseleave', GLFW.onMouseleave, true);
      Module["canvas"].removeEventListener('drop', GLFW.onDrop, true);
      Module["canvas"].removeEventListener('dragover', GLFW.onDragover, true);
  
      Module["canvas"].width = Module["canvas"].height = 1;
      GLFW.windows = null;
      GLFW.active = null;
    }

  function _glfwWindowHint(target, hint) {
      GLFW.hints[target] = hint;
    }



  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
var GLctx;;
for (var i = 0; i < 32; ++i) tempFixedLengthArray.push(new Array(i));;
var miniTempWebGLFloatBuffersStorage = new Float32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  miniTempWebGLFloatBuffers[i] = miniTempWebGLFloatBuffersStorage.subarray(0, i+1);
  }
  ;
var miniTempWebGLIntBuffersStorage = new Int32Array(288);
  for (/**@suppress{duplicate}*/var i = 0; i < 288; ++i) {
  miniTempWebGLIntBuffers[i] = miniTempWebGLIntBuffersStorage.subarray(0, i+1);
  }
  ;

      // exports
      Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas) { Browser.requestFullscreen(lockPointer, resizeCanvas) };
      Module["requestFullScreen"] = function Module_requestFullScreen() { Browser.requestFullScreen() };
      Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
      Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
      Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
      Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
      Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() };
      Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
      var preloadedImages = {};
      var preloadedAudios = {};;
// include: base64Utils.js
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE == 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// end include: base64Utils.js
function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  "__assert_fail": ___assert_fail,
  "__cxa_throw": ___cxa_throw,
  "__syscall_fcntl64": ___syscall_fcntl64,
  "__syscall_getcwd": ___syscall_getcwd,
  "__syscall_ioctl": ___syscall_ioctl,
  "__syscall_openat": ___syscall_openat,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emscripten_get_now_is_monotonic": __emscripten_get_now_is_monotonic,
  "abort": _abort,
  "emscripten_date_now": _emscripten_date_now,
  "emscripten_get_element_css_size": _emscripten_get_element_css_size,
  "emscripten_get_gamepad_status": _emscripten_get_gamepad_status,
  "emscripten_get_now": _emscripten_get_now,
  "emscripten_get_num_gamepads": _emscripten_get_num_gamepads,
  "emscripten_glActiveTexture": _emscripten_glActiveTexture,
  "emscripten_glAttachShader": _emscripten_glAttachShader,
  "emscripten_glBeginQueryEXT": _emscripten_glBeginQueryEXT,
  "emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation,
  "emscripten_glBindBuffer": _emscripten_glBindBuffer,
  "emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer,
  "emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer,
  "emscripten_glBindTexture": _emscripten_glBindTexture,
  "emscripten_glBindVertexArrayOES": _emscripten_glBindVertexArrayOES,
  "emscripten_glBlendColor": _emscripten_glBlendColor,
  "emscripten_glBlendEquation": _emscripten_glBlendEquation,
  "emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate,
  "emscripten_glBlendFunc": _emscripten_glBlendFunc,
  "emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate,
  "emscripten_glBufferData": _emscripten_glBufferData,
  "emscripten_glBufferSubData": _emscripten_glBufferSubData,
  "emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus,
  "emscripten_glClear": _emscripten_glClear,
  "emscripten_glClearColor": _emscripten_glClearColor,
  "emscripten_glClearDepthf": _emscripten_glClearDepthf,
  "emscripten_glClearStencil": _emscripten_glClearStencil,
  "emscripten_glColorMask": _emscripten_glColorMask,
  "emscripten_glCompileShader": _emscripten_glCompileShader,
  "emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D,
  "emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D,
  "emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D,
  "emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D,
  "emscripten_glCreateProgram": _emscripten_glCreateProgram,
  "emscripten_glCreateShader": _emscripten_glCreateShader,
  "emscripten_glCullFace": _emscripten_glCullFace,
  "emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers,
  "emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers,
  "emscripten_glDeleteProgram": _emscripten_glDeleteProgram,
  "emscripten_glDeleteQueriesEXT": _emscripten_glDeleteQueriesEXT,
  "emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers,
  "emscripten_glDeleteShader": _emscripten_glDeleteShader,
  "emscripten_glDeleteTextures": _emscripten_glDeleteTextures,
  "emscripten_glDeleteVertexArraysOES": _emscripten_glDeleteVertexArraysOES,
  "emscripten_glDepthFunc": _emscripten_glDepthFunc,
  "emscripten_glDepthMask": _emscripten_glDepthMask,
  "emscripten_glDepthRangef": _emscripten_glDepthRangef,
  "emscripten_glDetachShader": _emscripten_glDetachShader,
  "emscripten_glDisable": _emscripten_glDisable,
  "emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray,
  "emscripten_glDrawArrays": _emscripten_glDrawArrays,
  "emscripten_glDrawArraysInstancedANGLE": _emscripten_glDrawArraysInstancedANGLE,
  "emscripten_glDrawBuffersWEBGL": _emscripten_glDrawBuffersWEBGL,
  "emscripten_glDrawElements": _emscripten_glDrawElements,
  "emscripten_glDrawElementsInstancedANGLE": _emscripten_glDrawElementsInstancedANGLE,
  "emscripten_glEnable": _emscripten_glEnable,
  "emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray,
  "emscripten_glEndQueryEXT": _emscripten_glEndQueryEXT,
  "emscripten_glFinish": _emscripten_glFinish,
  "emscripten_glFlush": _emscripten_glFlush,
  "emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer,
  "emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D,
  "emscripten_glFrontFace": _emscripten_glFrontFace,
  "emscripten_glGenBuffers": _emscripten_glGenBuffers,
  "emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers,
  "emscripten_glGenQueriesEXT": _emscripten_glGenQueriesEXT,
  "emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers,
  "emscripten_glGenTextures": _emscripten_glGenTextures,
  "emscripten_glGenVertexArraysOES": _emscripten_glGenVertexArraysOES,
  "emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap,
  "emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib,
  "emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform,
  "emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders,
  "emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation,
  "emscripten_glGetBooleanv": _emscripten_glGetBooleanv,
  "emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv,
  "emscripten_glGetError": _emscripten_glGetError,
  "emscripten_glGetFloatv": _emscripten_glGetFloatv,
  "emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv,
  "emscripten_glGetIntegerv": _emscripten_glGetIntegerv,
  "emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog,
  "emscripten_glGetProgramiv": _emscripten_glGetProgramiv,
  "emscripten_glGetQueryObjecti64vEXT": _emscripten_glGetQueryObjecti64vEXT,
  "emscripten_glGetQueryObjectivEXT": _emscripten_glGetQueryObjectivEXT,
  "emscripten_glGetQueryObjectui64vEXT": _emscripten_glGetQueryObjectui64vEXT,
  "emscripten_glGetQueryObjectuivEXT": _emscripten_glGetQueryObjectuivEXT,
  "emscripten_glGetQueryivEXT": _emscripten_glGetQueryivEXT,
  "emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv,
  "emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog,
  "emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat,
  "emscripten_glGetShaderSource": _emscripten_glGetShaderSource,
  "emscripten_glGetShaderiv": _emscripten_glGetShaderiv,
  "emscripten_glGetString": _emscripten_glGetString,
  "emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv,
  "emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv,
  "emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation,
  "emscripten_glGetUniformfv": _emscripten_glGetUniformfv,
  "emscripten_glGetUniformiv": _emscripten_glGetUniformiv,
  "emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv,
  "emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv,
  "emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv,
  "emscripten_glHint": _emscripten_glHint,
  "emscripten_glIsBuffer": _emscripten_glIsBuffer,
  "emscripten_glIsEnabled": _emscripten_glIsEnabled,
  "emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer,
  "emscripten_glIsProgram": _emscripten_glIsProgram,
  "emscripten_glIsQueryEXT": _emscripten_glIsQueryEXT,
  "emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer,
  "emscripten_glIsShader": _emscripten_glIsShader,
  "emscripten_glIsTexture": _emscripten_glIsTexture,
  "emscripten_glIsVertexArrayOES": _emscripten_glIsVertexArrayOES,
  "emscripten_glLineWidth": _emscripten_glLineWidth,
  "emscripten_glLinkProgram": _emscripten_glLinkProgram,
  "emscripten_glPixelStorei": _emscripten_glPixelStorei,
  "emscripten_glPolygonOffset": _emscripten_glPolygonOffset,
  "emscripten_glQueryCounterEXT": _emscripten_glQueryCounterEXT,
  "emscripten_glReadPixels": _emscripten_glReadPixels,
  "emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler,
  "emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage,
  "emscripten_glSampleCoverage": _emscripten_glSampleCoverage,
  "emscripten_glScissor": _emscripten_glScissor,
  "emscripten_glShaderBinary": _emscripten_glShaderBinary,
  "emscripten_glShaderSource": _emscripten_glShaderSource,
  "emscripten_glStencilFunc": _emscripten_glStencilFunc,
  "emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate,
  "emscripten_glStencilMask": _emscripten_glStencilMask,
  "emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate,
  "emscripten_glStencilOp": _emscripten_glStencilOp,
  "emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate,
  "emscripten_glTexImage2D": _emscripten_glTexImage2D,
  "emscripten_glTexParameterf": _emscripten_glTexParameterf,
  "emscripten_glTexParameterfv": _emscripten_glTexParameterfv,
  "emscripten_glTexParameteri": _emscripten_glTexParameteri,
  "emscripten_glTexParameteriv": _emscripten_glTexParameteriv,
  "emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D,
  "emscripten_glUniform1f": _emscripten_glUniform1f,
  "emscripten_glUniform1fv": _emscripten_glUniform1fv,
  "emscripten_glUniform1i": _emscripten_glUniform1i,
  "emscripten_glUniform1iv": _emscripten_glUniform1iv,
  "emscripten_glUniform2f": _emscripten_glUniform2f,
  "emscripten_glUniform2fv": _emscripten_glUniform2fv,
  "emscripten_glUniform2i": _emscripten_glUniform2i,
  "emscripten_glUniform2iv": _emscripten_glUniform2iv,
  "emscripten_glUniform3f": _emscripten_glUniform3f,
  "emscripten_glUniform3fv": _emscripten_glUniform3fv,
  "emscripten_glUniform3i": _emscripten_glUniform3i,
  "emscripten_glUniform3iv": _emscripten_glUniform3iv,
  "emscripten_glUniform4f": _emscripten_glUniform4f,
  "emscripten_glUniform4fv": _emscripten_glUniform4fv,
  "emscripten_glUniform4i": _emscripten_glUniform4i,
  "emscripten_glUniform4iv": _emscripten_glUniform4iv,
  "emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv,
  "emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv,
  "emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv,
  "emscripten_glUseProgram": _emscripten_glUseProgram,
  "emscripten_glValidateProgram": _emscripten_glValidateProgram,
  "emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f,
  "emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv,
  "emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f,
  "emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv,
  "emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f,
  "emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv,
  "emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f,
  "emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv,
  "emscripten_glVertexAttribDivisorANGLE": _emscripten_glVertexAttribDivisorANGLE,
  "emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer,
  "emscripten_glViewport": _emscripten_glViewport,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "emscripten_run_script": _emscripten_run_script,
  "emscripten_sample_gamepad_data": _emscripten_sample_gamepad_data,
  "emscripten_set_click_callback_on_thread": _emscripten_set_click_callback_on_thread,
  "emscripten_set_fullscreenchange_callback_on_thread": _emscripten_set_fullscreenchange_callback_on_thread,
  "emscripten_set_gamepadconnected_callback_on_thread": _emscripten_set_gamepadconnected_callback_on_thread,
  "emscripten_set_gamepaddisconnected_callback_on_thread": _emscripten_set_gamepaddisconnected_callback_on_thread,
  "emscripten_set_main_loop": _emscripten_set_main_loop,
  "emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread,
  "emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread,
  "emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread,
  "emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread,
  "exit": _exit,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "glActiveTexture": _glActiveTexture,
  "glAttachShader": _glAttachShader,
  "glBindAttribLocation": _glBindAttribLocation,
  "glBindBuffer": _glBindBuffer,
  "glBindTexture": _glBindTexture,
  "glBlendFunc": _glBlendFunc,
  "glBufferData": _glBufferData,
  "glBufferSubData": _glBufferSubData,
  "glClear": _glClear,
  "glClearColor": _glClearColor,
  "glClearDepthf": _glClearDepthf,
  "glCompileShader": _glCompileShader,
  "glCompressedTexImage2D": _glCompressedTexImage2D,
  "glCreateProgram": _glCreateProgram,
  "glCreateShader": _glCreateShader,
  "glCullFace": _glCullFace,
  "glDeleteBuffers": _glDeleteBuffers,
  "glDeleteProgram": _glDeleteProgram,
  "glDeleteShader": _glDeleteShader,
  "glDeleteTextures": _glDeleteTextures,
  "glDepthFunc": _glDepthFunc,
  "glDetachShader": _glDetachShader,
  "glDisable": _glDisable,
  "glDisableVertexAttribArray": _glDisableVertexAttribArray,
  "glDrawArrays": _glDrawArrays,
  "glDrawElements": _glDrawElements,
  "glEnable": _glEnable,
  "glEnableVertexAttribArray": _glEnableVertexAttribArray,
  "glFrontFace": _glFrontFace,
  "glGenBuffers": _glGenBuffers,
  "glGenTextures": _glGenTextures,
  "glGetAttribLocation": _glGetAttribLocation,
  "glGetFloatv": _glGetFloatv,
  "glGetProgramInfoLog": _glGetProgramInfoLog,
  "glGetProgramiv": _glGetProgramiv,
  "glGetShaderInfoLog": _glGetShaderInfoLog,
  "glGetShaderiv": _glGetShaderiv,
  "glGetString": _glGetString,
  "glGetUniformLocation": _glGetUniformLocation,
  "glLinkProgram": _glLinkProgram,
  "glPixelStorei": _glPixelStorei,
  "glReadPixels": _glReadPixels,
  "glShaderSource": _glShaderSource,
  "glTexImage2D": _glTexImage2D,
  "glTexParameterf": _glTexParameterf,
  "glTexParameteri": _glTexParameteri,
  "glUniform1i": _glUniform1i,
  "glUniform4f": _glUniform4f,
  "glUniformMatrix4fv": _glUniformMatrix4fv,
  "glUseProgram": _glUseProgram,
  "glVertexAttribPointer": _glVertexAttribPointer,
  "glViewport": _glViewport,
  "glfwCreateWindow": _glfwCreateWindow,
  "glfwDefaultWindowHints": _glfwDefaultWindowHints,
  "glfwDestroyWindow": _glfwDestroyWindow,
  "glfwGetPrimaryMonitor": _glfwGetPrimaryMonitor,
  "glfwGetTime": _glfwGetTime,
  "glfwGetVideoModes": _glfwGetVideoModes,
  "glfwInit": _glfwInit,
  "glfwMakeContextCurrent": _glfwMakeContextCurrent,
  "glfwSetCharCallback": _glfwSetCharCallback,
  "glfwSetCursorEnterCallback": _glfwSetCursorEnterCallback,
  "glfwSetCursorPosCallback": _glfwSetCursorPosCallback,
  "glfwSetDropCallback": _glfwSetDropCallback,
  "glfwSetErrorCallback": _glfwSetErrorCallback,
  "glfwSetKeyCallback": _glfwSetKeyCallback,
  "glfwSetMouseButtonCallback": _glfwSetMouseButtonCallback,
  "glfwSetScrollCallback": _glfwSetScrollCallback,
  "glfwSetWindowFocusCallback": _glfwSetWindowFocusCallback,
  "glfwSetWindowIconifyCallback": _glfwSetWindowIconifyCallback,
  "glfwSetWindowShouldClose": _glfwSetWindowShouldClose,
  "glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback,
  "glfwSwapBuffers": _glfwSwapBuffers,
  "glfwSwapInterval": _glfwSwapInterval,
  "glfwTerminate": _glfwTerminate,
  "glfwWindowHint": _glfwWindowHint,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = createExportWrapper("__wasm_call_ctors");
/** @type {function(...*):?} */
var _main = Module["_main"] = createExportWrapper("main");
/** @type {function(...*):?} */
var _malloc = createExportWrapper("malloc");
/** @type {function(...*):?} */
var _free = createExportWrapper("free");
/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush");
/** @type {function(...*):?} */
var ___getTypeName = createExportWrapper("__getTypeName");
/** @type {function(...*):?} */
var __embind_initialize_bindings = Module["__embind_initialize_bindings"] = createExportWrapper("_embind_initialize_bindings");
/** @type {function(...*):?} */
var ___errno_location = createExportWrapper("__errno_location");
/** @type {function(...*):?} */
var setTempRet0 = createExportWrapper("setTempRet0");
/** @type {function(...*):?} */
var getTempRet0 = createExportWrapper("getTempRet0");
/** @type {function(...*):?} */
var _emscripten_stack_init = function() {
  return (_emscripten_stack_init = Module["asm"]["emscripten_stack_init"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_free = function() {
  return (_emscripten_stack_get_free = Module["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_base = function() {
  return (_emscripten_stack_get_base = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _emscripten_stack_get_end = function() {
  return (_emscripten_stack_get_end = Module["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = createExportWrapper("stackSave");
/** @type {function(...*):?} */
var stackRestore = createExportWrapper("stackRestore");
/** @type {function(...*):?} */
var stackAlloc = createExportWrapper("stackAlloc");
/** @type {function(...*):?} */
var _emscripten_stack_get_current = function() {
  return (_emscripten_stack_get_current = Module["asm"]["emscripten_stack_get_current"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = createExportWrapper("__cxa_is_pointer_type");
/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji");
var ___start_em_js = Module['___start_em_js'] = 86852;
var ___stop_em_js = Module['___stop_em_js'] = 86927;

// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

var missingLibrarySymbols = [
  'emscripten_realloc_buffer',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'getHostByName',
  'traverseStack',
  'getCallstack',
  'emscriptenLog',
  'convertPCtoSourceLocation',
  'readEmAsmArgs',
  'jstoi_s',
  'getExecutableName',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'asmjsMangle',
  'getNativeTypeSize',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getCFunc',
  'ccall',
  'cwrap',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'AsciiToString',
  'stringToAscii',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'getSocketFromFD',
  'getSocketAddress',
  'registerKeyEventCallback',
  'findCanvasEventTarget',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'stackTrace',
  'getEnvStrings',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'createDyncallWrapper',
  'setImmediateWrapped',
  'clearImmediateWrapped',
  'polyfillSetImmediate',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  '_setNetworkCallback',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'SDL_unicode',
  'SDL_ttfContext',
  'SDL_audio',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'init_embind',
  'throwUnboundTypeError',
  'ensureOverloadTable',
  'exposePublicSymbol',
  'replacePublicSymbol',
  'getBasestPointer',
  'registerInheritedInstance',
  'unregisterInheritedInstance',
  'getInheritedInstance',
  'getInheritedInstanceCount',
  'getLiveInheritedInstances',
  'getTypeName',
  'heap32VectorToArray',
  'requireRegisteredType',
  'enumReadValueFromPointer',
  'runDestructors',
  'newFunc',
  'craftInvokerFunction',
  'embind__requireFunction',
  'genericPointerToWireType',
  'constNoSmartPtrRawPointerToWireType',
  'nonConstNoSmartPtrRawPointerToWireType',
  'init_RegisteredPointer',
  'RegisteredPointer',
  'RegisteredPointer_getPointee',
  'RegisteredPointer_destructor',
  'RegisteredPointer_deleteObject',
  'RegisteredPointer_fromWireType',
  'runDestructor',
  'releaseClassHandle',
  'detachFinalizer',
  'attachFinalizer',
  'makeClassHandle',
  'init_ClassHandle',
  'ClassHandle',
  'ClassHandle_isAliasOf',
  'throwInstanceAlreadyDeleted',
  'ClassHandle_clone',
  'ClassHandle_delete',
  'ClassHandle_isDeleted',
  'ClassHandle_deleteLater',
  'flushPendingDeletes',
  'setDelayFunction',
  'RegisteredClass',
  'shallowCopyInternalPointer',
  'downcastPointer',
  'upcastPointer',
  'validateThis',
  'getStringOrSymbol',
  'craftEmvalAllocator',
  'emval_get_global',
  'emval_lookupTypes',
  'emval_allocateDestructors',
  'emval_addMethodCaller',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addOnPreRun',
  'addOnInit',
  'addOnPreMain',
  'addOnExit',
  'addOnPostRun',
  'addRunDependency',
  'removeRunDependency',
  'FS_createFolder',
  'FS_createPath',
  'FS_createDataFile',
  'FS_createPreloadedFile',
  'FS_createLazyFile',
  'FS_createLink',
  'FS_createDevice',
  'FS_unlink',
  'out',
  'err',
  'callMain',
  'abort',
  'keepRuntimeAlive',
  'wasmMemory',
  'stackAlloc',
  'stackSave',
  'stackRestore',
  'getTempRet0',
  'setTempRet0',
  'writeStackCookie',
  'checkStackCookie',
  'intArrayFromBase64',
  'tryParseAsDataURI',
  'ptrToString',
  'zeroMemory',
  'exitJS',
  'getHeapMax',
  'abortOnCannotGrowMemory',
  'ENV',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'ERRNO_CODES',
  'ERRNO_MESSAGES',
  'setErrNo',
  'DNS',
  'Protocols',
  'Sockets',
  'initRandomFill',
  'randomFill',
  'timers',
  'warnOnce',
  'UNWIND_CACHE',
  'readEmAsmArgsArray',
  'jstoi_q',
  'handleException',
  'callUserCallback',
  'maybeExit',
  'safeSetTimeout',
  'asyncLoad',
  'alignMemory',
  'mmapAlloc',
  'HandleAllocator',
  'writeI53ToI64',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53Checked',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'intArrayToString',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'stringToNewUTF8',
  'SYSCALLS',
  'JSEvents',
  'specialHTMLTargets',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'demangle',
  'demangleAll',
  'ExitStatus',
  'doReadv',
  'doWritev',
  'dlopenMissingError',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'Browser',
  'setMainLoop',
  'wget',
  'FS',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'heapObjectForWebGLType',
  'heapAccessShiftForWebGLHeap',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'GL',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  '__glGenObject',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'emscripten_webgl_power_preferences',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'GLFW_Window',
  'GLFW',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'InternalError',
  'BindingError',
  'UnboundTypeError',
  'PureVirtualError',
  'throwInternalError',
  'throwBindingError',
  'extendError',
  'createNamedFunction',
  'embindRepr',
  'registeredInstances',
  'registeredTypes',
  'awaitingDependencies',
  'typeDependencies',
  'registeredPointers',
  'registerType',
  'whenDependentTypesAreResolved',
  'embind_charCodes',
  'embind_init_charCodes',
  'readLatin1String',
  'getShiftFromSize',
  'integerReadValueFromPointer',
  'floatReadValueFromPointer',
  'simpleReadValueFromPointer',
  'tupleRegistrations',
  'structRegistrations',
  'finalizationRegistry',
  'detachFinalizer_deps',
  'deletionQueue',
  'delayFunction',
  'char_0',
  'char_9',
  'makeLegalFunctionName',
  'emval_handles',
  'emval_symbols',
  'init_emval',
  'count_emval_handles',
  'Emval',
  'emval_newers',
  'emval_methodCallers',
  'emval_registeredMethods',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain() {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = _main;

  var argc = 0;
  var argv = 0;

  try {

    // See abortWrapperDepth in preamble.js!
    abortWrapperDepth += 1;

    var ret = entryFunction(argc, argv);

    // if we're not running an evented main loop, it's time to exit
    exitJS(ret, /* implicit = */ true);
    return ret;
  }
  catch (e) {
    return handleException(e);
  }
  finally {
    // See abortWrapperDepth in preamble.js!
    abortWrapperDepth -= 1;
  }
}

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    return;
  }

    stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain();

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;

run();


// end include: postamble.js
